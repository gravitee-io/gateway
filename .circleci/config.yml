version: 2.1

orbs:
    slack: circleci/slack@4.4.4
    gravitee: gravitee-io/gravitee@1.0.38
    secrethub: secrethub/cli@1.1.0
    gh: circleci/github-cli@1.0.4

executors:
    node-lts:
        parameters:
            class:
                description: The resource class
                type: enum
                enum: ["small", "medium", "large", "xlarge"]
                default: "medium"
        docker:
            - image: cimg/node:14.18
        resource_class: <<parameters.class>>

    azure-cli:
        parameters:
            resource_class:
                description: The resource class
                type: enum
                enum: ["small", "medium", "large", "xlarge"]
                default: "medium"
        docker:
            # Version can be found here https://docs.microsoft.com/en-us/cli/azure/release-notes-azure-cli
            # be careful when updating the version as it looks it is not following semver
            - image: mcr.microsoft.com/azure-cli:2.34.1
        resource_class: <<parameters.resource_class>>

commands:
    restore-maven-cache:
        description: "Restore Maven cache"
        steps:
            - restore_cache:
                  keys:
                      - gravitee-api-management-v5-{{ .Branch }}-{{ checksum "pom.xml" }}

    notify-on-failure:
        steps:
            - slack/notify:
                  branch_pattern: master
                  event: fail
                  template: basic_fail_1

    get-apim-tag:
        steps:
            - run:
                  name: Read tag of Docker images to deploy
                  command: |
                      export TAG=$(cat ./.docker-tag.txt)
                      # Workaround for sharing this variable to the next steps
                      echo "export TAG=$TAG" >> $BASH_ENV

    get-apim-version:
        steps:
            - run:
                  name: Read APIM version
                  command: |
                      export APIM_VERSION=$(cat ./.apim-version.txt)
                      # Workaround for sharing this variable to the next steps
                      echo "export APIM_VERSION=$APIM_VERSION" >> $BASH_ENV

parameters:
    gio_action:
        type: enum
        enum: [release, standalone_release, standalone_release_replay, nexus_staging, vm_nexus_staging, pull_requests]
        default: pull_requests
    dry_run:
        type: boolean
        default: true
        description: "Run in dry run mode?"
    maven_profile_id:
        type: string
        default: "gravitee-dry-run"
        description: "Maven ID of the Maven profile to use for a dry run ?"
    secrethub_org:
        type: string
        default: "graviteeio"
        description: "SecretHub Org to use to fetch secrets ?"
    secrethub_repo:
        type: string
        default: "cicd"
        description: "SecretHub Repo to use to fetch secrets ?"
    s3_bucket_name:
        type: string
        default: ""
        description: "Name of the S3 Bucket used to store and retrieve the state of the maven project, to perform the nexus staging ?"
    replayed_release:
        type: string
        default: ""
        description: "What is the version number of the release you want to replay? (Mandatory, only for the 'standalone_release_replay' Workflow / see 'gio_action' pipeline parameter)"

jobs:
    compute-apim-tag:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore_cache:
                  name: Restore Maven cache for compute-tag job
                  keys:
                      - gravitee-api-management-compute-tag-{{ .Branch }}-{{ checksum "pom.xml" }}
            - run:
                  name: Compute APIM Version
                  command: |
                      export APIM_VERSION=$(mvn -s .artifactory.settings.xml -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
                      echo "export APIM_VERSION=$APIM_VERSION" >> $BASH_ENV
                      echo "Gravitee APIM version: ${APIM_VERSION}"
                      echo $APIM_VERSION > .apim-version.txt

            - run:
                  name: Compute Tag for Docker images
                  command: |
                      export TAG=${CIRCLE_BRANCH}-latest
                      # Workaround for sharing this variable to the next steps
                      echo "export TAG=$TAG" >> $BASH_ENV
                      echo "Docker images will be tagged with: ${TAG}"
                      echo $TAG > .docker-tag.txt
            - save_cache:
                  name: Save Maven cache for compute-tag job
                  paths:
                      - ~/.m2
                  key: gravitee-api-management-compute-tag-{{ .Branch }}-{{ checksum "pom.xml" }}
                  when: always
            - persist_to_workspace:
                  root: .
                  paths:
                      - .docker-tag.txt
                      - .apim-version.txt

    sonarcloud-analysis:
        description: A job that run Sonarcloud analysis
        parameters:
            working_directory:
                description: "Directory where the Sonarcloud analysis will be run"
                default: "gravitee-apim-rest-api"
                type: string
        docker:
            - image: sonarsource/sonar-scanner-cli
        resource_class: medium
        steps:
            - run:
                  name: Add SSH tool
                  command: apk add --no-cache openssh
            - checkout
            - attach_workspace:
                  at: .
            - secrethub/env-export:
                  secret-path: graviteeio/cicd/graviteebot/infra/sonarcloud.io.token
                  var-name: SONAR_TOKEN
            - run:
                  name: Run Sonarcloud Analysis
                  command: sonar-scanner
                  working_directory: << parameters.working_directory >>
            - notify-on-failure

    build:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: "Build project"
                  command: |
                      mvn -pl '!gravitee-apim-console-webui, !gravitee-apim-portal-webui' -s .artifactory.settings.xml clean package --no-transfer-progress -DskipTests -T 2C
                      cp ./gravitee-apim-rest-api/gravitee-apim-rest-api-standalone/gravitee-apim-rest-api-standalone-distribution/gravitee-apim-rest-api-standalone-distribution-zip/target/gravitee-apim-rest-api-distribution-*.tar.gz ./
                      cp ./gravitee-apim-gateway/gravitee-apim-gateway-standalone/gravitee-apim-gateway-standalone-distribution/gravitee-apim-gateway-standalone-distribution-zip/target/gravitee-apim-gateway-distribution-*.tar.gz ./

            - notify-on-failure
            - save_cache:
                  paths:
                      - ~/.m2
                  key: gravitee-api-management-v5-{{ .Branch }}-{{ checksum "pom.xml" }}
                  when: always
            - persist_to_workspace:
                  root: ./
                  paths:
                      - ./gravitee-*/*/target/*
                      - ./gravitee-apim-rest-api-distribution-*.tar.gz
                      - ./gravitee-apim-gateway-distribution-*.tar.gz

    test:
        machine:
            image: ubuntu-2004:202107-02
        resource_class: xlarge
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: Run tests
                  command: |
                      # Need to use `package` phase to get repo-test's jar build and shared to mongodb and jdbc repos
                      mvn -pl '!gravitee-apim-console-webui, !gravitee-apim-portal-webui' -s .artifactory.settings.xml package --no-transfer-progress -T 2C
            - run:
                  name: Save test results
                  command: |
                      mkdir -p ~/test-results/junit/
                      find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                  when: always
            - notify-on-failure
            - store_test_results:
                  path: ~/test-results

    publish-on-artifactory:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: "Maven Package and deploy to Artifactory ([gravitee-snapshots] repository)"
                  command: |
                      mvn deploy --no-transfer-progress -DskipTests -T 2C -pl '!gravitee-apim-console-webui, !gravitee-apim-portal-webui' -s .artifactory.settings.xml -P gio-dev
            - notify-on-failure

    publish-on-nexus:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: large
        environment:
            NEXUS_SNAPSHOTS_URL: "https://oss.sonatype.org/content/repositories/snapshots"
            NEXUS_SNAPSHOTS_SERVER_ID: "sonatype-nexus-snapshots"
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: "Maven Package and deploy to Nexus Snapshots"
                  command: |
                      mvn deploy --no-transfer-progress -DskipTests -T 2C -pl '!gravitee-apim-console-webui, !gravitee-apim-portal-webui' -s .nexus.settings.xml  -DaltDeploymentRepository=${NEXUS_SNAPSHOTS_SERVER_ID}::default::${NEXUS_SNAPSHOTS_URL}
            - notify-on-failure

    publish-images-azure-registry:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - setup_remote_docker
            - get-apim-tag
            - get-apim-version
            - run:
                  name: Build & Publish Management API and Gateway Docker Image to Azure Registry
                  command: |

                      export REST_API_PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-management-api:${TAG}

                      export GATEWAY_PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-gateway:${TAG}

                      docker build -f gravitee-apim-rest-api/docker/Dockerfile-dev \
                      --build-arg GRAVITEEIO_VERSION=${APIM_VERSION} \
                      -t ${REST_API_PRIVATE_IMAGE_TAG} \
                      .

                      docker build -f gravitee-apim-gateway/docker/Dockerfile-dev \
                      --build-arg GRAVITEEIO_VERSION=${APIM_VERSION} \
                      -t ${GATEWAY_PRIVATE_IMAGE_TAG} \
                      .

                      echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
                      docker push ${REST_API_PRIVATE_IMAGE_TAG}
                      docker push ${GATEWAY_PRIVATE_IMAGE_TAG}
                      docker logout graviteeio.azurecr.io

            - notify-on-failure

    console-webui-install:
        executor:
            name: node-lts
            class: small
        steps:
            - checkout
            - restore_cache:
                  name: Restore NPM cache
                  keys:
                      - gravitee-apim-console-webui-cache-v1-{{ checksum "gravitee-apim-console-webui/package-lock.json" }}
            - run:
                  name: Install dependencies
                  command: npm install
                  working_directory: gravitee-apim-console-webui
            - notify-on-failure
            - save_cache:
                  name: Save NPM cache
                  key: gravitee-apim-console-webui-cache-v1-{{ checksum "gravitee-apim-console-webui/package-lock.json" }}
                  paths:
                      - ./gravitee-apim-console-webui/node_modules
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-console-webui/node_modules

    console-webui-lint-test:
        executor:
            name: node-lts
            class: medium
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                  name: Check License
                  command: npm run lint:license
                  working_directory: gravitee-apim-console-webui
            - run:
                  name: Run Prettier and ESLint
                  command: npm run lint
                  working_directory: gravitee-apim-console-webui
            - run:
                  name: Run unit tests
                  command: npm run test:ci
                  working_directory: gravitee-apim-console-webui
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-console-webui/coverage
            - store_test_results:
                  path: gravitee-apim-console-webui/coverage

    console-webui-build:
        executor:
            name: node-lts
            class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                  name: Build
                  command: npm run build:prod
                  environment:
                      NODE_OPTIONS: --max_old_space_size=4086
                      # FIXME: Use dynamic configuration
                      BACKEND_ENV: element-zero
                  working_directory: gravitee-apim-console-webui
            - run:
                  name: Zip dist folder
                  # TODO:
                  #  - Use gzip instead of zip
                  command: zip -r dist.zip dist
                  working_directory: gravitee-apim-console-webui
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-console-webui/dist

    console-webui-deploy-on-azure-storage:
        executor:
            name: azure-cli
            resource_class: small
        steps:
            - attach_workspace:
                  at: .
            - run:
                  name: Login into Azure Storage and upload dist
                  # TODO:
                  #  - Update CircleCI env var AZURE_STORAGE_CONNECTION_STRING (one for Console, one for Portal)
                  command: |
                      export BRANCH_ID=$(echo "$CIRCLE_BRANCH" | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr "[:upper:]" "[:lower:]" | cut -c -60)
                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      CONTAINER_EXISTS=$(az storage container exists -n $BRANCH_ID | jq .exists)
                      if [ "$CONTAINER_EXISTS" = false ] ; then
                        echo "Creating container $BRANCH_ID"
                        az storage container create -n $BRANCH_ID --public-access blob
                      fi   
                      az storage blob upload-batch -s gravitee-apim-console-webui/dist -d $BRANCH_ID --overwrite
            - notify-on-failure

    console-webui-comment-pr-after-deployment:
        executor:
            name: node-lts
            class: small
        steps:
            - checkout
            - gh/setup
            - run:
                  name: Edit Pull Request Description
                  command: |
                      # First check there is an associated pull request, otherwise just stop the job here
                      if ! gh pr view --json title;
                      then
                        echo "No PR found for this branch, stopping the job here."
                        exit 0
                      fi

                      # If PR state is different from OPEN
                      if [ "$(gh pr view --json state --jq .state)" != "OPEN" ];
                      then
                        echo "PR is not opened, stopping the job here."
                        exit 0
                      fi            

                      export BRANCH_ID=$(echo "$CIRCLE_BRANCH" | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr "[:upper:]" "[:lower:]" | cut -c -60)
                      export PR_BODY_UI_SECTION="
                      <!-- UI placeholder -->
                      🚀 CI was able to deploy the build of this PR, so you can now try it directly [here](https://apimnightlywebui24386.blob.core.windows.net/${BRANCH_ID}/index.html)
                      _Notes_: The deployed app is linked to the management API of the Element Zero team's environment.
                      <!-- UI placeholder end -->
                      "

                      export CLEAN_BODY=$(gh pr view --json body --jq .body | sed '/UI placeholder -->/,/UI placeholder end -->/d')

                      gh pr edit --body "$CLEAN_BODY$PR_BODY_UI_SECTION"

            - notify-on-failure

    console-webui-publish-images-azure-registry:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - setup_remote_docker
            - get-apim-tag
            - run:
                  name: Build & Publish Web UI Docker Image to Azure Registry
                  command: |
                      cp -fr docker/config .
                      cp -fr docker/run.sh .

                      export PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-management-ui:${TAG}
                      docker build -f docker/Dockerfile-dev -t ${PRIVATE_IMAGE_TAG} .

                      echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
                      docker push ${PRIVATE_IMAGE_TAG}
                      docker logout graviteeio.azurecr.io
                  working_directory: gravitee-apim-console-webui
            - notify-on-failure

    purge-master-azure-registry:
        executor:
            name: azure-cli
            resource_class: small
        steps:
            - run:
                  name: 🗑 Let's purge all master Apim images older than 1d
                  # TODO:
                  #  - Improve purge of other images and branches
                  command: |
                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      az acr run --cmd "acr purge --filter 'apim-management-ui:master-.*' --untagged --ago 1d --keep 3" --registry graviteeio /dev/null
            - notify-on-failure

    portal-webui-install:
        executor:
            name: node-lts
            class: small
        steps:
            - checkout
            - restore_cache:
                  name: Restore NPM cache
                  keys:
                      - gravitee-apim-portal-webui-cache-v1-{{ checksum "gravitee-apim-portal-webui/package-lock.json" }}
            - run:
                  name: Install dependencies
                  command: npm install
                  working_directory: gravitee-apim-portal-webui
            - notify-on-failure
            - save_cache:
                  name: Save NPM cache
                  key: gravitee-apim-portal-webui-cache-v1-{{ checksum "gravitee-apim-portal-webui/package-lock.json" }}
                  paths:
                      - ./gravitee-apim-portal-webui/node_modules
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-portal-webui/node_modules

    portal-webui-lint-test:
        executor:
            name: node-lts
            class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                  name: Check License
                  command: npm run lint:license
                  working_directory: gravitee-apim-portal-webui
            - run:
                  name: Run Prettier and ESLint
                  command: npm run lint
                  working_directory: gravitee-apim-portal-webui
            - run:
                  name: Run unit tests
                  command: npm run test:coverage
                  working_directory: gravitee-apim-portal-webui
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-portal-webui/coverage
            - store_test_results:
                  path: gravitee-apim-portal-webui/coverage

    portal-webui-build:
        executor:
            name: node-lts
            class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                  name: Build
                  command: npm run build:prod
                  environment:
                      NODE_OPTIONS: --max_old_space_size=4086
                  working_directory: gravitee-apim-portal-webui
            - run:
                  name: Zip dist folder
                  # TODO:
                  #  - Use gzip instead of zip
                  command: zip -r dist.zip dist
                  working_directory: gravitee-apim-portal-webui
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-portal-webui/dist

    portal-webui-publish-images-azure-registry:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - setup_remote_docker
            - get-apim-tag
            - run:
                  name: Build & Publish Web UI Docker Image to Azure Registry
                  command: |
                      cp -fr docker/config .
                      cp -fr docker/run.sh .

                      export PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-portal-ui:${TAG}
                      docker build -f docker/Dockerfile-dev -t ${PRIVATE_IMAGE_TAG}  .

                      echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
                      docker push ${PRIVATE_IMAGE_TAG}
                      docker logout graviteeio.azurecr.io
                  working_directory: gravitee-apim-portal-webui
            - notify-on-failure

    deploy-on-azure-cluster:
        executor:
            name: azure-cli
            resource_class: small
        steps:
            - attach_workspace:
                  at: .
            - get-apim-tag
            - run:
                  name: Install Kubectl
                  command: |
                      curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
                      chmod +x ./kubectl
                      mv ./kubectl /usr/local/bin/kubectl
                      kubectl version --client=true
            - run:
                  name: Restart APIM cluster pods
                  command: |
                      export K8S_NAME=apim-${CIRCLE_BRANCH//\./-}
                      export K8S_NAMESPACE=apim-${CIRCLE_BRANCH//\./-}

                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      az aks get-credentials --resource-group apim-hprod --name apim-hprod

                      kubectl rollout restart deployment/${K8S_NAME}-apim3-api -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAME}-apim3-portal -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAME}-apim3-ui -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAME}-apim3-gateway -n ${K8S_NAMESPACE}

            - notify-on-failure

workflows:
    pull_requests:
        when:
            and:
                - equal: [pull_requests, << pipeline.parameters.gio_action >>]
        jobs:
            - gravitee/d_pull_requests_secrets:
                  context: cicd-orchestrator
                  name: pr_secrets_resolution
            - build:
                  context: gravitee-qa
                  requires:
                      - pr_secrets_resolution
            - test:
                  requires:
                      - build
            - sonarcloud-analysis:
                  name: Sonar - << matrix.working_directory >>
                  matrix:
                      parameters:
                          working_directory:
                              - gravitee-apim-rest-api
                              - gravitee-apim-repository
                              - gravitee-apim-gateway
                  context: cicd-orchestrator
                  requires:
                      - test
            - publish-on-artifactory:
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                  requires:
                      - test
            - publish-on-nexus:
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                  requires:
                      - test
            - compute-apim-tag:
                  requires:
                      - pr_secrets_resolution
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - publish-images-azure-registry:
                  context: cicd-orchestrator
                  requires:
                      - test
                      - compute-apim-tag
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/username
                            var-name: AZURE_DOCKER_REGISTRY_USERNAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/password
                            var-name: AZURE_DOCKER_REGISTRY_PASSWORD
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - console-webui-install:
                  requires:
                      - pr_secrets_resolution
            - console-webui-lint-test:
                  requires:
                      - console-webui-install
            - console-webui-build:
                  requires:
                      - console-webui-install
            - console-webui-deploy-on-azure-storage:
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/application-id
                            var-name: AZURE_APPLICATION_ID
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/tenant
                            var-name: AZURE_TENANT
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/application-secret
                            var-name: AZURE_APPLICATION_SECRET
                  requires:
                      - console-webui-build
            - console-webui-comment-pr-after-deployment:
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/github_personal_access_token
                            var-name: GITHUB_TOKEN
                  requires:
                      - console-webui-deploy-on-azure-storage
            - console-webui-publish-images-azure-registry:
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/username
                            var-name: AZURE_DOCKER_REGISTRY_USERNAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/password
                            var-name: AZURE_DOCKER_REGISTRY_PASSWORD
                  requires:
                      - console-webui-build
                      - compute-apim-tag
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - portal-webui-install:
                  requires:
                      - pr_secrets_resolution
            - portal-webui-lint-test:
                  requires:
                      - portal-webui-install
            - sonarcloud-analysis:
                  name: Sonar - << matrix.working_directory >>
                  matrix:
                      parameters:
                          working_directory:
                              - gravitee-apim-console-webui
                              - gravitee-apim-portal-webui
                  context: cicd-orchestrator
                  requires:
                      - console-webui-lint-test
                      - portal-webui-lint-test
            - portal-webui-build:
                  requires:
                      - portal-webui-install
            - portal-webui-publish-images-azure-registry:
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/username
                            var-name: AZURE_DOCKER_REGISTRY_USERNAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/password
                            var-name: AZURE_DOCKER_REGISTRY_PASSWORD
                  requires:
                      - portal-webui-build
                      - compute-apim-tag
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - deploy-on-azure-cluster:
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/application-id
                            var-name: AZURE_APPLICATION_ID
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/tenant
                            var-name: AZURE_TENANT
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/application-secret
                            var-name: AZURE_APPLICATION_SECRET
                  requires:
                      - publish-images-azure-registry
                      - console-webui-publish-images-azure-registry
                      - portal-webui-publish-images-azure-registry
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                              - implement-continuous-deployment-to-azure

    # ---
    # The 2 Workflows Below are there for the CICD Orchestrator to be able to
    # release Gravitee Kubernetes in an APIM release Process, with Docker executors instead of VMs
    release:
        when:
            and:
                - equal: [release, << pipeline.parameters.gio_action >>]
                - not: << pipeline.parameters.dry_run >>
        jobs:
            - gravitee/d_release_secrets:
                  context: cicd-orchestrator
                  name: release_secrets_resolution
            - gravitee/d_release:
                  name: maven_n_git_release
                  requires:
                      - release_secrets_resolution
                  dry_run: false
                  maven_profile_id: << pipeline.parameters.maven_profile_id >>
                  s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
                  # container_gun_image_org: 'circleci'
                  # container_gun_image_name: 'openjdk'
                  # container_gun_image_tag: '11.0.3-jdk-stretch'
                  container_size: "large"

    release_dry_run:
        when:
            and:
                - equal: [release, << pipeline.parameters.gio_action >>]
                - << pipeline.parameters.dry_run >>
        jobs:
            - gravitee/d_release_secrets:
                  context: cicd-orchestrator
                  name: release_secrets_resolution
            - gravitee/d_release:
                  name: maven_n_git_release
                  requires:
                      - release_secrets_resolution
                  dry_run: true
                  maven_profile_id: << pipeline.parameters.maven_profile_id >>
                  s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
                  # container_gun_image_org: 'circleci'
                  # container_gun_image_name: 'openjdk'
                  # container_gun_image_tag: '11.0.3-jdk-stretch'
                  container_size: "large"
    # ---
    # CICD Workflow For APIM Orchestrated Nexus Staging, Container-based : Circle CI Docker Executor
    nexus_staging:
        when:
            equal: [nexus_staging, << pipeline.parameters.gio_action >>]
        jobs:
            - gravitee/d_nexus_staging_secrets:
                  context: cicd-orchestrator
                  name: nexus_staging_secrets_resolution
            - gravitee/d_nexus_staging:
                  name: nexus_staging
                  requires:
                      - nexus_staging_secrets_resolution
                  dry_run: << pipeline.parameters.dry_run >>
                  maven_profile_id: << pipeline.parameters.maven_profile_id >>
                  # => If you are running a standalone release, your S3 Bucket name
                  #    is 'prepared-standalone-nexus-staging-${GRAVITEE_REPO_NAME}-${RELEASE_VERSION_NUMBER}'
                  # => If you are running an Orchestrated release, The Orchestrator knows how to compute the S3 Bucket name
                  s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
                  # container_gun_image_org: 'circleci'
                  # container_gun_image_name: 'openjdk'
                  # container_gun_image_tag: '11.0.3-jdk-stretch'
                  container_size: "large"
    # ---
    # The 6 Workflows Below are there to perform a "Standalone Release" and "replay" a "Standalone Release" :
    # => independently of any APIM release Process, with Docker executors instead of VMs
    # => with chained nexus staging : only when release with dry run mode off
    standalone_release:
        when:
            and:
                - equal: [standalone_release, << pipeline.parameters.gio_action >>]
                - not: << pipeline.parameters.dry_run >>
        jobs:
            - gravitee/d_release_secrets:
                  context: cicd-orchestrator
                  name: release_secrets_resolution
            - gravitee/d_standalone_release:
                  name: maven_n_git_release
                  requires:
                      - release_secrets_resolution
                  dry_run: false
                  maven_profile_id: << pipeline.parameters.maven_profile_id >>
                  s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
                  # container_gun_image_org: 'circleci'
                  # container_gun_image_name: 'openjdk'
                  # container_gun_image_tag: '11.0.3-jdk-stretch'
                  container_size: "large"

    standalone_release_dry_run:
        when:
            and:
                - equal: [standalone_release, << pipeline.parameters.gio_action >>]
                - << pipeline.parameters.dry_run >>
        jobs:
            - gravitee/d_release_secrets:
                  context: cicd-orchestrator
                  name: release_secrets_resolution
            - gravitee/d_standalone_release:
                  name: maven_n_git_release
                  requires:
                      - release_secrets_resolution
                  dry_run: true
                  maven_profile_id: << pipeline.parameters.maven_profile_id >>
                  s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
                  # container_gun_image_org: 'circleci'
                  # container_gun_image_name: 'openjdk'
                  # container_gun_image_tag: '11.0.3-jdk-stretch'
                  container_size: "large"

    standalone_nexus_staging:
        # ---
        # Running the nexus staging makes sense only when the
        # standalone release is being performed with dry run mode off
        # That is to say, when the maven project is ready to be release to maven Staging
        # ---
        when:
            and:
                - equal: [standalone_release, << pipeline.parameters.gio_action >>]
                - not: << pipeline.parameters.dry_run >>
            # ---
            # Running the nexus staging makes sense only when the
            # standalone release is being performed with dry run mode off
            # That is to say, when the maven project is ready to be release to mmaven Staging
            # Never the less, to test the CICD system, I temporarily git pushed a different configuration
            # ---
            # when:
            # equal: [ standalone_release, << pipeline.parameters.gio_action >> ]
        jobs:
            - gravitee/d_nexus_staging_secrets:
                  context: cicd-orchestrator
                  name: nexus_staging_secrets_resolution
            - nexus_staging_dry_run_approval:
                  type: approval
                  requires:
                      - nexus_staging_secrets_resolution
            - gravitee/d_standalone_nexus_staging:
                  name: standalone_nexus_staging_dry_run
                  requires:
                      - nexus_staging_dry_run_approval
                      # - nexus_staging_secrets_resolution
                  dry_run: true
                  # maven_profile_id: << pipeline.parameters.maven_profile_id >>
                  maven_profile_id: "gravitee-release"
                  s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
                  # container_gun_image_org: 'circleci'
                  # container_gun_image_name: 'openjdk'
                  # container_gun_image_tag: '11.0.3-jdk-stretch'
                  container_size: "large"
            - gravitee/d_standalone_nexus_staging:
                  name: standalone_nexus_staging
                  requires:
                      - standalone_nexus_staging_dry_run
                      # - nexus_staging_secrets_resolution
                  dry_run: false
                  # maven_profile_id: << pipeline.parameters.maven_profile_id >>
                  maven_profile_id: "gravitee-release"
                  s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
                  # container_gun_image_org: 'circleci'
                  # container_gun_image_name: 'openjdk'
                  # container_gun_image_tag: '11.0.3-jdk-stretch'
                  container_size: "large"

    standalone_release_replay:
        when:
            and:
                - equal: [standalone_release_replay, << pipeline.parameters.gio_action >>]
                - not: << pipeline.parameters.dry_run >>
        jobs:
            - gravitee/d_release_secrets:
                  context: cicd-orchestrator
                  name: release_secrets_resolution
            - gravitee/d_standalone_release_replay:
                  name: maven_n_git_release
                  requires:
                      - release_secrets_resolution
                  dry_run: false
                  maven_profile_id: << pipeline.parameters.maven_profile_id >>
                  s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
                  gio_release_version: << pipeline.parameters.replayed_release >>
                  # container_gun_image_org: 'circleci'
                  # container_gun_image_name: 'openjdk'
                  # container_gun_image_tag: '11.0.3-jdk-stretch'
                  container_size: "large"

    standalone_release_replay_dry_run:
        when:
            and:
                - equal: [standalone_release_replay, << pipeline.parameters.gio_action >>]
                - << pipeline.parameters.dry_run >>
        jobs:
            - gravitee/d_release_secrets:
                  context: cicd-orchestrator
                  name: release_secrets_resolution
            - gravitee/d_standalone_release_replay:
                  name: maven_n_git_release
                  requires:
                      - release_secrets_resolution
                  dry_run: true
                  maven_profile_id: << pipeline.parameters.maven_profile_id >>
                  s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
                  gio_release_version: << pipeline.parameters.replayed_release >>
                  # container_gun_image_org: 'circleci'
                  # container_gun_image_name: 'openjdk'
                  # container_gun_image_tag: '11.0.3-jdk-stretch'
                  container_size: "large"

    standalone_nexus_staging_replay:
        # ---
        # Running the nexus staging makes sense only when the
        # standalone release is being performed with dry run mode off
        # That is to say, when the maven project is ready to be release to maven Staging
        # ---
        when:
            and:
                - equal: [standalone_release_replay, << pipeline.parameters.gio_action >>]
                - not: << pipeline.parameters.dry_run >>
            # ---
            # Running the nexus staging makes sense only when the
            # standalone release is being performed with dry run mode off
            # That is to say, when the maven project is ready to be release to mmaven Staging
            # Never the less, to test the CICD system, I temporarily git pushed a different configuration
            # ---
            # when:
            # equal: [ standalone_release, << pipeline.parameters.gio_action >> ]
        jobs:
            - gravitee/d_nexus_staging_secrets:
                  context: cicd-orchestrator
                  name: nexus_staging_secrets_resolution
            - nexus_staging_replay_dry_run_approval:
                  type: approval
                  requires:
                      - nexus_staging_secrets_resolution
            - gravitee/d_standalone_nexus_staging_replay:
                  name: standalone_nexus_staging_replay_dry_run
                  requires:
                      - nexus_staging_replay_dry_run_approval
                      # - nexus_staging_secrets_resolution
                  dry_run: true
                  # maven_profile_id: << pipeline.parameters.maven_profile_id >>
                  maven_profile_id: "gravitee-release"
                  s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
                  gio_release_version: << pipeline.parameters.replayed_release >>
                  # container_gun_image_org: 'circleci'
                  # container_gun_image_name: 'openjdk'
                  # container_gun_image_tag: '11.0.3-jdk-stretch'
                  container_size: "large"
            - gravitee/d_standalone_nexus_staging_replay:
                  name: standalone_nexus_staging_replay
                  requires:
                      - standalone_nexus_staging_replay_dry_run
                      # - nexus_staging_secrets_resolution
                  dry_run: false
                  # maven_profile_id: << pipeline.parameters.maven_profile_id >>
                  maven_profile_id: "gravitee-release"
                  s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
                  gio_release_version: << pipeline.parameters.replayed_release >>
                  # container_gun_image_org: 'circleci'
                  # container_gun_image_name: 'openjdk'
                  # container_gun_image_tag: '11.0.3-jdk-stretch'
                  container_size: "large"

    # ---
    # CICD Workflow For APIM Orchestrated Nexus Staging, VM-based
    vm_nexus_staging:
        when:
            equal: [vm_nexus_staging, << pipeline.parameters.gio_action >>]
        jobs:
            - gravitee/nexus_staging:
                  context: cicd-orchestrator
                  secrethub_org: << pipeline.parameters.secrethub_org >>
                  secrethub_repo: << pipeline.parameters.secrethub_repo >>
                  maven_profile_id: << pipeline.parameters.maven_profile_id >>
                  s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
