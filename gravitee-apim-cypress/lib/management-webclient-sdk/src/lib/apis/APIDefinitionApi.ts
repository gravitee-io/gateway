/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.18.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiEntity,
    ApiEntityFromJSON,
    ApiEntityToJSON,
    JsonPatch,
    JsonPatchFromJSON,
    JsonPatchToJSON,
} from '../models';

export interface ExportApiDefinition1Request {
    api: string;
    envId: string;
    orgId: string;
}

export interface PatchRequest {
    api: string;
    envId: string;
    orgId: string;
    jsonPatch: Array<JsonPatch>;
    dryRun?: boolean;
}

/**
 * 
 */
export class APIDefinitionApi extends runtime.BaseAPI {

    /**
     * User must have the API_DEFINITION[READ] permission to use this service
     * Export the API definition in JSON format
     */
    async exportApiDefinition1Raw(requestParameters: ExportApiDefinition1Request): Promise<runtime.ApiResponse<ApiEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling exportApiDefinition1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling exportApiDefinition1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling exportApiDefinition1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/definition`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_DEFINITION[READ] permission to use this service
     * Export the API definition in JSON format
     */
    async exportApiDefinition1(requestParameters: ExportApiDefinition1Request): Promise<ApiEntity> {
        const response = await this.exportApiDefinition1Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the API_DEFINITION[UPDATE] permission to use this service
     * Update the API with json patches
     */
    async patchRaw(requestParameters: PatchRequest): Promise<runtime.ApiResponse<ApiEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling patch.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling patch.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling patch.');
        }

        if (requestParameters.jsonPatch === null || requestParameters.jsonPatch === undefined) {
            throw new runtime.RequiredError('jsonPatch','Required parameter requestParameters.jsonPatch was null or undefined when calling patch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/definition`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.jsonPatch.map(JsonPatchToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_DEFINITION[UPDATE] permission to use this service
     * Update the API with json patches
     */
    async patch(requestParameters: PatchRequest): Promise<ApiEntity> {
        const response = await this.patchRaw(requestParameters);
        return await response.value();
    }

}
