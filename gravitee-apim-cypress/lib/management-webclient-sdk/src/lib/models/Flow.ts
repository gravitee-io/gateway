/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.18.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Consumer,
    ConsumerFromJSON,
    ConsumerFromJSONTyped,
    ConsumerToJSON,
    PathOperator,
    PathOperatorFromJSON,
    PathOperatorFromJSONTyped,
    PathOperatorToJSON,
    Step,
    StepFromJSON,
    StepFromJSONTyped,
    StepToJSON,
} from './';

/**
 * 
 * @export
 * @interface Flow
 */
export interface Flow {
    /**
     * 
     * @type {string}
     * @memberof Flow
     */
    name?: string;
    /**
     * 
     * @type {PathOperator}
     * @memberof Flow
     */
    path_operator?: PathOperator;
    /**
     * 
     * @type {Array<Step>}
     * @memberof Flow
     */
    pre?: Array<Step>;
    /**
     * 
     * @type {Array<Step>}
     * @memberof Flow
     */
    post?: Array<Step>;
    /**
     * 
     * @type {boolean}
     * @memberof Flow
     */
    enabled?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Flow
     */
    methods?: Array<FlowMethodsEnum>;
    /**
     * 
     * @type {string}
     * @memberof Flow
     */
    condition?: string;
    /**
     * 
     * @type {Array<Consumer>}
     * @memberof Flow
     */
    consumers?: Array<Consumer>;
}

export function FlowFromJSON(json: any): Flow {
    return FlowFromJSONTyped(json, false);
}

export function FlowFromJSONTyped(json: any, ignoreDiscriminator: boolean): Flow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'path_operator': !exists(json, 'path-operator') ? undefined : PathOperatorFromJSON(json['path-operator']),
        'pre': !exists(json, 'pre') ? undefined : ((json['pre'] as Array<any>).map(StepFromJSON)),
        'post': !exists(json, 'post') ? undefined : ((json['post'] as Array<any>).map(StepFromJSON)),
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'methods': !exists(json, 'methods') ? undefined : json['methods'],
        'condition': !exists(json, 'condition') ? undefined : json['condition'],
        'consumers': !exists(json, 'consumers') ? undefined : ((json['consumers'] as Array<any>).map(ConsumerFromJSON)),
    };
}

export function FlowToJSON(value?: Flow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'path-operator': PathOperatorToJSON(value.path_operator),
        'pre': value.pre === undefined ? undefined : ((value.pre as Array<any>).map(StepToJSON)),
        'post': value.post === undefined ? undefined : ((value.post as Array<any>).map(StepToJSON)),
        'enabled': value.enabled,
        'methods': value.methods,
        'condition': value.condition,
        'consumers': value.consumers === undefined ? undefined : ((value.consumers as Array<any>).map(ConsumerToJSON)),
    };
}

/**
* @export
* @enum {string}
*/
export enum FlowMethodsEnum {
    CONNECT = 'CONNECT',
    DELETE = 'DELETE',
    GET = 'GET',
    HEAD = 'HEAD',
    OPTIONS = 'OPTIONS',
    PATCH = 'PATCH',
    POST = 'POST',
    PUT = 'PUT',
    TRACE = 'TRACE',
    OTHER = 'OTHER'
}


