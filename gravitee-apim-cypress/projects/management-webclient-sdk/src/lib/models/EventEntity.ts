/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.18.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EventType,
    EventTypeFromJSON,
    EventTypeFromJSONTyped,
    EventTypeToJSON,
    UserEntity,
    UserEntityFromJSON,
    UserEntityFromJSONTyped,
    UserEntityToJSON,
} from './';

/**
 * 
 * @export
 * @interface EventEntity
 */
export interface EventEntity {
    /**
     * 
     * @type {string}
     * @memberof EventEntity
     */
    id?: string;
    /**
     * 
     * @type {EventType}
     * @memberof EventEntity
     */
    type?: EventType;
    /**
     * 
     * @type {string}
     * @memberof EventEntity
     */
    payload?: string;
    /**
     * 
     * @type {string}
     * @memberof EventEntity
     */
    parentId?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EventEntity
     */
    properties?: { [key: string]: string; };
    /**
     * 
     * @type {UserEntity}
     * @memberof EventEntity
     */
    user?: UserEntity;
    /**
     * 
     * @type {Array<string>}
     * @memberof EventEntity
     */
    environments?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof EventEntity
     */
    created_at?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EventEntity
     */
    updated_at?: Date;
}

export function EventEntityFromJSON(json: any): EventEntity {
    return EventEntityFromJSONTyped(json, false);
}

export function EventEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': !exists(json, 'type') ? undefined : EventTypeFromJSON(json['type']),
        'payload': !exists(json, 'payload') ? undefined : json['payload'],
        'parentId': !exists(json, 'parentId') ? undefined : json['parentId'],
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
        'user': !exists(json, 'user') ? undefined : UserEntityFromJSON(json['user']),
        'environments': !exists(json, 'environments') ? undefined : json['environments'],
        'created_at': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updated_at': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
    };
}

export function EventEntityToJSON(value?: EventEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': EventTypeToJSON(value.type),
        'payload': value.payload,
        'parentId': value.parentId,
        'properties': value.properties,
        'user': UserEntityToJSON(value.user),
        'environments': value.environments,
        'created_at': value.created_at === undefined ? undefined : (value.created_at.toISOString()),
        'updated_at': value.updated_at === undefined ? undefined : (value.updated_at.toISOString()),
    };
}


