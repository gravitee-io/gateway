/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.18.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GroupMappingEntity,
    GroupMappingEntityFromJSON,
    GroupMappingEntityFromJSONTyped,
    GroupMappingEntityToJSON,
    IdentityProviderType,
    IdentityProviderTypeFromJSON,
    IdentityProviderTypeFromJSONTyped,
    IdentityProviderTypeToJSON,
    RoleMappingEntity,
    RoleMappingEntityFromJSON,
    RoleMappingEntityFromJSONTyped,
    RoleMappingEntityToJSON,
} from './';

/**
 * 
 * @export
 * @interface IdentityProviderEntity
 */
export interface IdentityProviderEntity {
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderEntity
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderEntity
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderEntity
     */
    description?: string;
    /**
     * 
     * @type {IdentityProviderType}
     * @memberof IdentityProviderEntity
     */
    type?: IdentityProviderType;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityProviderEntity
     */
    enabled?: boolean;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IdentityProviderEntity
     */
    _configuration?: { [key: string]: object; };
    /**
     * 
     * @type {Array<GroupMappingEntity>}
     * @memberof IdentityProviderEntity
     */
    groupMappings?: Array<GroupMappingEntity>;
    /**
     * 
     * @type {Array<RoleMappingEntity>}
     * @memberof IdentityProviderEntity
     */
    roleMappings?: Array<RoleMappingEntity>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IdentityProviderEntity
     */
    userProfileMapping?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof IdentityProviderEntity
     */
    emailRequired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityProviderEntity
     */
    syncMappings?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderEntity
     */
    organization?: string;
    /**
     * 
     * @type {Date}
     * @memberof IdentityProviderEntity
     */
    created_at?: Date;
    /**
     * 
     * @type {Date}
     * @memberof IdentityProviderEntity
     */
    updated_at?: Date;
}

export function IdentityProviderEntityFromJSON(json: any): IdentityProviderEntity {
    return IdentityProviderEntityFromJSONTyped(json, false);
}

export function IdentityProviderEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentityProviderEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': !exists(json, 'type') ? undefined : IdentityProviderTypeFromJSON(json['type']),
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        '_configuration': !exists(json, 'configuration') ? undefined : json['configuration'],
        'groupMappings': !exists(json, 'groupMappings') ? undefined : ((json['groupMappings'] as Array<any>).map(GroupMappingEntityFromJSON)),
        'roleMappings': !exists(json, 'roleMappings') ? undefined : ((json['roleMappings'] as Array<any>).map(RoleMappingEntityFromJSON)),
        'userProfileMapping': !exists(json, 'userProfileMapping') ? undefined : json['userProfileMapping'],
        'emailRequired': !exists(json, 'emailRequired') ? undefined : json['emailRequired'],
        'syncMappings': !exists(json, 'syncMappings') ? undefined : json['syncMappings'],
        'organization': !exists(json, 'organization') ? undefined : json['organization'],
        'created_at': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updated_at': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
    };
}

export function IdentityProviderEntityToJSON(value?: IdentityProviderEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'type': IdentityProviderTypeToJSON(value.type),
        'enabled': value.enabled,
        'configuration': value._configuration,
        'groupMappings': value.groupMappings === undefined ? undefined : ((value.groupMappings as Array<any>).map(GroupMappingEntityToJSON)),
        'roleMappings': value.roleMappings === undefined ? undefined : ((value.roleMappings as Array<any>).map(RoleMappingEntityToJSON)),
        'userProfileMapping': value.userProfileMapping,
        'emailRequired': value.emailRequired,
        'syncMappings': value.syncMappings,
        'organization': value.organization,
        'created_at': value.created_at === undefined ? undefined : (value.created_at.toISOString()),
        'updated_at': value.updated_at === undefined ? undefined : (value.updated_at.toISOString()),
    };
}


