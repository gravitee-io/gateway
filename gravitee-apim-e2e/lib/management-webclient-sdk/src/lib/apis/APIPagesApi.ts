/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FormDataBodyPart,
  ImportPageEntity,
  NewPageEntity,
  PageEntity,
  PageType,
  UpdatePageEntity,
} from '../models';
import {
    FormDataBodyPartFromJSON,
    FormDataBodyPartToJSON,
    ImportPageEntityFromJSON,
    ImportPageEntityToJSON,
    NewPageEntityFromJSON,
    NewPageEntityToJSON,
    PageEntityFromJSON,
    PageEntityToJSON,
    PageTypeFromJSON,
    PageTypeToJSON,
    UpdatePageEntityFromJSON,
    UpdatePageEntityToJSON,
} from '../models';

export interface AttachApiPageMediaRequest {
    page: string;
    api: string;
    envId: string;
    orgId: string;
    file?: FormDataBodyPart;
    fileName?: string;
}

export interface CreateApiPageRequest {
    api: string;
    envId: string;
    orgId: string;
    newPageEntity: NewPageEntity;
}

export interface DeleteApiPageRequest {
    page: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface FetchAllApiPagesRequest {
    api: string;
    envId: string;
    orgId: string;
}

export interface FetchApiPageRequest {
    page: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiPageRequest {
    page: string;
    acceptLanguage?: string;
    portal?: boolean;
    translated?: boolean;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiPageContentRequest {
    page: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiPageMediaRequest {
    page: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiPagesRequest {
    acceptLanguage?: string;
    homepage?: boolean;
    type?: PageType;
    parent?: string;
    name?: string;
    root?: boolean;
    translated?: boolean;
    api: string;
    envId: string;
    orgId: string;
}

export interface ImportApiPageFilesRequest {
    api: string;
    envId: string;
    orgId: string;
    importPageEntity: ImportPageEntity;
}

export interface PartialUpdateApiPageRequest {
    page: string;
    api: string;
    envId: string;
    orgId: string;
    updatePageEntity?: UpdatePageEntity;
}

export interface UpdateApiPageRequest {
    page: string;
    api: string;
    envId: string;
    orgId: string;
    updatePageEntity: UpdatePageEntity;
}

export interface UpdateApiPageImportFilesRequest {
    api: string;
    envId: string;
    orgId: string;
    importPageEntity: ImportPageEntity;
}

export interface UpdatePageContentRequest {
    page: string;
    api: string;
    envId: string;
    orgId: string;
    body: string;
}

/**
 * 
 */
export class APIPagesApi extends runtime.BaseAPI {

    /**
     * User must have the API_DOCUMENTATION[UPDATE] permission to use this service
     * Attach a media to an API page 
     */
    async attachApiPageMediaRaw(requestParameters: AttachApiPageMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling attachApiPageMedia.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling attachApiPageMedia.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling attachApiPageMedia.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling attachApiPageMedia.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', new Blob([JSON.stringify(FormDataBodyPartToJSON(requestParameters.file))], { type: "application/json", }));
                    }

        if (requestParameters.fileName !== undefined) {
            formParams.append('fileName', requestParameters.fileName as any);
        }

        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}/media`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_DOCUMENTATION[UPDATE] permission to use this service
     * Attach a media to an API page 
     */
    async attachApiPageMedia(requestParameters: AttachApiPageMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.attachApiPageMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Create a page
     */
    async createApiPageRaw(requestParameters: CreateApiPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling createApiPage.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApiPage.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApiPage.');
        }

        if (requestParameters.newPageEntity === null || requestParameters.newPageEntity === undefined) {
            throw new runtime.RequiredError('newPageEntity','Required parameter requestParameters.newPageEntity was null or undefined when calling createApiPage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewPageEntityToJSON(requestParameters.newPageEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Create a page
     */
    async createApiPage(requestParameters: CreateApiPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.createApiPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Delete a page
     */
    async deleteApiPageRaw(requestParameters: DeleteApiPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling deleteApiPage.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deleteApiPage.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApiPage.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApiPage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Delete a page
     */
    async deleteApiPage(requestParameters: DeleteApiPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiPageRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Refresh all pages by calling their associated fetcher
     */
    async fetchAllApiPagesRaw(requestParameters: FetchAllApiPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling fetchAllApiPages.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling fetchAllApiPages.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling fetchAllApiPages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/_fetch`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Refresh all pages by calling their associated fetcher
     */
    async fetchAllApiPages(requestParameters: FetchAllApiPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.fetchAllApiPagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Refresh page by calling the associated fetcher
     */
    async fetchApiPageRaw(requestParameters: FetchApiPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling fetchApiPage.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling fetchApiPage.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling fetchApiPage.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling fetchApiPage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}/_fetch`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Refresh page by calling the associated fetcher
     */
    async fetchApiPage(requestParameters: FetchApiPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.fetchApiPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * Get a page
     */
    async getApiPageRaw(requestParameters: GetApiPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getApiPage.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiPage.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiPage.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiPage.');
        }

        const queryParameters: any = {};

        if (requestParameters.portal !== undefined) {
            queryParameters['portal'] = requestParameters.portal;
        }

        if (requestParameters.translated !== undefined) {
            queryParameters['translated'] = requestParameters.translated;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the READ permission to use this service
     * Get a page
     */
    async getApiPage(requestParameters: GetApiPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.getApiPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * Get the page\'s content
     */
    async getApiPageContentRaw(requestParameters: GetApiPageContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getApiPageContent.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiPageContent.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiPageContent.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiPageContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}/content`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the READ permission to use this service
     * Get the page\'s content
     */
    async getApiPageContent(requestParameters: GetApiPageContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getApiPageContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_DOCUMENTATION[READ] permission to use this service
     * Retrieve all media for an API page
     */
    async getApiPageMediaRaw(requestParameters: GetApiPageMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getApiPageMedia.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiPageMedia.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiPageMedia.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiPageMedia.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}/media`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the API_DOCUMENTATION[READ] permission to use this service
     * Retrieve all media for an API page
     */
    async getApiPageMedia(requestParameters: GetApiPageMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiPageMediaRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the READ permission to use this service
     * List pages
     */
    async getApiPagesRaw(requestParameters: GetApiPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PageEntity>>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiPages.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiPages.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiPages.');
        }

        const queryParameters: any = {};

        if (requestParameters.homepage !== undefined) {
            queryParameters['homepage'] = requestParameters.homepage;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.root !== undefined) {
            queryParameters['root'] = requestParameters.root;
        }

        if (requestParameters.translated !== undefined) {
            queryParameters['translated'] = requestParameters.translated;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PageEntityFromJSON));
    }

    /**
     * User must have the READ permission to use this service
     * List pages
     */
    async getApiPages(requestParameters: GetApiPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PageEntity>> {
        const response = await this.getApiPagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must be ADMIN to use this service
     * Import pages
     */
    async importApiPageFilesRaw(requestParameters: ImportApiPageFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling importApiPageFiles.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling importApiPageFiles.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling importApiPageFiles.');
        }

        if (requestParameters.importPageEntity === null || requestParameters.importPageEntity === undefined) {
            throw new runtime.RequiredError('importPageEntity','Required parameter requestParameters.importPageEntity was null or undefined when calling importApiPageFiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/_import`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportPageEntityToJSON(requestParameters.importPageEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must be ADMIN to use this service
     * Import pages
     */
    async importApiPageFiles(requestParameters: ImportApiPageFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.importApiPageFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Update a page
     */
    async partialUpdateApiPageRaw(requestParameters: PartialUpdateApiPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling partialUpdateApiPage.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling partialUpdateApiPage.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling partialUpdateApiPage.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling partialUpdateApiPage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePageEntityToJSON(requestParameters.updatePageEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Update a page
     */
    async partialUpdateApiPage(requestParameters: PartialUpdateApiPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.partialUpdateApiPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Update a page
     */
    async updateApiPageRaw(requestParameters: UpdateApiPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling updateApiPage.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updateApiPage.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApiPage.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApiPage.');
        }

        if (requestParameters.updatePageEntity === null || requestParameters.updatePageEntity === undefined) {
            throw new runtime.RequiredError('updatePageEntity','Required parameter requestParameters.updatePageEntity was null or undefined when calling updateApiPage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePageEntityToJSON(requestParameters.updatePageEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Update a page
     */
    async updateApiPage(requestParameters: UpdateApiPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.updateApiPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must be ADMIN to use this service
     * Import pages
     */
    async updateApiPageImportFilesRaw(requestParameters: UpdateApiPageImportFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updateApiPageImportFiles.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApiPageImportFiles.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApiPageImportFiles.');
        }

        if (requestParameters.importPageEntity === null || requestParameters.importPageEntity === undefined) {
            throw new runtime.RequiredError('importPageEntity','Required parameter requestParameters.importPageEntity was null or undefined when calling updateApiPageImportFiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/_import`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ImportPageEntityToJSON(requestParameters.importPageEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must be ADMIN to use this service
     * Import pages
     */
    async updateApiPageImportFiles(requestParameters: UpdateApiPageImportFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.updateApiPageImportFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Put the page\'s content
     */
    async updatePageContentRaw(requestParameters: UpdatePageContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling updatePageContent.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updatePageContent.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updatePageContent.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updatePageContent.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updatePageContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}/content`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Put the page\'s content
     */
    async updatePageContent(requestParameters: UpdatePageContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePageContentRaw(requestParameters, initOverrides);
    }

}
