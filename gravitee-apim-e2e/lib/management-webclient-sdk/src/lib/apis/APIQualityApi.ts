/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiQualityRuleEntity,
  NewApiQualityRuleEntity,
  UpdateApiQualityRuleEntity,
} from '../models';
import {
    ApiQualityRuleEntityFromJSON,
    ApiQualityRuleEntityToJSON,
    NewApiQualityRuleEntityFromJSON,
    NewApiQualityRuleEntityToJSON,
    UpdateApiQualityRuleEntityFromJSON,
    UpdateApiQualityRuleEntityToJSON,
} from '../models';

export interface CreateApiQualityRuleRequest {
    api: string;
    envId: string;
    orgId: string;
    newApiQualityRuleEntity: NewApiQualityRuleEntity;
}

export interface GetApiQualityRulesRequest {
    api: string;
    envId: string;
    orgId: string;
}

export interface UpdateApiQualityRuleRequest {
    qualityRule: string;
    api: string;
    envId: string;
    orgId: string;
    updateApiQualityRuleEntity: UpdateApiQualityRuleEntity;
}

/**
 * 
 */
export class APIQualityApi extends runtime.BaseAPI {

    /**
     * User must have the API_QUALITY_RULE[CREATE] permission to use this service
     * Create a new quality rules for an API
     */
    async createApiQualityRuleRaw(requestParameters: CreateApiQualityRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiQualityRuleEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling createApiQualityRule.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApiQualityRule.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApiQualityRule.');
        }

        if (requestParameters.newApiQualityRuleEntity === null || requestParameters.newApiQualityRuleEntity === undefined) {
            throw new runtime.RequiredError('newApiQualityRuleEntity','Required parameter requestParameters.newApiQualityRuleEntity was null or undefined when calling createApiQualityRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/quality-rules`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewApiQualityRuleEntityToJSON(requestParameters.newApiQualityRuleEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiQualityRuleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_QUALITY_RULE[CREATE] permission to use this service
     * Create a new quality rules for an API
     */
    async createApiQualityRule(requestParameters: CreateApiQualityRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiQualityRuleEntity> {
        const response = await this.createApiQualityRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_QUALITY_RULE[READ] permission to use this service
     * List quality rules for an API
     */
    async getApiQualityRulesRaw(requestParameters: GetApiQualityRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiQualityRuleEntity>>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiQualityRules.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiQualityRules.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiQualityRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/quality-rules`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiQualityRuleEntityFromJSON));
    }

    /**
     * User must have the API_QUALITY_RULE[READ] permission to use this service
     * List quality rules for an API
     */
    async getApiQualityRules(requestParameters: GetApiQualityRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiQualityRuleEntity>> {
        const response = await this.getApiQualityRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_QUALITY_RULE[UPDATE] permission to use this service
     * Update an existing quality rules for an API
     */
    async updateApiQualityRuleRaw(requestParameters: UpdateApiQualityRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiQualityRuleEntity>> {
        if (requestParameters.qualityRule === null || requestParameters.qualityRule === undefined) {
            throw new runtime.RequiredError('qualityRule','Required parameter requestParameters.qualityRule was null or undefined when calling updateApiQualityRule.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updateApiQualityRule.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApiQualityRule.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApiQualityRule.');
        }

        if (requestParameters.updateApiQualityRuleEntity === null || requestParameters.updateApiQualityRuleEntity === undefined) {
            throw new runtime.RequiredError('updateApiQualityRuleEntity','Required parameter requestParameters.updateApiQualityRuleEntity was null or undefined when calling updateApiQualityRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/quality-rules/{qualityRule}`.replace(`{${"qualityRule"}}`, encodeURIComponent(String(requestParameters.qualityRule))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApiQualityRuleEntityToJSON(requestParameters.updateApiQualityRuleEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiQualityRuleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_QUALITY_RULE[UPDATE] permission to use this service
     * Update an existing quality rules for an API
     */
    async updateApiQualityRule(requestParameters: UpdateApiQualityRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiQualityRuleEntity> {
        const response = await this.updateApiQualityRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
