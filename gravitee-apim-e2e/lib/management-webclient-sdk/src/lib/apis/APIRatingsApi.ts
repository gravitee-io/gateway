/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NewRatingAnswerEntity,
  NewRatingEntity,
  PageRatingEntity,
  RatingEntity,
  RatingSummaryEntity,
  UpdateRatingEntity,
} from '../models';
import {
    NewRatingAnswerEntityFromJSON,
    NewRatingAnswerEntityToJSON,
    NewRatingEntityFromJSON,
    NewRatingEntityToJSON,
    PageRatingEntityFromJSON,
    PageRatingEntityToJSON,
    RatingEntityFromJSON,
    RatingEntityToJSON,
    RatingSummaryEntityFromJSON,
    RatingSummaryEntityToJSON,
    UpdateRatingEntityFromJSON,
    UpdateRatingEntityToJSON,
} from '../models';

export interface CreateApiRatingRequest {
    api: string;
    envId: string;
    orgId: string;
    newRatingEntity: NewRatingEntity;
}

export interface CreateApiRatingAnswerRequest {
    rating: string;
    api: string;
    envId: string;
    orgId: string;
    newRatingAnswerEntity: NewRatingAnswerEntity;
}

export interface DeleteApiRatingRequest {
    rating: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface DeleteApiRatingAnswerRequest {
    rating: string;
    answer: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiRatingRequest {
    pageNumber?: number;
    pageSize?: number;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiRatingByApiAndUserRequest {
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiRatingSummaryByApiRequest {
    api: string;
    envId: string;
    orgId: string;
}

export interface UpdateApiRatingRequest {
    rating: string;
    api: string;
    envId: string;
    orgId: string;
    updateRatingEntity: UpdateRatingEntity;
}

/**
 * 
 */
export class APIRatingsApi extends runtime.BaseAPI {

    /**
     * User must have the API_RATING[CREATE] permission to use this service
     * Create a new rating for an API
     */
    async createApiRatingRaw(requestParameters: CreateApiRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling createApiRating.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApiRating.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApiRating.');
        }

        if (requestParameters.newRatingEntity === null || requestParameters.newRatingEntity === undefined) {
            throw new runtime.RequiredError('newRatingEntity','Required parameter requestParameters.newRatingEntity was null or undefined when calling createApiRating.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRatingEntityToJSON(requestParameters.newRatingEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_RATING[CREATE] permission to use this service
     * Create a new rating for an API
     */
    async createApiRating(requestParameters: CreateApiRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingEntity> {
        const response = await this.createApiRatingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_RATING_ANSWER[CREATE] permission to use this service
     * Create an answer to a rating for an API
     */
    async createApiRatingAnswerRaw(requestParameters: CreateApiRatingAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingEntity>> {
        if (requestParameters.rating === null || requestParameters.rating === undefined) {
            throw new runtime.RequiredError('rating','Required parameter requestParameters.rating was null or undefined when calling createApiRatingAnswer.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling createApiRatingAnswer.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApiRatingAnswer.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApiRatingAnswer.');
        }

        if (requestParameters.newRatingAnswerEntity === null || requestParameters.newRatingAnswerEntity === undefined) {
            throw new runtime.RequiredError('newRatingAnswerEntity','Required parameter requestParameters.newRatingAnswerEntity was null or undefined when calling createApiRatingAnswer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/{rating}/answers`.replace(`{${"rating"}}`, encodeURIComponent(String(requestParameters.rating))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRatingAnswerEntityToJSON(requestParameters.newRatingAnswerEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_RATING_ANSWER[CREATE] permission to use this service
     * Create an answer to a rating for an API
     */
    async createApiRatingAnswer(requestParameters: CreateApiRatingAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingEntity> {
        const response = await this.createApiRatingAnswerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_RATING[DELETE] permission to use this service
     * Delete an existing rating for an API
     */
    async deleteApiRatingRaw(requestParameters: DeleteApiRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.rating === null || requestParameters.rating === undefined) {
            throw new runtime.RequiredError('rating','Required parameter requestParameters.rating was null or undefined when calling deleteApiRating.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deleteApiRating.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApiRating.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApiRating.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/{rating}`.replace(`{${"rating"}}`, encodeURIComponent(String(requestParameters.rating))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the API_RATING[DELETE] permission to use this service
     * Delete an existing rating for an API
     */
    async deleteApiRating(requestParameters: DeleteApiRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiRatingRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the API_RATING_ANSWER[DELETE] permission to use this service
     * Delete an answer to a rating for an API
     */
    async deleteApiRatingAnswerRaw(requestParameters: DeleteApiRatingAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.rating === null || requestParameters.rating === undefined) {
            throw new runtime.RequiredError('rating','Required parameter requestParameters.rating was null or undefined when calling deleteApiRatingAnswer.');
        }

        if (requestParameters.answer === null || requestParameters.answer === undefined) {
            throw new runtime.RequiredError('answer','Required parameter requestParameters.answer was null or undefined when calling deleteApiRatingAnswer.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deleteApiRatingAnswer.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApiRatingAnswer.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApiRatingAnswer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/{rating}/answers/{answer}`.replace(`{${"rating"}}`, encodeURIComponent(String(requestParameters.rating))).replace(`{${"answer"}}`, encodeURIComponent(String(requestParameters.answer))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the API_RATING_ANSWER[DELETE] permission to use this service
     * Delete an answer to a rating for an API
     */
    async deleteApiRatingAnswer(requestParameters: DeleteApiRatingAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiRatingAnswerRaw(requestParameters, initOverrides);
    }

    /**
     * List ratings for an API
     */
    async getApiRatingRaw(requestParameters: GetApiRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageRatingEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiRating.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiRating.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiRating.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageRatingEntityFromJSON(jsonValue));
    }

    /**
     * List ratings for an API
     */
    async getApiRating(requestParameters: GetApiRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageRatingEntity> {
        const response = await this.getApiRatingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve current rating for an API provided by the authenticated user
     */
    async getApiRatingByApiAndUserRaw(requestParameters: GetApiRatingByApiAndUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiRatingByApiAndUser.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiRatingByApiAndUser.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiRatingByApiAndUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/current`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingEntityFromJSON(jsonValue));
    }

    /**
     * Retrieve current rating for an API provided by the authenticated user
     */
    async getApiRatingByApiAndUser(requestParameters: GetApiRatingByApiAndUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingEntity> {
        const response = await this.getApiRatingByApiAndUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the rating summary for an API
     */
    async getApiRatingSummaryByApiRaw(requestParameters: GetApiRatingSummaryByApiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingSummaryEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiRatingSummaryByApi.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiRatingSummaryByApi.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiRatingSummaryByApi.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/summary`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingSummaryEntityFromJSON(jsonValue));
    }

    /**
     * Get the rating summary for an API
     */
    async getApiRatingSummaryByApi(requestParameters: GetApiRatingSummaryByApiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingSummaryEntity> {
        const response = await this.getApiRatingSummaryByApiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_RATING[UPDATE] permission to use this service
     * Update an existing rating for an API
     */
    async updateApiRatingRaw(requestParameters: UpdateApiRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingEntity>> {
        if (requestParameters.rating === null || requestParameters.rating === undefined) {
            throw new runtime.RequiredError('rating','Required parameter requestParameters.rating was null or undefined when calling updateApiRating.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updateApiRating.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApiRating.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApiRating.');
        }

        if (requestParameters.updateRatingEntity === null || requestParameters.updateRatingEntity === undefined) {
            throw new runtime.RequiredError('updateRatingEntity','Required parameter requestParameters.updateRatingEntity was null or undefined when calling updateApiRating.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/{rating}`.replace(`{${"rating"}}`, encodeURIComponent(String(requestParameters.rating))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRatingEntityToJSON(requestParameters.updateRatingEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_RATING[UPDATE] permission to use this service
     * Update an existing rating for an API
     */
    async updateApiRating(requestParameters: UpdateApiRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingEntity> {
        const response = await this.updateApiRatingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
