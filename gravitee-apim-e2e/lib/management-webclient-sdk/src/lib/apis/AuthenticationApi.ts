/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Payload,
  SocialIdentityProviderEntity,
} from '../models';
import {
    PayloadFromJSON,
    PayloadToJSON,
    SocialIdentityProviderEntityFromJSON,
    SocialIdentityProviderEntityToJSON,
} from '../models';

export interface ExchangeAuthorizationCodeRequest {
    identity: string;
    envId: string;
    orgId: string;
    payload: Payload;
}

export interface ExchangeAuthorizationCode1Request {
    identity: string;
    orgId: string;
    payload: Payload;
}

export interface GetSocialIdentityProvidersRequest {
    envId: string;
    orgId: string;
}

export interface GetSocialIdentityProviders1Request {
    orgId: string;
}

export interface TokenExchange1Request {
    identity: string;
    token?: string;
    envId: string;
    orgId: string;
}

export interface TokenExchange2Request {
    identity: string;
    token?: string;
    orgId: string;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     */
    async exchangeAuthorizationCodeRaw(requestParameters: ExchangeAuthorizationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.identity === null || requestParameters.identity === undefined) {
            throw new runtime.RequiredError('identity','Required parameter requestParameters.identity was null or undefined when calling exchangeAuthorizationCode.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling exchangeAuthorizationCode.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling exchangeAuthorizationCode.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling exchangeAuthorizationCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/auth/oauth2/{identity}`.replace(`{${"identity"}}`, encodeURIComponent(String(requestParameters.identity))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayloadToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async exchangeAuthorizationCode(requestParameters: ExchangeAuthorizationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.exchangeAuthorizationCodeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async exchangeAuthorizationCode1Raw(requestParameters: ExchangeAuthorizationCode1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.identity === null || requestParameters.identity === undefined) {
            throw new runtime.RequiredError('identity','Required parameter requestParameters.identity was null or undefined when calling exchangeAuthorizationCode1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling exchangeAuthorizationCode1.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling exchangeAuthorizationCode1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/auth/oauth2/{identity}`.replace(`{${"identity"}}`, encodeURIComponent(String(requestParameters.identity))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayloadToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async exchangeAuthorizationCode1(requestParameters: ExchangeAuthorizationCode1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.exchangeAuthorizationCode1Raw(requestParameters, initOverrides);
    }

    /**
     * Get the list of social identity providers
     */
    async getSocialIdentityProvidersRaw(requestParameters: GetSocialIdentityProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SocialIdentityProviderEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getSocialIdentityProviders.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getSocialIdentityProviders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/portal/identities`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SocialIdentityProviderEntityFromJSON));
    }

    /**
     * Get the list of social identity providers
     */
    async getSocialIdentityProviders(requestParameters: GetSocialIdentityProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SocialIdentityProviderEntity>> {
        const response = await this.getSocialIdentityProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of social identity providers
     */
    async getSocialIdentityProviders1Raw(requestParameters: GetSocialIdentityProviders1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SocialIdentityProviderEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getSocialIdentityProviders1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/social-identities`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SocialIdentityProviderEntityFromJSON));
    }

    /**
     * Get the list of social identity providers
     */
    async getSocialIdentityProviders1(requestParameters: GetSocialIdentityProviders1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SocialIdentityProviderEntity>> {
        const response = await this.getSocialIdentityProviders1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tokenExchange1Raw(requestParameters: TokenExchange1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.identity === null || requestParameters.identity === undefined) {
            throw new runtime.RequiredError('identity','Required parameter requestParameters.identity was null or undefined when calling tokenExchange1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling tokenExchange1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling tokenExchange1.');
        }

        const queryParameters: any = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/auth/oauth2/{identity}/exchange`.replace(`{${"identity"}}`, encodeURIComponent(String(requestParameters.identity))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenExchange1(requestParameters: TokenExchange1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenExchange1Raw(requestParameters, initOverrides);
    }

    /**
     */
    async tokenExchange2Raw(requestParameters: TokenExchange2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.identity === null || requestParameters.identity === undefined) {
            throw new runtime.RequiredError('identity','Required parameter requestParameters.identity was null or undefined when calling tokenExchange2.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling tokenExchange2.');
        }

        const queryParameters: any = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/auth/oauth2/{identity}/exchange`.replace(`{${"identity"}}`, encodeURIComponent(String(requestParameters.identity))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tokenExchange2(requestParameters: TokenExchange2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokenExchange2Raw(requestParameters, initOverrides);
    }

}
