/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiHeaderEntity,
  CategoryEntity,
  ClientRegistrationProviderEntity,
  ClientRegistrationProviderListItem,
  CustomUserFieldEntity,
  DashboardEntity,
  DictionaryEntity,
  DictionaryListItem,
  EntrypointEntity,
  GenericNotificationConfigEntity,
  GroupEntity,
  GroupMemberEntity,
  GroupMembership,
  Hook,
  IdentityProviderEntity,
  IdentityProviderListItem,
  InvitationEntity,
  LifecycleAction,
  MembershipListItem,
  MetadataEntity,
  NewApiHeaderEntity,
  NewCategoryEntity,
  NewClientRegistrationProviderEntity,
  NewDashboardEntity,
  NewDictionaryEntity,
  NewEntryPointEntity,
  NewGroupEntity,
  NewIdentityProviderEntity,
  NewInvitationEntity,
  NewMetadataEntity,
  NewQualityRuleEntity,
  NewRoleEntity,
  NewTagEntity,
  NewTenantEntity,
  NewThemeEntity,
  NewTopApiEntity,
  NotificationTemplateEntity,
  NotifierEntity,
  OrganizationFlowConfiguration,
  PlansConfigurationEntity,
  PortalNotificationConfigEntity,
  QualityRuleEntity,
  RoleEntity,
  RoleMembership,
  RoleScope,
  TagEntity,
  TenantEntity,
  ThemeEntity,
  TopApiEntity,
  UpdateApiHeaderEntity,
  UpdateCategoryEntity,
  UpdateClientRegistrationProviderEntity,
  UpdateDashboardEntity,
  UpdateDictionaryEntity,
  UpdateEntryPointEntity,
  UpdateGroupEntity,
  UpdateIdentityProviderEntity,
  UpdateInvitationEntity,
  UpdateMetadataEntity,
  UpdateQualityRuleEntity,
  UpdateRoleEntity,
  UpdateTagEntity,
  UpdateTenantEntity,
  UpdateThemeEntity,
  UpdateTopApiEntity,
} from '../models';
import {
    ApiHeaderEntityFromJSON,
    ApiHeaderEntityToJSON,
    CategoryEntityFromJSON,
    CategoryEntityToJSON,
    ClientRegistrationProviderEntityFromJSON,
    ClientRegistrationProviderEntityToJSON,
    ClientRegistrationProviderListItemFromJSON,
    ClientRegistrationProviderListItemToJSON,
    CustomUserFieldEntityFromJSON,
    CustomUserFieldEntityToJSON,
    DashboardEntityFromJSON,
    DashboardEntityToJSON,
    DictionaryEntityFromJSON,
    DictionaryEntityToJSON,
    DictionaryListItemFromJSON,
    DictionaryListItemToJSON,
    EntrypointEntityFromJSON,
    EntrypointEntityToJSON,
    GenericNotificationConfigEntityFromJSON,
    GenericNotificationConfigEntityToJSON,
    GroupEntityFromJSON,
    GroupEntityToJSON,
    GroupMemberEntityFromJSON,
    GroupMemberEntityToJSON,
    GroupMembershipFromJSON,
    GroupMembershipToJSON,
    HookFromJSON,
    HookToJSON,
    IdentityProviderEntityFromJSON,
    IdentityProviderEntityToJSON,
    IdentityProviderListItemFromJSON,
    IdentityProviderListItemToJSON,
    InvitationEntityFromJSON,
    InvitationEntityToJSON,
    LifecycleActionFromJSON,
    LifecycleActionToJSON,
    MembershipListItemFromJSON,
    MembershipListItemToJSON,
    MetadataEntityFromJSON,
    MetadataEntityToJSON,
    NewApiHeaderEntityFromJSON,
    NewApiHeaderEntityToJSON,
    NewCategoryEntityFromJSON,
    NewCategoryEntityToJSON,
    NewClientRegistrationProviderEntityFromJSON,
    NewClientRegistrationProviderEntityToJSON,
    NewDashboardEntityFromJSON,
    NewDashboardEntityToJSON,
    NewDictionaryEntityFromJSON,
    NewDictionaryEntityToJSON,
    NewEntryPointEntityFromJSON,
    NewEntryPointEntityToJSON,
    NewGroupEntityFromJSON,
    NewGroupEntityToJSON,
    NewIdentityProviderEntityFromJSON,
    NewIdentityProviderEntityToJSON,
    NewInvitationEntityFromJSON,
    NewInvitationEntityToJSON,
    NewMetadataEntityFromJSON,
    NewMetadataEntityToJSON,
    NewQualityRuleEntityFromJSON,
    NewQualityRuleEntityToJSON,
    NewRoleEntityFromJSON,
    NewRoleEntityToJSON,
    NewTagEntityFromJSON,
    NewTagEntityToJSON,
    NewTenantEntityFromJSON,
    NewTenantEntityToJSON,
    NewThemeEntityFromJSON,
    NewThemeEntityToJSON,
    NewTopApiEntityFromJSON,
    NewTopApiEntityToJSON,
    NotificationTemplateEntityFromJSON,
    NotificationTemplateEntityToJSON,
    NotifierEntityFromJSON,
    NotifierEntityToJSON,
    OrganizationFlowConfigurationFromJSON,
    OrganizationFlowConfigurationToJSON,
    PlansConfigurationEntityFromJSON,
    PlansConfigurationEntityToJSON,
    PortalNotificationConfigEntityFromJSON,
    PortalNotificationConfigEntityToJSON,
    QualityRuleEntityFromJSON,
    QualityRuleEntityToJSON,
    RoleEntityFromJSON,
    RoleEntityToJSON,
    RoleMembershipFromJSON,
    RoleMembershipToJSON,
    RoleScopeFromJSON,
    RoleScopeToJSON,
    TagEntityFromJSON,
    TagEntityToJSON,
    TenantEntityFromJSON,
    TenantEntityToJSON,
    ThemeEntityFromJSON,
    ThemeEntityToJSON,
    TopApiEntityFromJSON,
    TopApiEntityToJSON,
    UpdateApiHeaderEntityFromJSON,
    UpdateApiHeaderEntityToJSON,
    UpdateCategoryEntityFromJSON,
    UpdateCategoryEntityToJSON,
    UpdateClientRegistrationProviderEntityFromJSON,
    UpdateClientRegistrationProviderEntityToJSON,
    UpdateDashboardEntityFromJSON,
    UpdateDashboardEntityToJSON,
    UpdateDictionaryEntityFromJSON,
    UpdateDictionaryEntityToJSON,
    UpdateEntryPointEntityFromJSON,
    UpdateEntryPointEntityToJSON,
    UpdateGroupEntityFromJSON,
    UpdateGroupEntityToJSON,
    UpdateIdentityProviderEntityFromJSON,
    UpdateIdentityProviderEntityToJSON,
    UpdateInvitationEntityFromJSON,
    UpdateInvitationEntityToJSON,
    UpdateMetadataEntityFromJSON,
    UpdateMetadataEntityToJSON,
    UpdateQualityRuleEntityFromJSON,
    UpdateQualityRuleEntityToJSON,
    UpdateRoleEntityFromJSON,
    UpdateRoleEntityToJSON,
    UpdateTagEntityFromJSON,
    UpdateTagEntityToJSON,
    UpdateTenantEntityFromJSON,
    UpdateTenantEntityToJSON,
    UpdateThemeEntityFromJSON,
    UpdateThemeEntityToJSON,
    UpdateTopApiEntityFromJSON,
    UpdateTopApiEntityToJSON,
} from '../models';

export interface AddGroupMemberRequest {
    group: string;
    type?: string;
    envId: string;
    orgId: string;
}

export interface AddOrUpdateGroupMemberRequest {
    group: string;
    envId: string;
    orgId: string;
    groupMembership: Array<GroupMembership>;
}

export interface AddRoleToUserRequest {
    scope: RoleScope;
    role: string;
    orgId: string;
    roleMembership: RoleMembership;
}

export interface AddRoleToUser1Request {
    scope: RoleScope;
    role: string;
    envId: string;
    orgId: string;
    roleMembership: RoleMembership;
}

export interface CreateApiHeaderRequest {
    envId: string;
    orgId: string;
    newApiHeaderEntity: NewApiHeaderEntity;
}

export interface CreateCategoryRequest {
    envId: string;
    orgId: string;
    newCategoryEntity: NewCategoryEntity;
}

export interface CreateClientRegistrationProviderRequest {
    envId: string;
    orgId: string;
    newClientRegistrationProviderEntity: NewClientRegistrationProviderEntity;
}

export interface CreateCustomUserFieldRequest {
    orgId: string;
    customUserFieldEntity?: CustomUserFieldEntity;
}

export interface CreateDashboardRequest {
    envId: string;
    orgId: string;
    newDashboardEntity: NewDashboardEntity;
}

export interface CreateDictionaryRequest {
    envId: string;
    orgId: string;
    newDictionaryEntity: NewDictionaryEntity;
}

export interface CreateEntrypointRequest {
    orgId: string;
    newEntryPointEntity: NewEntryPointEntity;
}

export interface CreateEntrypoint1Request {
    envId: string;
    orgId: string;
    newEntryPointEntity: NewEntryPointEntity;
}

export interface CreateGroupRequest {
    envId: string;
    orgId: string;
    newGroupEntity: NewGroupEntity;
}

export interface CreateGroupInvitationRequest {
    group: string;
    envId: string;
    orgId: string;
    newInvitationEntity: NewInvitationEntity;
}

export interface CreateIdentityProviderRequest {
    orgId: string;
    newIdentityProviderEntity: NewIdentityProviderEntity;
}

export interface CreateIdentityProvider1Request {
    envId: string;
    orgId: string;
    newIdentityProviderEntity: NewIdentityProviderEntity;
}

export interface CreateMetadataRequest {
    envId: string;
    orgId: string;
    newMetadataEntity: NewMetadataEntity;
}

export interface CreateNotificationTemplateRequest {
    orgId: string;
    notificationTemplateEntity?: NotificationTemplateEntity;
}

export interface CreatePortalNotificationSettingRequest {
    envId: string;
    orgId: string;
    genericNotificationConfigEntity?: GenericNotificationConfigEntity;
}

export interface CreateQualityRuleRequest {
    envId: string;
    orgId: string;
    newQualityRuleEntity: NewQualityRuleEntity;
}

export interface CreateRoleRequest {
    scope: RoleScope;
    orgId: string;
    newRoleEntity: NewRoleEntity;
}

export interface CreateRole1Request {
    scope: RoleScope;
    envId: string;
    orgId: string;
    newRoleEntity: NewRoleEntity;
}

export interface CreateTagRequest {
    orgId: string;
    newTagEntity: NewTagEntity;
}

export interface CreateTag1Request {
    envId: string;
    orgId: string;
    newTagEntity: NewTagEntity;
}

export interface CreateTenantsRequest {
    orgId: string;
    newTenantEntity: Array<NewTenantEntity>;
}

export interface CreateTenants1Request {
    envId: string;
    orgId: string;
    newTenantEntity: Array<NewTenantEntity>;
}

export interface CreateThemeRequest {
    envId: string;
    orgId: string;
    newThemeEntity: NewThemeEntity;
}

export interface CreateTopApiRequest {
    envId: string;
    orgId: string;
    newTopApiEntity: NewTopApiEntity;
}

export interface DeleteApiHeaderRequest {
    id: string;
    envId: string;
    orgId: string;
}

export interface DeleteCategoryRequest {
    categoryId: string;
    envId: string;
    orgId: string;
}

export interface DeleteClientRegistrationProviderRequest {
    clientRegistrationProvider: string;
    envId: string;
    orgId: string;
}

export interface DeleteCustomUserFieldRequest {
    key: string;
    orgId: string;
}

export interface DeleteDashboardRequest {
    dashboardId: string;
    envId: string;
    orgId: string;
}

export interface DeleteDictionaryRequest {
    dictionary: string;
    envId: string;
    orgId: string;
}

export interface DeleteEntrypointRequest {
    entrypoint: string;
    orgId: string;
}

export interface DeleteEntrypoint1Request {
    entrypoint: string;
    envId: string;
    orgId: string;
}

export interface DeleteGroupRequest {
    group: string;
    envId: string;
    orgId: string;
}

export interface DeleteGroupInvitationRequest {
    invitation: string;
    group: string;
    envId: string;
    orgId: string;
}

export interface DeleteGroupMemberRequest {
    member: string;
    group: string;
    envId: string;
    orgId: string;
}

export interface DeleteIdentityProviderRequest {
    identityProvider: string;
    orgId: string;
}

export interface DeleteIdentityProvider1Request {
    identityProvider: string;
    envId: string;
    orgId: string;
}

export interface DeleteMetadataRequest {
    metadata: string;
    envId: string;
    orgId: string;
}

export interface DeleteNotificationSettingsRequest {
    notificationId: string;
    envId: string;
    orgId: string;
}

export interface DeleteQualityRuleRequest {
    id: string;
    envId: string;
    orgId: string;
}

export interface DeleteRoleRequest {
    scope: RoleScope;
    role: string;
    orgId: string;
}

export interface DeleteRole1Request {
    scope: RoleScope;
    role: string;
    envId: string;
    orgId: string;
}

export interface DeleteRoleForUserRequest {
    scope: RoleScope;
    role: string;
    userId: string;
    orgId: string;
}

export interface DeleteRoleForUser1Request {
    scope: RoleScope;
    role: string;
    userId: string;
    envId: string;
    orgId: string;
}

export interface DeleteTagRequest {
    tag: string;
    orgId: string;
}

export interface DeleteTag1Request {
    tag: string;
    envId: string;
    orgId: string;
}

export interface DeleteTenantRequest {
    tenant: string;
    orgId: string;
}

export interface DeleteTenant1Request {
    tenant: string;
    envId: string;
    orgId: string;
}

export interface DeleteThemeRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface DeleteTopApiRequest {
    topAPI: string;
    envId: string;
    orgId: string;
}

export interface DeployDictionaryRequest {
    dictionary: string;
    envId: string;
    orgId: string;
}

export interface DoLifecycleActionRequest {
    action: LifecycleAction;
    dictionary: string;
    envId: string;
    orgId: string;
}

export interface GetApiHeadersRequest {
    envId: string;
    orgId: string;
}

export interface GetCategoriesRequest {
    include?: Array<string>;
    envId: string;
    orgId: string;
}

export interface GetCategoryRequest {
    categoryId: string;
    envId: string;
    orgId: string;
}

export interface GetCategoryBackgroundRequest {
    categoryId: string;
    envId: string;
    orgId: string;
}

export interface GetCategoryPictureRequest {
    categoryId: string;
    envId: string;
    orgId: string;
}

export interface GetClientRegistrationProviderRequest {
    clientRegistrationProvider: string;
    envId: string;
    orgId: string;
}

export interface GetClientRegistrationProvidersRequest {
    envId: string;
    orgId: string;
}

export interface GetConfigurationHooksRequest {
    envId: string;
    orgId: string;
}

export interface GetConfigurationSchemaFormRequest {
    orgId: string;
}

export interface GetCustomUserFieldsRequest {
    orgId: string;
}

export interface GetDashboardRequest {
    dashboardId: string;
    envId: string;
    orgId: string;
}

export interface GetDashboardsRequest {
    referenceType?: GetDashboardsReferenceTypeEnum;
    envId: string;
    orgId: string;
}

export interface GetDictionariesRequest {
    envId: string;
    orgId: string;
}

export interface GetDictionaryRequest {
    dictionary: string;
    envId: string;
    orgId: string;
}

export interface GetEnabledApplicationTypesRequest {
    envId: string;
    orgId: string;
}

export interface GetEntrypointRequest {
    entrypoint: string;
    orgId: string;
}

export interface GetEntrypoint1Request {
    entrypoint: string;
    envId: string;
    orgId: string;
}

export interface GetEntrypointsRequest {
    orgId: string;
}

export interface GetEntrypoints1Request {
    envId: string;
    orgId: string;
}

export interface GetFaviconRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface GetGrammarRequest {
    envId: string;
    orgId: string;
}

export interface GetGroupRequest {
    group: string;
    envId: string;
    orgId: string;
}

export interface GetGroupInvitationsRequest {
    group: string;
    envId: string;
    orgId: string;
}

export interface GetGroupMembersRequest {
    group: string;
    envId: string;
    orgId: string;
}

export interface GetGroupMembers1Request {
    size?: number;
    page?: number;
    group: string;
    envId: string;
    orgId: string;
}

export interface GetGroupMembershipsRequest {
    group: string;
    type?: string;
    envId: string;
    orgId: string;
}

export interface GetGroupsRequest {
    envId: string;
    orgId: string;
}

export interface GetIdentityProviderRequest {
    identityProvider: string;
    orgId: string;
}

export interface GetIdentityProvider1Request {
    identityProvider: string;
    envId: string;
    orgId: string;
}

export interface GetIdentityProvidersRequest {
    orgId: string;
}

export interface GetIdentityProviders1Request {
    envId: string;
    orgId: string;
}

export interface GetLogoLightRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface GetMetadatasRequest {
    envId: string;
    orgId: string;
}

export interface GetNotificationTemplateRequest {
    notificationTemplateId: string;
    orgId: string;
}

export interface GetNotificationTemplatesRequest {
    scope?: string;
    hook?: string;
    orgId: string;
}

export interface GetPlansConfigurationRequest {
    envId: string;
    orgId: string;
}

export interface GetPlatformFlowSchemaFormRequest {
    orgId: string;
}

export interface GetPortalNotificationSettingsRequest {
    envId: string;
    orgId: string;
}

export interface GetPortalNotifiersRequest {
    envId: string;
    orgId: string;
}

export interface GetQualityRuleRequest {
    id: string;
    envId: string;
    orgId: string;
}

export interface GetQualityRulesRequest {
    envId: string;
    orgId: string;
}

export interface GetRoleRequest {
    scope: RoleScope;
    role: string;
    orgId: string;
}

export interface GetRole1Request {
    scope: RoleScope;
    role: string;
    envId: string;
    orgId: string;
}

export interface GetRoleScopesRequest {
    orgId: string;
}

export interface GetRoleScopes1Request {
    envId: string;
    orgId: string;
}

export interface GetRolesRequest {
    scope: RoleScope;
    orgId: string;
}

export interface GetRoles1Request {
    scope: RoleScope;
    envId: string;
    orgId: string;
}

export interface GetTagRequest {
    tag: string;
    orgId: string;
}

export interface GetTag1Request {
    tag: string;
    envId: string;
    orgId: string;
}

export interface GetTagsRequest {
    orgId: string;
}

export interface GetTags1Request {
    envId: string;
    orgId: string;
}

export interface GetTenantsRequest {
    orgId: string;
}

export interface GetTenants1Request {
    envId: string;
    orgId: string;
}

export interface GetThemeRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface GetThemeBackgroundRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface GetThemeLogoRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface GetTopApisRequest {
    envId: string;
    orgId: string;
}

export interface GetUsersPerRoleRequest {
    scope: RoleScope;
    role: string;
    orgId: string;
}

export interface GetUsersPerRole1Request {
    scope: RoleScope;
    role: string;
    envId: string;
    orgId: string;
}

export interface HasPoliciesRequest {
    orgId: string;
}

export interface ResetThemeRequest {
    themeId: string;
    envId: string;
    orgId: string;
}

export interface UndeployDictionaryRequest {
    dictionary: string;
    envId: string;
    orgId: string;
}

export interface UpdateApiHeaderRequest {
    id: string;
    envId: string;
    orgId: string;
    updateApiHeaderEntity: UpdateApiHeaderEntity;
}

export interface UpdateCategoriesRequest {
    envId: string;
    orgId: string;
    updateCategoryEntity: Array<UpdateCategoryEntity>;
}

export interface UpdateCategoryRequest {
    categoryId: string;
    envId: string;
    orgId: string;
    updateCategoryEntity: UpdateCategoryEntity;
}

export interface UpdateClientRegistrationProviderRequest {
    clientRegistrationProvider: string;
    envId: string;
    orgId: string;
    updateClientRegistrationProviderEntity: UpdateClientRegistrationProviderEntity;
}

export interface UpdateCustomUserFieldRequest {
    key: string;
    orgId: string;
    customUserFieldEntity?: CustomUserFieldEntity;
}

export interface UpdateDashboardRequest {
    dashboardId: string;
    envId: string;
    orgId: string;
    updateDashboardEntity: UpdateDashboardEntity;
}

export interface UpdateDictionaryRequest {
    dictionary: string;
    envId: string;
    orgId: string;
    updateDictionaryEntity: UpdateDictionaryEntity;
}

export interface UpdateEntrypointRequest {
    orgId: string;
    updateEntryPointEntity: UpdateEntryPointEntity;
}

export interface UpdateEntrypoint1Request {
    envId: string;
    orgId: string;
    updateEntryPointEntity: UpdateEntryPointEntity;
}

export interface UpdateGenericNotificationSettingsRequest {
    notificationId: string;
    envId: string;
    orgId: string;
    genericNotificationConfigEntity?: GenericNotificationConfigEntity;
}

export interface UpdateGroupRequest {
    group: string;
    envId: string;
    orgId: string;
    updateGroupEntity: UpdateGroupEntity;
}

export interface UpdateGroupInvitationRequest {
    invitation: string;
    group: string;
    envId: string;
    orgId: string;
    updateInvitationEntity: UpdateInvitationEntity;
}

export interface UpdateIdentityProviderRequest {
    identityProvider: string;
    orgId: string;
    updateIdentityProviderEntity: UpdateIdentityProviderEntity;
}

export interface UpdateIdentityProvider1Request {
    identityProvider: string;
    envId: string;
    orgId: string;
    updateIdentityProviderEntity: UpdateIdentityProviderEntity;
}

export interface UpdateMetadataRequest {
    envId: string;
    orgId: string;
    updateMetadataEntity: UpdateMetadataEntity;
}

export interface UpdateNotificationTemplateRequest {
    notificationTemplateId: string;
    orgId: string;
    notificationTemplateEntity?: NotificationTemplateEntity;
}

export interface UpdatePortalNotificationSettingsRequest {
    envId: string;
    orgId: string;
    portalNotificationConfigEntity?: PortalNotificationConfigEntity;
}

export interface UpdateQualityRuleRequest {
    id: string;
    envId: string;
    orgId: string;
    updateQualityRuleEntity: UpdateQualityRuleEntity;
}

export interface UpdateRoleRequest {
    scope: RoleScope;
    role: string;
    orgId: string;
    updateRoleEntity: UpdateRoleEntity;
}

export interface UpdateRole1Request {
    scope: RoleScope;
    role: string;
    envId: string;
    orgId: string;
    updateRoleEntity: UpdateRoleEntity;
}

export interface UpdateTagRequest {
    tag: string;
    orgId: string;
    updateTagEntity: UpdateTagEntity;
}

export interface UpdateTag1Request {
    tag: string;
    envId: string;
    orgId: string;
    updateTagEntity: UpdateTagEntity;
}

export interface UpdateTenantsRequest {
    orgId: string;
    updateTenantEntity: Array<UpdateTenantEntity>;
}

export interface UpdateTenants1Request {
    envId: string;
    orgId: string;
    updateTenantEntity: Array<UpdateTenantEntity>;
}

export interface UpdateThemeRequest {
    themeId: string;
    envId: string;
    orgId: string;
    updateThemeEntity: UpdateThemeEntity;
}

export interface UpdateTopApiRequest {
    envId: string;
    orgId: string;
    updateTopApiEntity: Array<UpdateTopApiEntity>;
}

/**
 * 
 */
export class ConfigurationApi extends runtime.BaseAPI {

    /**
     * Associate a group to existing APIs or Applications
     */
    async addGroupMemberRaw(requestParameters: AddGroupMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupEntity>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling addGroupMember.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling addGroupMember.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling addGroupMember.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/memberships`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupEntityFromJSON(jsonValue));
    }

    /**
     * Associate a group to existing APIs or Applications
     */
    async addGroupMember(requestParameters: AddGroupMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupEntity> {
        const response = await this.addGroupMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add or update a group member
     */
    async addOrUpdateGroupMemberRaw(requestParameters: AddOrUpdateGroupMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling addOrUpdateGroupMember.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling addOrUpdateGroupMember.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling addOrUpdateGroupMember.');
        }

        if (requestParameters.groupMembership === null || requestParameters.groupMembership === undefined) {
            throw new runtime.RequiredError('groupMembership','Required parameter requestParameters.groupMembership was null or undefined when calling addOrUpdateGroupMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/members`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.groupMembership.map(GroupMembershipToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or update a group member
     */
    async addOrUpdateGroupMember(requestParameters: AddOrUpdateGroupMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addOrUpdateGroupMemberRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] and MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Add or update a role for a user
     */
    async addRoleToUserRaw(requestParameters: AddRoleToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling addRoleToUser.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling addRoleToUser.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling addRoleToUser.');
        }

        if (requestParameters.roleMembership === null || requestParameters.roleMembership === undefined) {
            throw new runtime.RequiredError('roleMembership','Required parameter requestParameters.roleMembership was null or undefined when calling addRoleToUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}/users`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleMembershipToJSON(requestParameters.roleMembership),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] and MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Add or update a role for a user
     */
    async addRoleToUser(requestParameters: AddRoleToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addRoleToUserRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] and MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Add or update a role for a user
     */
    async addRoleToUser1Raw(requestParameters: AddRoleToUser1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling addRoleToUser1.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling addRoleToUser1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling addRoleToUser1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling addRoleToUser1.');
        }

        if (requestParameters.roleMembership === null || requestParameters.roleMembership === undefined) {
            throw new runtime.RequiredError('roleMembership','Required parameter requestParameters.roleMembership was null or undefined when calling addRoleToUser1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}/users`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleMembershipToJSON(requestParameters.roleMembership),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] and MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Add or update a role for a user
     */
    async addRoleToUser1(requestParameters: AddRoleToUser1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addRoleToUser1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the PORTAL_API_HEADER[CREATE] permission to use this service
     * Create an API header
     */
    async createApiHeaderRaw(requestParameters: CreateApiHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiHeaderEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApiHeader.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApiHeader.');
        }

        if (requestParameters.newApiHeaderEntity === null || requestParameters.newApiHeaderEntity === undefined) {
            throw new runtime.RequiredError('newApiHeaderEntity','Required parameter requestParameters.newApiHeaderEntity was null or undefined when calling createApiHeader.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/apiheaders`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewApiHeaderEntityToJSON(requestParameters.newApiHeaderEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiHeaderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the PORTAL_API_HEADER[CREATE] permission to use this service
     * Create an API header
     */
    async createApiHeader(requestParameters: CreateApiHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiHeaderEntity> {
        const response = await this.createApiHeaderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CATEGORY[CREATE] permission to use this service
     * Create a category
     */
    async createCategoryRaw(requestParameters: CreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createCategory.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createCategory.');
        }

        if (requestParameters.newCategoryEntity === null || requestParameters.newCategoryEntity === undefined) {
            throw new runtime.RequiredError('newCategoryEntity','Required parameter requestParameters.newCategoryEntity was null or undefined when calling createCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewCategoryEntityToJSON(requestParameters.newCategoryEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryEntityFromJSON(jsonValue));
    }

    /**
     * User must have the PORTAL_CATEGORY[CREATE] permission to use this service
     * Create a category
     */
    async createCategory(requestParameters: CreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryEntity> {
        const response = await this.createCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[CREATE] permission to use this service
     * Create a client registration provider
     */
    async createClientRegistrationProviderRaw(requestParameters: CreateClientRegistrationProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientRegistrationProviderEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createClientRegistrationProvider.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createClientRegistrationProvider.');
        }

        if (requestParameters.newClientRegistrationProviderEntity === null || requestParameters.newClientRegistrationProviderEntity === undefined) {
            throw new runtime.RequiredError('newClientRegistrationProviderEntity','Required parameter requestParameters.newClientRegistrationProviderEntity was null or undefined when calling createClientRegistrationProvider.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/applications/registration/providers`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewClientRegistrationProviderEntityToJSON(requestParameters.newClientRegistrationProviderEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientRegistrationProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[CREATE] permission to use this service
     * Create a client registration provider
     */
    async createClientRegistrationProvider(requestParameters: CreateClientRegistrationProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientRegistrationProviderEntity> {
        const response = await this.createClientRegistrationProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the CUSTOM_USER_FIELDS[CREATE] permission to use this service
     * Create a Custom User Field
     */
    async createCustomUserFieldRaw(requestParameters: CreateCustomUserFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomUserFieldEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createCustomUserField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/custom-user-fields`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomUserFieldEntityToJSON(requestParameters.customUserFieldEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomUserFieldEntityFromJSON(jsonValue));
    }

    /**
     * User must have the CUSTOM_USER_FIELDS[CREATE] permission to use this service
     * Create a Custom User Field
     */
    async createCustomUserField(requestParameters: CreateCustomUserFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomUserFieldEntity> {
        const response = await this.createCustomUserFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[CREATE] permission to use this service
     * Create a platform dashboard
     */
    async createDashboardRaw(requestParameters: CreateDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createDashboard.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createDashboard.');
        }

        if (requestParameters.newDashboardEntity === null || requestParameters.newDashboardEntity === undefined) {
            throw new runtime.RequiredError('newDashboardEntity','Required parameter requestParameters.newDashboardEntity was null or undefined when calling createDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dashboards`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewDashboardEntityToJSON(requestParameters.newDashboardEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[CREATE] permission to use this service
     * Create a platform dashboard
     */
    async createDashboard(requestParameters: CreateDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardEntity> {
        const response = await this.createDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the DICTIONARY[CREATE] permission to use this service
     * Create a dictionary
     */
    async createDictionaryRaw(requestParameters: CreateDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DictionaryEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createDictionary.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createDictionary.');
        }

        if (requestParameters.newDictionaryEntity === null || requestParameters.newDictionaryEntity === undefined) {
            throw new runtime.RequiredError('newDictionaryEntity','Required parameter requestParameters.newDictionaryEntity was null or undefined when calling createDictionary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dictionaries`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewDictionaryEntityToJSON(requestParameters.newDictionaryEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DictionaryEntityFromJSON(jsonValue));
    }

    /**
     * User must have the DICTIONARY[CREATE] permission to use this service
     * Create a dictionary
     */
    async createDictionary(requestParameters: CreateDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DictionaryEntity> {
        const response = await this.createDictionaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[CREATE] permission to use this service
     * Create a platform entrypoint
     */
    async createEntrypointRaw(requestParameters: CreateEntrypointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntrypointEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createEntrypoint.');
        }

        if (requestParameters.newEntryPointEntity === null || requestParameters.newEntryPointEntity === undefined) {
            throw new runtime.RequiredError('newEntryPointEntity','Required parameter requestParameters.newEntryPointEntity was null or undefined when calling createEntrypoint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/entrypoints`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewEntryPointEntityToJSON(requestParameters.newEntryPointEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[CREATE] permission to use this service
     * Create a platform entrypoint
     */
    async createEntrypoint(requestParameters: CreateEntrypointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntrypointEntity> {
        const response = await this.createEntrypointRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[CREATE] permission to use this service
     * Create a platform entrypoint
     */
    async createEntrypoint1Raw(requestParameters: CreateEntrypoint1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntrypointEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createEntrypoint1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createEntrypoint1.');
        }

        if (requestParameters.newEntryPointEntity === null || requestParameters.newEntryPointEntity === undefined) {
            throw new runtime.RequiredError('newEntryPointEntity','Required parameter requestParameters.newEntryPointEntity was null or undefined when calling createEntrypoint1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/entrypoints`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewEntryPointEntityToJSON(requestParameters.newEntryPointEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[CREATE] permission to use this service
     * Create a platform entrypoint
     */
    async createEntrypoint1(requestParameters: CreateEntrypoint1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntrypointEntity> {
        const response = await this.createEntrypoint1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new group.
     * Create group
     */
    async createGroupRaw(requestParameters: CreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createGroup.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createGroup.');
        }

        if (requestParameters.newGroupEntity === null || requestParameters.newGroupEntity === undefined) {
            throw new runtime.RequiredError('newGroupEntity','Required parameter requestParameters.newGroupEntity was null or undefined when calling createGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewGroupEntityToJSON(requestParameters.newGroupEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupEntityFromJSON(jsonValue));
    }

    /**
     * Create a new group.
     * Create group
     */
    async createGroup(requestParameters: CreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupEntity> {
        const response = await this.createGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the GROUP_INVITATION[CREATE] permission to use this service
     * Create an invitation to join a group
     */
    async createGroupInvitationRaw(requestParameters: CreateGroupInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvitationEntity>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling createGroupInvitation.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createGroupInvitation.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createGroupInvitation.');
        }

        if (requestParameters.newInvitationEntity === null || requestParameters.newInvitationEntity === undefined) {
            throw new runtime.RequiredError('newInvitationEntity','Required parameter requestParameters.newInvitationEntity was null or undefined when calling createGroupInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/invitations`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewInvitationEntityToJSON(requestParameters.newInvitationEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationEntityFromJSON(jsonValue));
    }

    /**
     * User must have the GROUP_INVITATION[CREATE] permission to use this service
     * Create an invitation to join a group
     */
    async createGroupInvitation(requestParameters: CreateGroupInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvitationEntity> {
        const response = await this.createGroupInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[CREATE] permission to use this service
     * Create an identity provider
     */
    async createIdentityProviderRaw(requestParameters: CreateIdentityProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProviderEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createIdentityProvider.');
        }

        if (requestParameters.newIdentityProviderEntity === null || requestParameters.newIdentityProviderEntity === undefined) {
            throw new runtime.RequiredError('newIdentityProviderEntity','Required parameter requestParameters.newIdentityProviderEntity was null or undefined when calling createIdentityProvider.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/identities`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewIdentityProviderEntityToJSON(requestParameters.newIdentityProviderEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[CREATE] permission to use this service
     * Create an identity provider
     */
    async createIdentityProvider(requestParameters: CreateIdentityProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProviderEntity> {
        const response = await this.createIdentityProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[CREATE] permission to use this service
     * Create an identity provider
     */
    async createIdentityProvider1Raw(requestParameters: CreateIdentityProvider1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProviderEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createIdentityProvider1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createIdentityProvider1.');
        }

        if (requestParameters.newIdentityProviderEntity === null || requestParameters.newIdentityProviderEntity === undefined) {
            throw new runtime.RequiredError('newIdentityProviderEntity','Required parameter requestParameters.newIdentityProviderEntity was null or undefined when calling createIdentityProvider1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/identities`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewIdentityProviderEntityToJSON(requestParameters.newIdentityProviderEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[CREATE] permission to use this service
     * Create an identity provider
     */
    async createIdentityProvider1(requestParameters: CreateIdentityProvider1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProviderEntity> {
        const response = await this.createIdentityProvider1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_METADATA[CREATE] permission to use this service
     * Create a platform metadata
     */
    async createMetadataRaw(requestParameters: CreateMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createMetadata.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createMetadata.');
        }

        if (requestParameters.newMetadataEntity === null || requestParameters.newMetadataEntity === undefined) {
            throw new runtime.RequiredError('newMetadataEntity','Required parameter requestParameters.newMetadataEntity was null or undefined when calling createMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/metadata`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewMetadataEntityToJSON(requestParameters.newMetadataEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataEntityFromJSON(jsonValue));
    }

    /**
     * User must have the PORTAL_METADATA[CREATE] permission to use this service
     * Create a platform metadata
     */
    async createMetadata(requestParameters: CreateMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataEntity> {
        const response = await this.createMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the NOTIFICATION_TEMPLATES[CREATE] permission to use this service
     * Create a notification template
     */
    async createNotificationTemplateRaw(requestParameters: CreateNotificationTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTemplateEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createNotificationTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/notification-templates`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationTemplateEntityToJSON(requestParameters.notificationTemplateEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTemplateEntityFromJSON(jsonValue));
    }

    /**
     * User must have the NOTIFICATION_TEMPLATES[CREATE] permission to use this service
     * Create a notification template
     */
    async createNotificationTemplate(requestParameters: CreateNotificationTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTemplateEntity> {
        const response = await this.createNotificationTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create notification settings
     */
    async createPortalNotificationSettingRaw(requestParameters: CreatePortalNotificationSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createPortalNotificationSetting.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createPortalNotificationSetting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/notificationsettings`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenericNotificationConfigEntityToJSON(requestParameters.genericNotificationConfigEntity),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Create notification settings
     */
    async createPortalNotificationSetting(requestParameters: CreatePortalNotificationSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createPortalNotificationSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_QUALITY_RULE[CREATE] permission to use this service
     * Create a quality rule
     */
    async createQualityRuleRaw(requestParameters: CreateQualityRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QualityRuleEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createQualityRule.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createQualityRule.');
        }

        if (requestParameters.newQualityRuleEntity === null || requestParameters.newQualityRuleEntity === undefined) {
            throw new runtime.RequiredError('newQualityRuleEntity','Required parameter requestParameters.newQualityRuleEntity was null or undefined when calling createQualityRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/quality-rules`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewQualityRuleEntityToJSON(requestParameters.newQualityRuleEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QualityRuleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_QUALITY_RULE[CREATE] permission to use this service
     * Create a quality rule
     */
    async createQualityRule(requestParameters: CreateQualityRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QualityRuleEntity> {
        const response = await this.createQualityRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] permission to use this service
     * Create a role
     */
    async createRoleRaw(requestParameters: CreateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling createRole.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createRole.');
        }

        if (requestParameters.newRoleEntity === null || requestParameters.newRoleEntity === undefined) {
            throw new runtime.RequiredError('newRoleEntity','Required parameter requestParameters.newRoleEntity was null or undefined when calling createRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRoleEntityToJSON(requestParameters.newRoleEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] permission to use this service
     * Create a role
     */
    async createRole(requestParameters: CreateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleEntity> {
        const response = await this.createRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] permission to use this service
     * Create a role
     */
    async createRole1Raw(requestParameters: CreateRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling createRole1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createRole1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createRole1.');
        }

        if (requestParameters.newRoleEntity === null || requestParameters.newRoleEntity === undefined) {
            throw new runtime.RequiredError('newRoleEntity','Required parameter requestParameters.newRoleEntity was null or undefined when calling createRole1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRoleEntityToJSON(requestParameters.newRoleEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[CREATE] permission to use this service
     * Create a role
     */
    async createRole1(requestParameters: CreateRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleEntity> {
        const response = await this.createRole1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TAG[CREATE] permission to use this service
     * Create a sharding tag
     */
    async createTagRaw(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createTag.');
        }

        if (requestParameters.newTagEntity === null || requestParameters.newTagEntity === undefined) {
            throw new runtime.RequiredError('newTagEntity','Required parameter requestParameters.newTagEntity was null or undefined when calling createTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tags`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewTagEntityToJSON(requestParameters.newTagEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_TAG[CREATE] permission to use this service
     * Create a sharding tag
     */
    async createTag(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity> {
        const response = await this.createTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TAG[CREATE] permission to use this service
     * Create a sharding tag
     */
    async createTag1Raw(requestParameters: CreateTag1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createTag1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createTag1.');
        }

        if (requestParameters.newTagEntity === null || requestParameters.newTagEntity === undefined) {
            throw new runtime.RequiredError('newTagEntity','Required parameter requestParameters.newTagEntity was null or undefined when calling createTag1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tags`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewTagEntityToJSON(requestParameters.newTagEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_TAG[CREATE] permission to use this service
     * Create a sharding tag
     */
    async createTag1(requestParameters: CreateTag1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity> {
        const response = await this.createTag1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TENANT[CREATE] permission to use this service
     * Create a tenant
     */
    async createTenantsRaw(requestParameters: CreateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createTenants.');
        }

        if (requestParameters.newTenantEntity === null || requestParameters.newTenantEntity === undefined) {
            throw new runtime.RequiredError('newTenantEntity','Required parameter requestParameters.newTenantEntity was null or undefined when calling createTenants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tenants`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.newTenantEntity.map(NewTenantEntityToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_TENANT[CREATE] permission to use this service
     * Create a tenant
     */
    async createTenants(requestParameters: CreateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.createTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TENANT[CREATE] permission to use this service
     * Create a tenant
     */
    async createTenants1Raw(requestParameters: CreateTenants1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createTenants1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createTenants1.');
        }

        if (requestParameters.newTenantEntity === null || requestParameters.newTenantEntity === undefined) {
            throw new runtime.RequiredError('newTenantEntity','Required parameter requestParameters.newTenantEntity was null or undefined when calling createTenants1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tenants`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.newTenantEntity.map(NewTenantEntityToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_TENANT[CREATE] permission to use this service
     * Create a tenant
     */
    async createTenants1(requestParameters: CreateTenants1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.createTenants1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createThemeRaw(requestParameters: CreateThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThemeEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createTheme.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createTheme.');
        }

        if (requestParameters.newThemeEntity === null || requestParameters.newThemeEntity === undefined) {
            throw new runtime.RequiredError('newThemeEntity','Required parameter requestParameters.newThemeEntity was null or undefined when calling createTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewThemeEntityToJSON(requestParameters.newThemeEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeEntityFromJSON(jsonValue));
    }

    /**
     */
    async createTheme(requestParameters: CreateThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThemeEntity> {
        const response = await this.createThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_TOP_APIS[CREATE] permission to use this service
     * Create a top API
     */
    async createTopApiRaw(requestParameters: CreateTopApiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TopApiEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createTopApi.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createTopApi.');
        }

        if (requestParameters.newTopApiEntity === null || requestParameters.newTopApiEntity === undefined) {
            throw new runtime.RequiredError('newTopApiEntity','Required parameter requestParameters.newTopApiEntity was null or undefined when calling createTopApi.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/top-apis`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewTopApiEntityToJSON(requestParameters.newTopApiEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TopApiEntityFromJSON));
    }

    /**
     * User must have the PORTAL_TOP_APIS[CREATE] permission to use this service
     * Create a top API
     */
    async createTopApi(requestParameters: CreateTopApiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TopApiEntity>> {
        const response = await this.createTopApiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_API_HEADER[DELETE] permission to use this service
     * Delete an API header
     */
    async deleteApiHeaderRaw(requestParameters: DeleteApiHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteApiHeader.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApiHeader.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApiHeader.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/apiheaders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the PORTAL_API_HEADER[DELETE] permission to use this service
     * Delete an API header
     */
    async deleteApiHeader(requestParameters: DeleteApiHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiHeaderRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the PORTAL_CATEGORY[DELETE] permission to use this service
     * Delete the category
     */
    async deleteCategoryRaw(requestParameters: DeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling deleteCategory.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteCategory.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the PORTAL_CATEGORY[DELETE] permission to use this service
     * Delete the category
     */
    async deleteCategory(requestParameters: DeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[DELETE] permission to use this service
     * Delete a client registration provider
     */
    async deleteClientRegistrationProviderRaw(requestParameters: DeleteClientRegistrationProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientRegistrationProvider === null || requestParameters.clientRegistrationProvider === undefined) {
            throw new runtime.RequiredError('clientRegistrationProvider','Required parameter requestParameters.clientRegistrationProvider was null or undefined when calling deleteClientRegistrationProvider.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteClientRegistrationProvider.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteClientRegistrationProvider.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/applications/registration/providers/{clientRegistrationProvider}`.replace(`{${"clientRegistrationProvider"}}`, encodeURIComponent(String(requestParameters.clientRegistrationProvider))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[DELETE] permission to use this service
     * Delete a client registration provider
     */
    async deleteClientRegistrationProvider(requestParameters: DeleteClientRegistrationProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteClientRegistrationProviderRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the CUSTOM_USER_FIELDS[DELETE] permission to use this service
     * Delete a Custom User Field
     */
    async deleteCustomUserFieldRaw(requestParameters: DeleteCustomUserFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteCustomUserField.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteCustomUserField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/custom-user-fields/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the CUSTOM_USER_FIELDS[DELETE] permission to use this service
     * Delete a Custom User Field
     */
    async deleteCustomUserField(requestParameters: DeleteCustomUserFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCustomUserFieldRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[DELETE] permission to use this service
     * Delete a platform dashboard
     */
    async deleteDashboardRaw(requestParameters: DeleteDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling deleteDashboard.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteDashboard.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dashboards/{dashboardId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[DELETE] permission to use this service
     * Delete a platform dashboard
     */
    async deleteDashboard(requestParameters: DeleteDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDashboardRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the DICTIONARY[DELETE] permission to use this service
     * Delete a dictionary
     */
    async deleteDictionaryRaw(requestParameters: DeleteDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.dictionary === null || requestParameters.dictionary === undefined) {
            throw new runtime.RequiredError('dictionary','Required parameter requestParameters.dictionary was null or undefined when calling deleteDictionary.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteDictionary.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteDictionary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dictionaries/{dictionary}`.replace(`{${"dictionary"}}`, encodeURIComponent(String(requestParameters.dictionary))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the DICTIONARY[DELETE] permission to use this service
     * Delete a dictionary
     */
    async deleteDictionary(requestParameters: DeleteDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDictionaryRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[DELETE] permission to use this service
     * Delete a platform entrypoint
     */
    async deleteEntrypointRaw(requestParameters: DeleteEntrypointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling deleteEntrypoint.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteEntrypoint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/entrypoints/{entrypoint}`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[DELETE] permission to use this service
     * Delete a platform entrypoint
     */
    async deleteEntrypoint(requestParameters: DeleteEntrypointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEntrypointRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[DELETE] permission to use this service
     * Delete a platform entrypoint
     */
    async deleteEntrypoint1Raw(requestParameters: DeleteEntrypoint1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling deleteEntrypoint1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteEntrypoint1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteEntrypoint1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/entrypoints/{entrypoint}`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[DELETE] permission to use this service
     * Delete a platform entrypoint
     */
    async deleteEntrypoint1(requestParameters: DeleteEntrypoint1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEntrypoint1Raw(requestParameters, initOverrides);
    }

    /**
     * Delete an existing group
     */
    async deleteGroupRaw(requestParameters: DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling deleteGroup.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteGroup.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing group
     */
    async deleteGroup(requestParameters: DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGroupRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the GROUP_INVITATION[DELETE] permission to use this service
     * Delete an invitation to join a group
     */
    async deleteGroupInvitationRaw(requestParameters: DeleteGroupInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.invitation === null || requestParameters.invitation === undefined) {
            throw new runtime.RequiredError('invitation','Required parameter requestParameters.invitation was null or undefined when calling deleteGroupInvitation.');
        }

        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling deleteGroupInvitation.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteGroupInvitation.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteGroupInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/invitations/{invitation}`.replace(`{${"invitation"}}`, encodeURIComponent(String(requestParameters.invitation))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the GROUP_INVITATION[DELETE] permission to use this service
     * Delete an invitation to join a group
     */
    async deleteGroupInvitation(requestParameters: DeleteGroupInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGroupInvitationRaw(requestParameters, initOverrides);
    }

    /**
     * Remove a group member
     */
    async deleteGroupMemberRaw(requestParameters: DeleteGroupMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.member === null || requestParameters.member === undefined) {
            throw new runtime.RequiredError('member','Required parameter requestParameters.member was null or undefined when calling deleteGroupMember.');
        }

        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling deleteGroupMember.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteGroupMember.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteGroupMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/members/{member}`.replace(`{${"member"}}`, encodeURIComponent(String(requestParameters.member))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a group member
     */
    async deleteGroupMember(requestParameters: DeleteGroupMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGroupMemberRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[DELETE] permission to use this service
     * Delete an identity provider
     */
    async deleteIdentityProviderRaw(requestParameters: DeleteIdentityProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.identityProvider === null || requestParameters.identityProvider === undefined) {
            throw new runtime.RequiredError('identityProvider','Required parameter requestParameters.identityProvider was null or undefined when calling deleteIdentityProvider.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteIdentityProvider.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/identities/{identityProvider}`.replace(`{${"identityProvider"}}`, encodeURIComponent(String(requestParameters.identityProvider))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[DELETE] permission to use this service
     * Delete an identity provider
     */
    async deleteIdentityProvider(requestParameters: DeleteIdentityProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIdentityProviderRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[DELETE] permission to use this service
     * Delete an identity provider
     */
    async deleteIdentityProvider1Raw(requestParameters: DeleteIdentityProvider1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.identityProvider === null || requestParameters.identityProvider === undefined) {
            throw new runtime.RequiredError('identityProvider','Required parameter requestParameters.identityProvider was null or undefined when calling deleteIdentityProvider1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteIdentityProvider1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteIdentityProvider1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/identities/{identityProvider}`.replace(`{${"identityProvider"}}`, encodeURIComponent(String(requestParameters.identityProvider))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[DELETE] permission to use this service
     * Delete an identity provider
     */
    async deleteIdentityProvider1(requestParameters: DeleteIdentityProvider1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIdentityProvider1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the PORTAL_METADATA[DELETE] permission to use this service
     * Delete a platform metadata
     */
    async deleteMetadataRaw(requestParameters: DeleteMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.metadata === null || requestParameters.metadata === undefined) {
            throw new runtime.RequiredError('metadata','Required parameter requestParameters.metadata was null or undefined when calling deleteMetadata.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteMetadata.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/metadata/{metadata}`.replace(`{${"metadata"}}`, encodeURIComponent(String(requestParameters.metadata))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the PORTAL_METADATA[DELETE] permission to use this service
     * Delete a platform metadata
     */
    async deleteMetadata(requestParameters: DeleteMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMetadataRaw(requestParameters, initOverrides);
    }

    /**
     * Delete notification settings
     */
    async deleteNotificationSettingsRaw(requestParameters: DeleteNotificationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling deleteNotificationSettings.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteNotificationSettings.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteNotificationSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/notificationsettings/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete notification settings
     */
    async deleteNotificationSettings(requestParameters: DeleteNotificationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteNotificationSettingsRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_QUALITY_RULE[READ] permission to use this service
     * Delete a quality rule
     */
    async deleteQualityRuleRaw(requestParameters: DeleteQualityRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteQualityRule.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteQualityRule.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteQualityRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/quality-rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_QUALITY_RULE[READ] permission to use this service
     * Delete a quality rule
     */
    async deleteQualityRule(requestParameters: DeleteQualityRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteQualityRuleRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete a role
     */
    async deleteRoleRaw(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling deleteRole.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling deleteRole.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete a role
     */
    async deleteRole(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleEntity> {
        const response = await this.deleteRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete a role
     */
    async deleteRole1Raw(requestParameters: DeleteRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling deleteRole1.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling deleteRole1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteRole1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteRole1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete a role
     */
    async deleteRole1(requestParameters: DeleteRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleEntity> {
        const response = await this.deleteRole1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete the role for a given user
     */
    async deleteRoleForUserRaw(requestParameters: DeleteRoleForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling deleteRoleForUser.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling deleteRoleForUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteRoleForUser.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteRoleForUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}/users/{userId}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete the role for a given user
     */
    async deleteRoleForUser(requestParameters: DeleteRoleForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRoleForUserRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete the role for a given user
     */
    async deleteRoleForUser1Raw(requestParameters: DeleteRoleForUser1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling deleteRoleForUser1.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling deleteRoleForUser1.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteRoleForUser1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteRoleForUser1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteRoleForUser1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}/users/{userId}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ROLE[DELETE] permission to use this service
     * Delete the role for a given user
     */
    async deleteRoleForUser1(requestParameters: DeleteRoleForUser1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRoleForUser1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_TAG[DELETE] permission to use this service
     * Delete an existing sharding tag
     */
    async deleteTagRaw(requestParameters: DeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling deleteTag.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tags/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_TAG[DELETE] permission to use this service
     * Delete an existing sharding tag
     */
    async deleteTag(requestParameters: DeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTagRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_TAG[DELETE] permission to use this service
     * Delete an existing sharding tag
     */
    async deleteTag1Raw(requestParameters: DeleteTag1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling deleteTag1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteTag1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteTag1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tags/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_TAG[DELETE] permission to use this service
     * Delete an existing sharding tag
     */
    async deleteTag1(requestParameters: DeleteTag1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTag1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_TENANT[DELETE] permission to use this service
     * Delete a tenant
     */
    async deleteTenantRaw(requestParameters: DeleteTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteTenant.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tenants/{tenant}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_TENANT[DELETE] permission to use this service
     * Delete a tenant
     */
    async deleteTenant(requestParameters: DeleteTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.deleteTenantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TENANT[DELETE] permission to use this service
     * Delete a tenant
     */
    async deleteTenant1Raw(requestParameters: DeleteTenant1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteTenant1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteTenant1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteTenant1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tenants/{tenant}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_TENANT[DELETE] permission to use this service
     * Delete a tenant
     */
    async deleteTenant1(requestParameters: DeleteTenant1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.deleteTenant1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteThemeRaw(requestParameters: DeleteThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling deleteTheme.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteTheme.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTheme(requestParameters: DeleteThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteThemeRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the PORTAL_TOP_APIS[DELETE] permission to use this service
     * Delete an existing top API
     */
    async deleteTopApiRaw(requestParameters: DeleteTopApiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.topAPI === null || requestParameters.topAPI === undefined) {
            throw new runtime.RequiredError('topAPI','Required parameter requestParameters.topAPI was null or undefined when calling deleteTopApi.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteTopApi.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteTopApi.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/top-apis/{topAPI}`.replace(`{${"topAPI"}}`, encodeURIComponent(String(requestParameters.topAPI))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the PORTAL_TOP_APIS[DELETE] permission to use this service
     * Delete an existing top API
     */
    async deleteTopApi(requestParameters: DeleteTopApiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTopApiRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the DICTIONARY[UPDATE] permission to use this service
     * Deploy dictionary to API gateway
     */
    async deployDictionaryRaw(requestParameters: DeployDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DictionaryEntity>> {
        if (requestParameters.dictionary === null || requestParameters.dictionary === undefined) {
            throw new runtime.RequiredError('dictionary','Required parameter requestParameters.dictionary was null or undefined when calling deployDictionary.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deployDictionary.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deployDictionary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dictionaries/{dictionary}/_deploy`.replace(`{${"dictionary"}}`, encodeURIComponent(String(requestParameters.dictionary))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DictionaryEntityFromJSON(jsonValue));
    }

    /**
     * User must have the DICTIONARY[UPDATE] permission to use this service
     * Deploy dictionary to API gateway
     */
    async deployDictionary(requestParameters: DeployDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DictionaryEntity> {
        const response = await this.deployDictionaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the DICTIONARY[LIFECYCLE] permission to use this service
     * Manage the dictionary\'s lifecycle
     */
    async doLifecycleActionRaw(requestParameters: DoLifecycleActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DictionaryEntity>> {
        if (requestParameters.action === null || requestParameters.action === undefined) {
            throw new runtime.RequiredError('action','Required parameter requestParameters.action was null or undefined when calling doLifecycleAction.');
        }

        if (requestParameters.dictionary === null || requestParameters.dictionary === undefined) {
            throw new runtime.RequiredError('dictionary','Required parameter requestParameters.dictionary was null or undefined when calling doLifecycleAction.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling doLifecycleAction.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling doLifecycleAction.');
        }

        const queryParameters: any = {};

        if (requestParameters.action !== undefined) {
            queryParameters['action'] = requestParameters.action;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dictionaries/{dictionary}`.replace(`{${"dictionary"}}`, encodeURIComponent(String(requestParameters.dictionary))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DictionaryEntityFromJSON(jsonValue));
    }

    /**
     * User must have the DICTIONARY[LIFECYCLE] permission to use this service
     * Manage the dictionary\'s lifecycle
     */
    async doLifecycleAction(requestParameters: DoLifecycleActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DictionaryEntity> {
        const response = await this.doLifecycleActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List API headers
     */
    async getApiHeadersRaw(requestParameters: GetApiHeadersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiHeaderEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiHeaders.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiHeaders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/apiheaders`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiHeaderEntityFromJSON));
    }

    /**
     * List API headers
     */
    async getApiHeaders(requestParameters: GetApiHeadersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiHeaderEntity>> {
        const response = await this.getApiHeadersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of categories
     */
    async getCategoriesRaw(requestParameters: GetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CategoryEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getCategories.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getCategories.');
        }

        const queryParameters: any = {};

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryEntityFromJSON));
    }

    /**
     * Retrieve list of categories
     */
    async getCategories(requestParameters: GetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CategoryEntity>> {
        const response = await this.getCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CATEGORY[READ] permission to use this service
     * Get the category
     */
    async getCategoryRaw(requestParameters: GetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryEntity>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategory.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getCategory.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryEntityFromJSON(jsonValue));
    }

    /**
     * User must have the PORTAL_CATEGORY[READ] permission to use this service
     * Get the category
     */
    async getCategory(requestParameters: GetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryEntity> {
        const response = await this.getCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * Get the Category\'s background
     */
    async getCategoryBackgroundRaw(requestParameters: GetCategoryBackgroundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategoryBackground.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getCategoryBackground.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getCategoryBackground.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories/{categoryId}/background`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * User must have the READ permission to use this service
     * Get the Category\'s background
     */
    async getCategoryBackground(requestParameters: GetCategoryBackgroundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getCategoryBackgroundRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CATEGORY[READ] permission to use this service
     * Get the category\'s picture
     */
    async getCategoryPictureRaw(requestParameters: GetCategoryPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategoryPicture.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getCategoryPicture.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getCategoryPicture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories/{categoryId}/picture`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * User must have the PORTAL_CATEGORY[READ] permission to use this service
     * Get the category\'s picture
     */
    async getCategoryPicture(requestParameters: GetCategoryPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getCategoryPictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[READ] permission to use this service
     * Get a client registration provider
     */
    async getClientRegistrationProviderRaw(requestParameters: GetClientRegistrationProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientRegistrationProviderEntity>> {
        if (requestParameters.clientRegistrationProvider === null || requestParameters.clientRegistrationProvider === undefined) {
            throw new runtime.RequiredError('clientRegistrationProvider','Required parameter requestParameters.clientRegistrationProvider was null or undefined when calling getClientRegistrationProvider.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getClientRegistrationProvider.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getClientRegistrationProvider.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/applications/registration/providers/{clientRegistrationProvider}`.replace(`{${"clientRegistrationProvider"}}`, encodeURIComponent(String(requestParameters.clientRegistrationProvider))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientRegistrationProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[READ] permission to use this service
     * Get a client registration provider
     */
    async getClientRegistrationProvider(requestParameters: GetClientRegistrationProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientRegistrationProviderEntity> {
        const response = await this.getClientRegistrationProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[READ] permission to use this service
     * Get the list of client registration providers
     */
    async getClientRegistrationProvidersRaw(requestParameters: GetClientRegistrationProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientRegistrationProviderListItem>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getClientRegistrationProviders.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getClientRegistrationProviders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/applications/registration/providers`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientRegistrationProviderListItemFromJSON));
    }

    /**
     * User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[READ] permission to use this service
     * Get the list of client registration providers
     */
    async getClientRegistrationProviders(requestParameters: GetClientRegistrationProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientRegistrationProviderListItem>> {
        const response = await this.getClientRegistrationProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of available hooks
     */
    async getConfigurationHooksRaw(requestParameters: GetConfigurationHooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Hook>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getConfigurationHooks.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getConfigurationHooks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/hooks`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HookFromJSON));
    }

    /**
     * Get the list of available hooks
     */
    async getConfigurationHooks(requestParameters: GetConfigurationHooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Hook>> {
        const response = await this.getConfigurationHooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getConfigurationSchemaFormRaw(requestParameters: GetConfigurationSchemaFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getConfigurationSchemaForm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/flows/configuration-schema`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getConfigurationSchemaForm(requestParameters: GetConfigurationSchemaFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getConfigurationSchemaFormRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the CUSTOM_USER_FIELDS[READ] permission to use this service
     * List All Custom User Fields
     */
    async getCustomUserFieldsRaw(requestParameters: GetCustomUserFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomUserFieldEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getCustomUserFields.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/custom-user-fields`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomUserFieldEntityFromJSON));
    }

    /**
     * User must have the CUSTOM_USER_FIELDS[READ] permission to use this service
     * List All Custom User Fields
     */
    async getCustomUserFields(requestParameters: GetCustomUserFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomUserFieldEntity>> {
        const response = await this.getCustomUserFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[READ] permission to use this service
     * Retrieve a platform dashboard
     */
    async getDashboardRaw(requestParameters: GetDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardEntity>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling getDashboard.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getDashboard.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dashboards/{dashboardId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[READ] permission to use this service
     * Retrieve a platform dashboard
     */
    async getDashboard(requestParameters: GetDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardEntity> {
        const response = await this.getDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the list of platform dashboards
     */
    async getDashboardsRaw(requestParameters: GetDashboardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DashboardEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getDashboards.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getDashboards.');
        }

        const queryParameters: any = {};

        if (requestParameters.referenceType !== undefined) {
            queryParameters['reference_type'] = requestParameters.referenceType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dashboards`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DashboardEntityFromJSON));
    }

    /**
     * Retrieve the list of platform dashboards
     */
    async getDashboards(requestParameters: GetDashboardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DashboardEntity>> {
        const response = await this.getDashboardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the DICTIONARY[READ] permission to use this service
     * Get the list of global dictionaries
     */
    async getDictionariesRaw(requestParameters: GetDictionariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DictionaryListItem>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getDictionaries.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getDictionaries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dictionaries`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DictionaryListItemFromJSON));
    }

    /**
     * User must have the DICTIONARY[READ] permission to use this service
     * Get the list of global dictionaries
     */
    async getDictionaries(requestParameters: GetDictionariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DictionaryListItem>> {
        const response = await this.getDictionariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the DICTIONARY[READ] permission to use this service
     * Get a dictionary
     */
    async getDictionaryRaw(requestParameters: GetDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DictionaryEntity>> {
        if (requestParameters.dictionary === null || requestParameters.dictionary === undefined) {
            throw new runtime.RequiredError('dictionary','Required parameter requestParameters.dictionary was null or undefined when calling getDictionary.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getDictionary.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getDictionary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dictionaries/{dictionary}`.replace(`{${"dictionary"}}`, encodeURIComponent(String(requestParameters.dictionary))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DictionaryEntityFromJSON(jsonValue));
    }

    /**
     * User must have the DICTIONARY[READ] permission to use this service
     * Get a dictionary
     */
    async getDictionary(requestParameters: GetDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DictionaryEntity> {
        const response = await this.getDictionaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of enabled application types
     */
    async getEnabledApplicationTypesRaw(requestParameters: GetEnabledApplicationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEnabledApplicationTypes.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEnabledApplicationTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/applications/types`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the list of enabled application types
     */
    async getEnabledApplicationTypes(requestParameters: GetEnabledApplicationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getEnabledApplicationTypesRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * Get a platform entrypoints
     */
    async getEntrypointRaw(requestParameters: GetEntrypointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntrypointEntity>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling getEntrypoint.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypoint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/entrypoints/{entrypoint}`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * Get a platform entrypoints
     */
    async getEntrypoint(requestParameters: GetEntrypointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntrypointEntity> {
        const response = await this.getEntrypointRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * Get a platform entrypoints
     */
    async getEntrypoint1Raw(requestParameters: GetEntrypoint1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntrypointEntity>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling getEntrypoint1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEntrypoint1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypoint1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/entrypoints/{entrypoint}`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * Get a platform entrypoints
     */
    async getEntrypoint1(requestParameters: GetEntrypoint1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntrypointEntity> {
        const response = await this.getEntrypoint1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * List the platform entrypoints
     */
    async getEntrypointsRaw(requestParameters: GetEntrypointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EntrypointEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypoints.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/entrypoints`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntrypointEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * List the platform entrypoints
     */
    async getEntrypoints(requestParameters: GetEntrypointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EntrypointEntity>> {
        const response = await this.getEntrypointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * List the platform entrypoints
     */
    async getEntrypoints1Raw(requestParameters: GetEntrypoints1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EntrypointEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEntrypoints1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypoints1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/entrypoints`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntrypointEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[READ] permission to use this service
     * List the platform entrypoints
     */
    async getEntrypoints1(requestParameters: GetEntrypoints1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EntrypointEntity>> {
        const response = await this.getEntrypoints1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFaviconRaw(requestParameters: GetFaviconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling getFavicon.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getFavicon.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getFavicon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/favicon`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getFavicon(requestParameters: GetFaviconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getFaviconRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getGrammarRaw(requestParameters: GetGrammarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getGrammar.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGrammar.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/spel/grammar`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getGrammar(requestParameters: GetGrammarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getGrammarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a group
     */
    async getGroupRaw(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupEntity>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getGroup.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getGroup.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupEntityFromJSON(jsonValue));
    }

    /**
     * Get a group
     */
    async getGroup(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupEntity> {
        const response = await this.getGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the GROUP_INVITATION[READ] permission to use this service
     * List existing invitations of a group
     */
    async getGroupInvitationsRaw(requestParameters: GetGroupInvitationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InvitationEntity>>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getGroupInvitations.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getGroupInvitations.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGroupInvitations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/invitations`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvitationEntityFromJSON));
    }

    /**
     * User must have the GROUP_INVITATION[READ] permission to use this service
     * List existing invitations of a group
     */
    async getGroupInvitations(requestParameters: GetGroupInvitationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InvitationEntity>> {
        const response = await this.getGroupInvitationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List group members
     */
    async getGroupMembersRaw(requestParameters: GetGroupMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupMemberEntity>>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getGroupMembers.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getGroupMembers.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGroupMembers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/members`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupMemberEntityFromJSON));
    }

    /**
     * List group members
     */
    async getGroupMembers(requestParameters: GetGroupMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupMemberEntity>> {
        const response = await this.getGroupMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List group members with pagination
     */
    async getGroupMembers1Raw(requestParameters: GetGroupMembers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupMemberEntity>>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getGroupMembers1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getGroupMembers1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGroupMembers1.');
        }

        const queryParameters: any = {};

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/members/_paged`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupMemberEntityFromJSON));
    }

    /**
     * List group members with pagination
     */
    async getGroupMembers1(requestParameters: GetGroupMembers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupMemberEntity>> {
        const response = await this.getGroupMembers1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List APIs or applications linked to this group
     */
    async getGroupMembershipsRaw(requestParameters: GetGroupMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling getGroupMemberships.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getGroupMemberships.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGroupMemberships.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/memberships`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List APIs or applications linked to this group
     */
    async getGroupMemberships(requestParameters: GetGroupMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getGroupMembershipsRaw(requestParameters, initOverrides);
    }

    /**
     * Find all groups, or a specific type of groups.Only administrators could see all groups.Only users with MANAGE_API permissions could see API groups.
     * Find groups
     */
    async getGroupsRaw(requestParameters: GetGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getGroups.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupEntityFromJSON));
    }

    /**
     * Find all groups, or a specific type of groups.Only administrators could see all groups.Only users with MANAGE_API permissions could see API groups.
     * Find groups
     */
    async getGroups(requestParameters: GetGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupEntity>> {
        const response = await this.getGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get an identity provider
     */
    async getIdentityProviderRaw(requestParameters: GetIdentityProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProviderEntity>> {
        if (requestParameters.identityProvider === null || requestParameters.identityProvider === undefined) {
            throw new runtime.RequiredError('identityProvider','Required parameter requestParameters.identityProvider was null or undefined when calling getIdentityProvider.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getIdentityProvider.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/identities/{identityProvider}`.replace(`{${"identityProvider"}}`, encodeURIComponent(String(requestParameters.identityProvider))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get an identity provider
     */
    async getIdentityProvider(requestParameters: GetIdentityProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProviderEntity> {
        const response = await this.getIdentityProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get an identity provider
     */
    async getIdentityProvider1Raw(requestParameters: GetIdentityProvider1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProviderEntity>> {
        if (requestParameters.identityProvider === null || requestParameters.identityProvider === undefined) {
            throw new runtime.RequiredError('identityProvider','Required parameter requestParameters.identityProvider was null or undefined when calling getIdentityProvider1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getIdentityProvider1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getIdentityProvider1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/identities/{identityProvider}`.replace(`{${"identityProvider"}}`, encodeURIComponent(String(requestParameters.identityProvider))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get an identity provider
     */
    async getIdentityProvider1(requestParameters: GetIdentityProvider1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProviderEntity> {
        const response = await this.getIdentityProvider1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get the list of identity providers
     */
    async getIdentityProvidersRaw(requestParameters: GetIdentityProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IdentityProviderListItem>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getIdentityProviders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/identities`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdentityProviderListItemFromJSON));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get the list of identity providers
     */
    async getIdentityProviders(requestParameters: GetIdentityProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IdentityProviderListItem>> {
        const response = await this.getIdentityProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get the list of identity providers
     */
    async getIdentityProviders1Raw(requestParameters: GetIdentityProviders1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IdentityProviderListItem>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getIdentityProviders1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getIdentityProviders1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/identities`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdentityProviderListItemFromJSON));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission to use this service
     * Get the list of identity providers
     */
    async getIdentityProviders1(requestParameters: GetIdentityProviders1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IdentityProviderListItem>> {
        const response = await this.getIdentityProviders1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLogoLightRaw(requestParameters: GetLogoLightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling getLogoLight.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getLogoLight.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getLogoLight.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/optionalLogo`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getLogoLight(requestParameters: GetLogoLightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getLogoLightRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the PORTAL_METADATA[READ] permission to use this service
     * Retrieve the list of platform metadata
     */
    async getMetadatasRaw(requestParameters: GetMetadatasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MetadataEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getMetadatas.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getMetadatas.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/metadata`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MetadataEntityFromJSON));
    }

    /**
     * User must have the PORTAL_METADATA[READ] permission to use this service
     * Retrieve the list of platform metadata
     */
    async getMetadatas(requestParameters: GetMetadatasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MetadataEntity>> {
        const response = await this.getMetadatasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the NOTIFICATION_TEMPLATES[READ] permission to use this service
     * Get a specific notification template.
     */
    async getNotificationTemplateRaw(requestParameters: GetNotificationTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTemplateEntity>> {
        if (requestParameters.notificationTemplateId === null || requestParameters.notificationTemplateId === undefined) {
            throw new runtime.RequiredError('notificationTemplateId','Required parameter requestParameters.notificationTemplateId was null or undefined when calling getNotificationTemplate.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getNotificationTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/notification-templates/{notificationTemplateId}`.replace(`{${"notificationTemplateId"}}`, encodeURIComponent(String(requestParameters.notificationTemplateId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTemplateEntityFromJSON(jsonValue));
    }

    /**
     * User must have the NOTIFICATION_TEMPLATES[READ] permission to use this service
     * Get a specific notification template.
     */
    async getNotificationTemplate(requestParameters: GetNotificationTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTemplateEntity> {
        const response = await this.getNotificationTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the NOTIFICATION_TEMPLATES[READ] permission to use this service
     * List all notification templates.
     */
    async getNotificationTemplatesRaw(requestParameters: GetNotificationTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotificationTemplateEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getNotificationTemplates.');
        }

        const queryParameters: any = {};

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.hook !== undefined) {
            queryParameters['hook'] = requestParameters.hook;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/notification-templates`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotificationTemplateEntityFromJSON));
    }

    /**
     * User must have the NOTIFICATION_TEMPLATES[READ] permission to use this service
     * List all notification templates.
     */
    async getNotificationTemplates(requestParameters: GetNotificationTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotificationTemplateEntity>> {
        const response = await this.getNotificationTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of available plan\'s type
     */
    async getPlansConfigurationRaw(requestParameters: GetPlansConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlansConfigurationEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlansConfiguration.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlansConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/plans`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlansConfigurationEntityFromJSON(jsonValue));
    }

    /**
     * List of available plan\'s type
     */
    async getPlansConfiguration(requestParameters: GetPlansConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlansConfigurationEntity> {
        const response = await this.getPlansConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPlatformFlowSchemaFormRaw(requestParameters: GetPlatformFlowSchemaFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformFlowSchemaForm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/flows/flow-schema`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getPlatformFlowSchemaForm(requestParameters: GetPlatformFlowSchemaFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getPlatformFlowSchemaFormRaw(requestParameters, initOverrides);
    }

    /**
     * Get notification settings
     */
    async getPortalNotificationSettingsRaw(requestParameters: GetPortalNotificationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<any>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPortalNotificationSettings.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPortalNotificationSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/notificationsettings`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get notification settings
     */
    async getPortalNotificationSettings(requestParameters: GetPortalNotificationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<any>> {
        const response = await this.getPortalNotificationSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of available notifiers
     */
    async getPortalNotifiersRaw(requestParameters: GetPortalNotifiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotifierEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPortalNotifiers.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPortalNotifiers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/notifiers`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotifierEntityFromJSON));
    }

    /**
     * List of available notifiers
     */
    async getPortalNotifiers(requestParameters: GetPortalNotifiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotifierEntity>> {
        const response = await this.getPortalNotifiersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_QUALITY_RULE[READ] permission to use this service
     * Get a quality rule
     */
    async getQualityRuleRaw(requestParameters: GetQualityRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QualityRuleEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getQualityRule.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getQualityRule.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getQualityRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/quality-rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QualityRuleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_QUALITY_RULE[READ] permission to use this service
     * Get a quality rule
     */
    async getQualityRule(requestParameters: GetQualityRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QualityRuleEntity> {
        const response = await this.getQualityRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List quality rules
     */
    async getQualityRulesRaw(requestParameters: GetQualityRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QualityRuleEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getQualityRules.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getQualityRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/quality-rules`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QualityRuleEntityFromJSON));
    }

    /**
     * List quality rules
     */
    async getQualityRules(requestParameters: GetQualityRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QualityRuleEntity>> {
        const response = await this.getQualityRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * Get a role
     */
    async getRoleRaw(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling getRole.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling getRole.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * Get a role
     */
    async getRole(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleEntity> {
        const response = await this.getRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * Get a role
     */
    async getRole1Raw(requestParameters: GetRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling getRole1.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling getRole1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getRole1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getRole1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * Get a role
     */
    async getRole1(requestParameters: GetRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleEntity> {
        const response = await this.getRole1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List availables role scopes
     */
    async getRoleScopesRaw(requestParameters: GetRoleScopesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<string>; }>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getRoleScopes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List availables role scopes
     */
    async getRoleScopes(requestParameters: GetRoleScopesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<string>; }> {
        const response = await this.getRoleScopesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List availables role scopes
     */
    async getRoleScopes1Raw(requestParameters: GetRoleScopes1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<string>; }>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getRoleScopes1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getRoleScopes1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List availables role scopes
     */
    async getRoleScopes1(requestParameters: GetRoleScopes1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<string>; }> {
        const response = await this.getRoleScopes1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List of roles
     */
    async getRolesRaw(requestParameters: GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleEntity>>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling getRoles.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getRoles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List of roles
     */
    async getRoles(requestParameters: GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleEntity>> {
        const response = await this.getRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List of roles
     */
    async getRoles1Raw(requestParameters: GetRoles1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleEntity>>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling getRoles1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getRoles1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getRoles1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List of roles
     */
    async getRoles1(requestParameters: GetRoles1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleEntity>> {
        const response = await this.getRoles1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TAG[READ] permission to use this service
     * Get a sharding tag
     */
    async getTagRaw(requestParameters: GetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling getTag.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tags/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_TAG[READ] permission to use this service
     * Get a sharding tag
     */
    async getTag(requestParameters: GetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity> {
        const response = await this.getTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TAG[READ] permission to use this service
     * Get a sharding tag
     */
    async getTag1Raw(requestParameters: GetTag1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling getTag1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getTag1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTag1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tags/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_TAG[READ] permission to use this service
     * Get a sharding tag
     */
    async getTag1(requestParameters: GetTag1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity> {
        const response = await this.getTag1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List sharding tags
     */
    async getTagsRaw(requestParameters: GetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTags.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tags`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagEntityFromJSON));
    }

    /**
     * List sharding tags
     */
    async getTags(requestParameters: GetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagEntity>> {
        const response = await this.getTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List sharding tags
     */
    async getTags1Raw(requestParameters: GetTags1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getTags1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTags1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tags`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagEntityFromJSON));
    }

    /**
     * List sharding tags
     */
    async getTags1(requestParameters: GetTags1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagEntity>> {
        const response = await this.getTags1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List tenants
     */
    async getTenantsRaw(requestParameters: GetTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTenants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tenants`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * List tenants
     */
    async getTenants(requestParameters: GetTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.getTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List tenants
     */
    async getTenants1Raw(requestParameters: GetTenants1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getTenants1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTenants1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tenants`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * List tenants
     */
    async getTenants1(requestParameters: GetTenants1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.getTenants1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getThemeRaw(requestParameters: GetThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThemeEntity>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling getTheme.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getTheme.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeEntityFromJSON(jsonValue));
    }

    /**
     */
    async getTheme(requestParameters: GetThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThemeEntity> {
        const response = await this.getThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getThemeBackgroundRaw(requestParameters: GetThemeBackgroundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling getThemeBackground.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getThemeBackground.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getThemeBackground.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/backgroundImage`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getThemeBackground(requestParameters: GetThemeBackgroundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getThemeBackgroundRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getThemeLogoRaw(requestParameters: GetThemeLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling getThemeLogo.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getThemeLogo.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getThemeLogo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/logo`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getThemeLogo(requestParameters: GetThemeLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getThemeLogoRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the PORTAL_TOP_APIS[READ] permission to use this service
     * List of top APIs
     */
    async getTopApisRaw(requestParameters: GetTopApisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TopApiEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getTopApis.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTopApis.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/top-apis`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TopApiEntityFromJSON));
    }

    /**
     * User must have the PORTAL_TOP_APIS[READ] permission to use this service
     * List of top APIs
     */
    async getTopApis(requestParameters: GetTopApisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TopApiEntity>> {
        const response = await this.getTopApisRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List users with the given role
     */
    async getUsersPerRoleRaw(requestParameters: GetUsersPerRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MembershipListItem>>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling getUsersPerRole.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling getUsersPerRole.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getUsersPerRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}/users`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MembershipListItemFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List users with the given role
     */
    async getUsersPerRole(requestParameters: GetUsersPerRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MembershipListItem>> {
        const response = await this.getUsersPerRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List users with the given role
     */
    async getUsersPerRole1Raw(requestParameters: GetUsersPerRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MembershipListItem>>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling getUsersPerRole1.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling getUsersPerRole1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getUsersPerRole1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getUsersPerRole1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}/users`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MembershipListItemFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ROLE[READ] permission to use this service
     * List users with the given role
     */
    async getUsersPerRole1(requestParameters: GetUsersPerRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MembershipListItem>> {
        const response = await this.getUsersPerRole1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the global flow configuration of the organization
     */
    async hasPoliciesRaw(requestParameters: HasPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationFlowConfiguration>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling hasPolicies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/flows`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFlowConfigurationFromJSON(jsonValue));
    }

    /**
     * Get the global flow configuration of the organization
     */
    async hasPolicies(requestParameters: HasPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationFlowConfiguration> {
        const response = await this.hasPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async resetThemeRaw(requestParameters: ResetThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThemeEntity>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling resetTheme.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling resetTheme.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling resetTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}/reset`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeEntityFromJSON(jsonValue));
    }

    /**
     */
    async resetTheme(requestParameters: ResetThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThemeEntity> {
        const response = await this.resetThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the DICTIONARY[UPDATE] permission to use this service
     * Undeploy dictionary to API gateway
     */
    async undeployDictionaryRaw(requestParameters: UndeployDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DictionaryEntity>> {
        if (requestParameters.dictionary === null || requestParameters.dictionary === undefined) {
            throw new runtime.RequiredError('dictionary','Required parameter requestParameters.dictionary was null or undefined when calling undeployDictionary.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling undeployDictionary.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling undeployDictionary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dictionaries/{dictionary}/_undeploy`.replace(`{${"dictionary"}}`, encodeURIComponent(String(requestParameters.dictionary))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DictionaryEntityFromJSON(jsonValue));
    }

    /**
     * User must have the DICTIONARY[UPDATE] permission to use this service
     * Undeploy dictionary to API gateway
     */
    async undeployDictionary(requestParameters: UndeployDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DictionaryEntity> {
        const response = await this.undeployDictionaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_API_HEADER[UPDATE] permission to use this service
     * Update an API header
     */
    async updateApiHeaderRaw(requestParameters: UpdateApiHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiHeaderEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateApiHeader.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApiHeader.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApiHeader.');
        }

        if (requestParameters.updateApiHeaderEntity === null || requestParameters.updateApiHeaderEntity === undefined) {
            throw new runtime.RequiredError('updateApiHeaderEntity','Required parameter requestParameters.updateApiHeaderEntity was null or undefined when calling updateApiHeader.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/apiheaders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApiHeaderEntityToJSON(requestParameters.updateApiHeaderEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiHeaderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the PORTAL_API_HEADER[UPDATE] permission to use this service
     * Update an API header
     */
    async updateApiHeader(requestParameters: UpdateApiHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiHeaderEntity> {
        const response = await this.updateApiHeaderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CATEGORY[UPDATE] permission to use this service
     * Update an existing category
     */
    async updateCategoriesRaw(requestParameters: UpdateCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CategoryEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateCategories.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateCategories.');
        }

        if (requestParameters.updateCategoryEntity === null || requestParameters.updateCategoryEntity === undefined) {
            throw new runtime.RequiredError('updateCategoryEntity','Required parameter requestParameters.updateCategoryEntity was null or undefined when calling updateCategories.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateCategoryEntity.map(UpdateCategoryEntityToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryEntityFromJSON));
    }

    /**
     * User must have the PORTAL_CATEGORY[UPDATE] permission to use this service
     * Update an existing category
     */
    async updateCategories(requestParameters: UpdateCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CategoryEntity>> {
        const response = await this.updateCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CATEGORY[UPDATE] permission to use this service
     * Update the category
     */
    async updateCategoryRaw(requestParameters: UpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryEntity>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling updateCategory.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateCategory.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateCategory.');
        }

        if (requestParameters.updateCategoryEntity === null || requestParameters.updateCategoryEntity === undefined) {
            throw new runtime.RequiredError('updateCategoryEntity','Required parameter requestParameters.updateCategoryEntity was null or undefined when calling updateCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCategoryEntityToJSON(requestParameters.updateCategoryEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryEntityFromJSON(jsonValue));
    }

    /**
     * User must have the PORTAL_CATEGORY[UPDATE] permission to use this service
     * Update the category
     */
    async updateCategory(requestParameters: UpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryEntity> {
        const response = await this.updateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[UPDATE] permission to use this service
     * Update a client registration provider
     */
    async updateClientRegistrationProviderRaw(requestParameters: UpdateClientRegistrationProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientRegistrationProviderEntity>> {
        if (requestParameters.clientRegistrationProvider === null || requestParameters.clientRegistrationProvider === undefined) {
            throw new runtime.RequiredError('clientRegistrationProvider','Required parameter requestParameters.clientRegistrationProvider was null or undefined when calling updateClientRegistrationProvider.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateClientRegistrationProvider.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateClientRegistrationProvider.');
        }

        if (requestParameters.updateClientRegistrationProviderEntity === null || requestParameters.updateClientRegistrationProviderEntity === undefined) {
            throw new runtime.RequiredError('updateClientRegistrationProviderEntity','Required parameter requestParameters.updateClientRegistrationProviderEntity was null or undefined when calling updateClientRegistrationProvider.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/applications/registration/providers/{clientRegistrationProvider}`.replace(`{${"clientRegistrationProvider"}}`, encodeURIComponent(String(requestParameters.clientRegistrationProvider))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateClientRegistrationProviderEntityToJSON(requestParameters.updateClientRegistrationProviderEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientRegistrationProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the PORTAL_CLIENT_REGISTRATION_PROVIDER[UPDATE] permission to use this service
     * Update a client registration provider
     */
    async updateClientRegistrationProvider(requestParameters: UpdateClientRegistrationProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientRegistrationProviderEntity> {
        const response = await this.updateClientRegistrationProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the CUSTOM_USER_FIELDS[UPDATE] permission to use this service
     * Update a Custom User Field
     */
    async updateCustomUserFieldRaw(requestParameters: UpdateCustomUserFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomUserFieldEntity>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling updateCustomUserField.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateCustomUserField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/custom-user-fields/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomUserFieldEntityToJSON(requestParameters.customUserFieldEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomUserFieldEntityFromJSON(jsonValue));
    }

    /**
     * User must have the CUSTOM_USER_FIELDS[UPDATE] permission to use this service
     * Update a Custom User Field
     */
    async updateCustomUserField(requestParameters: UpdateCustomUserFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomUserFieldEntity> {
        const response = await this.updateCustomUserFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[UPDATE] permission to use this service
     * Update a platform dashboard
     */
    async updateDashboardRaw(requestParameters: UpdateDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardEntity>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling updateDashboard.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateDashboard.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateDashboard.');
        }

        if (requestParameters.updateDashboardEntity === null || requestParameters.updateDashboardEntity === undefined) {
            throw new runtime.RequiredError('updateDashboardEntity','Required parameter requestParameters.updateDashboardEntity was null or undefined when calling updateDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dashboards/{dashboardId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDashboardEntityToJSON(requestParameters.updateDashboardEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_DASHBOARD[UPDATE] permission to use this service
     * Update a platform dashboard
     */
    async updateDashboard(requestParameters: UpdateDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardEntity> {
        const response = await this.updateDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the DICTIONARY[UPDATE] permission to use this service
     * Update a dictionary
     */
    async updateDictionaryRaw(requestParameters: UpdateDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DictionaryEntity>> {
        if (requestParameters.dictionary === null || requestParameters.dictionary === undefined) {
            throw new runtime.RequiredError('dictionary','Required parameter requestParameters.dictionary was null or undefined when calling updateDictionary.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateDictionary.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateDictionary.');
        }

        if (requestParameters.updateDictionaryEntity === null || requestParameters.updateDictionaryEntity === undefined) {
            throw new runtime.RequiredError('updateDictionaryEntity','Required parameter requestParameters.updateDictionaryEntity was null or undefined when calling updateDictionary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/dictionaries/{dictionary}`.replace(`{${"dictionary"}}`, encodeURIComponent(String(requestParameters.dictionary))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDictionaryEntityToJSON(requestParameters.updateDictionaryEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DictionaryEntityFromJSON(jsonValue));
    }

    /**
     * User must have the DICTIONARY[UPDATE] permission to use this service
     * Update a dictionary
     */
    async updateDictionary(requestParameters: UpdateDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DictionaryEntity> {
        const response = await this.updateDictionaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[UPDATE] permission to use this service
     * Update a platform entrypoint
     */
    async updateEntrypointRaw(requestParameters: UpdateEntrypointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntrypointEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateEntrypoint.');
        }

        if (requestParameters.updateEntryPointEntity === null || requestParameters.updateEntryPointEntity === undefined) {
            throw new runtime.RequiredError('updateEntryPointEntity','Required parameter requestParameters.updateEntryPointEntity was null or undefined when calling updateEntrypoint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/entrypoints`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEntryPointEntityToJSON(requestParameters.updateEntryPointEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[UPDATE] permission to use this service
     * Update a platform entrypoint
     */
    async updateEntrypoint(requestParameters: UpdateEntrypointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntrypointEntity> {
        const response = await this.updateEntrypointRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[UPDATE] permission to use this service
     * Update a platform entrypoint
     */
    async updateEntrypoint1Raw(requestParameters: UpdateEntrypoint1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntrypointEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateEntrypoint1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateEntrypoint1.');
        }

        if (requestParameters.updateEntryPointEntity === null || requestParameters.updateEntryPointEntity === undefined) {
            throw new runtime.RequiredError('updateEntryPointEntity','Required parameter requestParameters.updateEntryPointEntity was null or undefined when calling updateEntrypoint1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/entrypoints`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEntryPointEntityToJSON(requestParameters.updateEntryPointEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ENTRYPOINT[UPDATE] permission to use this service
     * Update a platform entrypoint
     */
    async updateEntrypoint1(requestParameters: UpdateEntrypoint1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntrypointEntity> {
        const response = await this.updateEntrypoint1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update generic notification settings
     */
    async updateGenericNotificationSettingsRaw(requestParameters: UpdateGenericNotificationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericNotificationConfigEntity>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling updateGenericNotificationSettings.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateGenericNotificationSettings.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateGenericNotificationSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/notificationsettings/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GenericNotificationConfigEntityToJSON(requestParameters.genericNotificationConfigEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericNotificationConfigEntityFromJSON(jsonValue));
    }

    /**
     * Update generic notification settings
     */
    async updateGenericNotificationSettings(requestParameters: UpdateGenericNotificationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericNotificationConfigEntity> {
        const response = await this.updateGenericNotificationSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing group
     */
    async updateGroupRaw(requestParameters: UpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupEntity>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling updateGroup.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateGroup.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateGroup.');
        }

        if (requestParameters.updateGroupEntity === null || requestParameters.updateGroupEntity === undefined) {
            throw new runtime.RequiredError('updateGroupEntity','Required parameter requestParameters.updateGroupEntity was null or undefined when calling updateGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}`.replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGroupEntityToJSON(requestParameters.updateGroupEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupEntityFromJSON(jsonValue));
    }

    /**
     * Update an existing group
     */
    async updateGroup(requestParameters: UpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupEntity> {
        const response = await this.updateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the GROUP_INVITATION[UPDATE] permission to use this service
     * Update an invitation to join a group
     */
    async updateGroupInvitationRaw(requestParameters: UpdateGroupInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvitationEntity>> {
        if (requestParameters.invitation === null || requestParameters.invitation === undefined) {
            throw new runtime.RequiredError('invitation','Required parameter requestParameters.invitation was null or undefined when calling updateGroupInvitation.');
        }

        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling updateGroupInvitation.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateGroupInvitation.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateGroupInvitation.');
        }

        if (requestParameters.updateInvitationEntity === null || requestParameters.updateInvitationEntity === undefined) {
            throw new runtime.RequiredError('updateInvitationEntity','Required parameter requestParameters.updateInvitationEntity was null or undefined when calling updateGroupInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/groups/{group}/invitations/{invitation}`.replace(`{${"invitation"}}`, encodeURIComponent(String(requestParameters.invitation))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateInvitationEntityToJSON(requestParameters.updateInvitationEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationEntityFromJSON(jsonValue));
    }

    /**
     * User must have the GROUP_INVITATION[UPDATE] permission to use this service
     * Update an invitation to join a group
     */
    async updateGroupInvitation(requestParameters: UpdateGroupInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvitationEntity> {
        const response = await this.updateGroupInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[UPDATE] permission to use this service
     * Update an identity provider
     */
    async updateIdentityProviderRaw(requestParameters: UpdateIdentityProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProviderEntity>> {
        if (requestParameters.identityProvider === null || requestParameters.identityProvider === undefined) {
            throw new runtime.RequiredError('identityProvider','Required parameter requestParameters.identityProvider was null or undefined when calling updateIdentityProvider.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateIdentityProvider.');
        }

        if (requestParameters.updateIdentityProviderEntity === null || requestParameters.updateIdentityProviderEntity === undefined) {
            throw new runtime.RequiredError('updateIdentityProviderEntity','Required parameter requestParameters.updateIdentityProviderEntity was null or undefined when calling updateIdentityProvider.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/identities/{identityProvider}`.replace(`{${"identityProvider"}}`, encodeURIComponent(String(requestParameters.identityProvider))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateIdentityProviderEntityToJSON(requestParameters.updateIdentityProviderEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[UPDATE] permission to use this service
     * Update an identity provider
     */
    async updateIdentityProvider(requestParameters: UpdateIdentityProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProviderEntity> {
        const response = await this.updateIdentityProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[UPDATE] permission to use this service
     * Update an identity provider
     */
    async updateIdentityProvider1Raw(requestParameters: UpdateIdentityProvider1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProviderEntity>> {
        if (requestParameters.identityProvider === null || requestParameters.identityProvider === undefined) {
            throw new runtime.RequiredError('identityProvider','Required parameter requestParameters.identityProvider was null or undefined when calling updateIdentityProvider1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateIdentityProvider1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateIdentityProvider1.');
        }

        if (requestParameters.updateIdentityProviderEntity === null || requestParameters.updateIdentityProviderEntity === undefined) {
            throw new runtime.RequiredError('updateIdentityProviderEntity','Required parameter requestParameters.updateIdentityProviderEntity was null or undefined when calling updateIdentityProvider1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/identities/{identityProvider}`.replace(`{${"identityProvider"}}`, encodeURIComponent(String(requestParameters.identityProvider))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateIdentityProviderEntityToJSON(requestParameters.updateIdentityProviderEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ORGANIZATION_IDENTITY_PROVIDER[UPDATE] permission to use this service
     * Update an identity provider
     */
    async updateIdentityProvider1(requestParameters: UpdateIdentityProvider1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProviderEntity> {
        const response = await this.updateIdentityProvider1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_METADATA[UPDATE] permission to use this service
     * Update a platform metadata
     */
    async updateMetadataRaw(requestParameters: UpdateMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateMetadata.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateMetadata.');
        }

        if (requestParameters.updateMetadataEntity === null || requestParameters.updateMetadataEntity === undefined) {
            throw new runtime.RequiredError('updateMetadataEntity','Required parameter requestParameters.updateMetadataEntity was null or undefined when calling updateMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/metadata`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMetadataEntityToJSON(requestParameters.updateMetadataEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataEntityFromJSON(jsonValue));
    }

    /**
     * User must have the PORTAL_METADATA[UPDATE] permission to use this service
     * Update a platform metadata
     */
    async updateMetadata(requestParameters: UpdateMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataEntity> {
        const response = await this.updateMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the NOTIFICATION_TEMPLATES[UPDATE] permission to use this service
     * Update an existing notification template
     */
    async updateNotificationTemplateRaw(requestParameters: UpdateNotificationTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationTemplateEntity>> {
        if (requestParameters.notificationTemplateId === null || requestParameters.notificationTemplateId === undefined) {
            throw new runtime.RequiredError('notificationTemplateId','Required parameter requestParameters.notificationTemplateId was null or undefined when calling updateNotificationTemplate.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateNotificationTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/notification-templates/{notificationTemplateId}`.replace(`{${"notificationTemplateId"}}`, encodeURIComponent(String(requestParameters.notificationTemplateId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationTemplateEntityToJSON(requestParameters.notificationTemplateEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTemplateEntityFromJSON(jsonValue));
    }

    /**
     * User must have the NOTIFICATION_TEMPLATES[UPDATE] permission to use this service
     * Update an existing notification template
     */
    async updateNotificationTemplate(requestParameters: UpdateNotificationTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationTemplateEntity> {
        const response = await this.updateNotificationTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update portal notification settings
     */
    async updatePortalNotificationSettingsRaw(requestParameters: UpdatePortalNotificationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortalNotificationConfigEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updatePortalNotificationSettings.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updatePortalNotificationSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/notificationsettings`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PortalNotificationConfigEntityToJSON(requestParameters.portalNotificationConfigEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortalNotificationConfigEntityFromJSON(jsonValue));
    }

    /**
     * Update portal notification settings
     */
    async updatePortalNotificationSettings(requestParameters: UpdatePortalNotificationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortalNotificationConfigEntity> {
        const response = await this.updatePortalNotificationSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_QUALITY_RULE[READ] permission to use this service
     * Update a quality rule
     */
    async updateQualityRuleRaw(requestParameters: UpdateQualityRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QualityRuleEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateQualityRule.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateQualityRule.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateQualityRule.');
        }

        if (requestParameters.updateQualityRuleEntity === null || requestParameters.updateQualityRuleEntity === undefined) {
            throw new runtime.RequiredError('updateQualityRuleEntity','Required parameter requestParameters.updateQualityRuleEntity was null or undefined when calling updateQualityRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/quality-rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateQualityRuleEntityToJSON(requestParameters.updateQualityRuleEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QualityRuleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_QUALITY_RULE[READ] permission to use this service
     * Update a quality rule
     */
    async updateQualityRule(requestParameters: UpdateQualityRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QualityRuleEntity> {
        const response = await this.updateQualityRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Update a role
     */
    async updateRoleRaw(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling updateRole.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling updateRole.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateRole.');
        }

        if (requestParameters.updateRoleEntity === null || requestParameters.updateRoleEntity === undefined) {
            throw new runtime.RequiredError('updateRoleEntity','Required parameter requestParameters.updateRoleEntity was null or undefined when calling updateRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/rolescopes/{scope}/roles/{role}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRoleEntityToJSON(requestParameters.updateRoleEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Update a role
     */
    async updateRole(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleEntity> {
        const response = await this.updateRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Update a role
     */
    async updateRole1Raw(requestParameters: UpdateRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleEntity>> {
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling updateRole1.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling updateRole1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateRole1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateRole1.');
        }

        if (requestParameters.updateRoleEntity === null || requestParameters.updateRoleEntity === undefined) {
            throw new runtime.RequiredError('updateRoleEntity','Required parameter requestParameters.updateRoleEntity was null or undefined when calling updateRole1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/rolescopes/{scope}/roles/{role}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRoleEntityToJSON(requestParameters.updateRoleEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ROLE[UPDATE] permission to use this service
     * Update a role
     */
    async updateRole1(requestParameters: UpdateRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleEntity> {
        const response = await this.updateRole1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TAG[UPDATE] permission to use this service
     * Update an existing sharding tag
     */
    async updateTagRaw(requestParameters: UpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling updateTag.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateTag.');
        }

        if (requestParameters.updateTagEntity === null || requestParameters.updateTagEntity === undefined) {
            throw new runtime.RequiredError('updateTagEntity','Required parameter requestParameters.updateTagEntity was null or undefined when calling updateTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tags/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTagEntityToJSON(requestParameters.updateTagEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_TAG[UPDATE] permission to use this service
     * Update an existing sharding tag
     */
    async updateTag(requestParameters: UpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity> {
        const response = await this.updateTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TAG[UPDATE] permission to use this service
     * Update an existing sharding tag
     */
    async updateTag1Raw(requestParameters: UpdateTag1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling updateTag1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateTag1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateTag1.');
        }

        if (requestParameters.updateTagEntity === null || requestParameters.updateTagEntity === undefined) {
            throw new runtime.RequiredError('updateTagEntity','Required parameter requestParameters.updateTagEntity was null or undefined when calling updateTag1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tags/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTagEntityToJSON(requestParameters.updateTagEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_TAG[UPDATE] permission to use this service
     * Update an existing sharding tag
     */
    async updateTag1(requestParameters: UpdateTag1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity> {
        const response = await this.updateTag1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TENANT[UPDATE] permission to use this service
     * Update a tenant
     */
    async updateTenantsRaw(requestParameters: UpdateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateTenants.');
        }

        if (requestParameters.updateTenantEntity === null || requestParameters.updateTenantEntity === undefined) {
            throw new runtime.RequiredError('updateTenantEntity','Required parameter requestParameters.updateTenantEntity was null or undefined when calling updateTenants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tenants`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateTenantEntity.map(UpdateTenantEntityToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_TENANT[UPDATE] permission to use this service
     * Update a tenant
     */
    async updateTenants(requestParameters: UpdateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.updateTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TENANT[UPDATE] permission to use this service
     * Update a tenant
     */
    async updateTenants1Raw(requestParameters: UpdateTenants1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateTenants1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateTenants1.');
        }

        if (requestParameters.updateTenantEntity === null || requestParameters.updateTenantEntity === undefined) {
            throw new runtime.RequiredError('updateTenantEntity','Required parameter requestParameters.updateTenantEntity was null or undefined when calling updateTenants1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tenants`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateTenantEntity.map(UpdateTenantEntityToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_TENANT[UPDATE] permission to use this service
     * Update a tenant
     */
    async updateTenants1(requestParameters: UpdateTenants1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.updateTenants1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateThemeRaw(requestParameters: UpdateThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThemeEntity>> {
        if (requestParameters.themeId === null || requestParameters.themeId === undefined) {
            throw new runtime.RequiredError('themeId','Required parameter requestParameters.themeId was null or undefined when calling updateTheme.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateTheme.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateTheme.');
        }

        if (requestParameters.updateThemeEntity === null || requestParameters.updateThemeEntity === undefined) {
            throw new runtime.RequiredError('updateThemeEntity','Required parameter requestParameters.updateThemeEntity was null or undefined when calling updateTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/themes/{themeId}`.replace(`{${"themeId"}}`, encodeURIComponent(String(requestParameters.themeId))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateThemeEntityToJSON(requestParameters.updateThemeEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateTheme(requestParameters: UpdateThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThemeEntity> {
        const response = await this.updateThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PORTAL_TOP_APIS[UPDATE] permission to use this service
     * Update a top API
     */
    async updateTopApiRaw(requestParameters: UpdateTopApiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TopApiEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateTopApi.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateTopApi.');
        }

        if (requestParameters.updateTopApiEntity === null || requestParameters.updateTopApiEntity === undefined) {
            throw new runtime.RequiredError('updateTopApiEntity','Required parameter requestParameters.updateTopApiEntity was null or undefined when calling updateTopApi.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/top-apis`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateTopApiEntity.map(UpdateTopApiEntityToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TopApiEntityFromJSON));
    }

    /**
     * User must have the PORTAL_TOP_APIS[UPDATE] permission to use this service
     * Update a top API
     */
    async updateTopApi(requestParameters: UpdateTopApiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TopApiEntity>> {
        const response = await this.updateTopApiRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetDashboardsReferenceTypeEnum = {
    PLATFORM: 'PLATFORM',
    API: 'API',
    APPLICATION: 'APPLICATION',
    HOME: 'HOME'
} as const;
export type GetDashboardsReferenceTypeEnum = typeof GetDashboardsReferenceTypeEnum[keyof typeof GetDashboardsReferenceTypeEnum];
