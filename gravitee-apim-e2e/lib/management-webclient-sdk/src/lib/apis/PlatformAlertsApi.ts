/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlertEventPage,
  AlertStatusEntity,
  AlertTriggerEntity,
  NewAlertTriggerEntity,
  UpdateAlertTriggerEntity,
} from '../models';
import {
    AlertEventPageFromJSON,
    AlertEventPageToJSON,
    AlertStatusEntityFromJSON,
    AlertStatusEntityToJSON,
    AlertTriggerEntityFromJSON,
    AlertTriggerEntityToJSON,
    NewAlertTriggerEntityFromJSON,
    NewAlertTriggerEntityToJSON,
    UpdateAlertTriggerEntityFromJSON,
    UpdateAlertTriggerEntityToJSON,
} from '../models';

export interface AssociatePlatformAlertRequest {
    alert: string;
    type?: string;
    envId: string;
    orgId: string;
}

export interface CreatePlatformAlertRequest {
    envId: string;
    orgId: string;
    newAlertTriggerEntity: NewAlertTriggerEntity;
}

export interface DeletePlatformAlertRequest {
    alert: string;
    envId: string;
    orgId: string;
}

export interface GetPlatformAlertEventsRequest {
    alert: string;
    from?: number;
    to?: number;
    page?: number;
    size?: number;
    envId: string;
    orgId: string;
}

export interface GetPlatformAlertStatusRequest {
    envId: string;
    orgId: string;
}

export interface GetPlatformAlertsRequest {
    eventCounts?: boolean;
    envId: string;
    orgId: string;
}

export interface GetPlatformAlertsAnalytics1Request {
    from?: number;
    to?: number;
    envId: string;
    orgId: string;
}

export interface UpdatePlatformAlertRequest {
    alert: string;
    envId: string;
    orgId: string;
    updateAlertTriggerEntity: UpdateAlertTriggerEntity;
}

/**
 * 
 */
export class PlatformAlertsApi extends runtime.BaseAPI {

    /**
     * User must have the MANAGEMENT_ALERT[UPDATE] permission to use this service
     * Associate the alert to multiple references (API, APPLICATION
     */
    async associatePlatformAlertRaw(requestParameters: AssociatePlatformAlertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert','Required parameter requestParameters.alert was null or undefined when calling associatePlatformAlert.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling associatePlatformAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling associatePlatformAlert.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts/{alert}`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ALERT[UPDATE] permission to use this service
     * Associate the alert to multiple references (API, APPLICATION
     */
    async associatePlatformAlert(requestParameters: AssociatePlatformAlertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.associatePlatformAlertRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_ALERT[CREATE] permission to use this service
     * Create an alert for the platform
     */
    async createPlatformAlertRaw(requestParameters: CreatePlatformAlertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertTriggerEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createPlatformAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createPlatformAlert.');
        }

        if (requestParameters.newAlertTriggerEntity === null || requestParameters.newAlertTriggerEntity === undefined) {
            throw new runtime.RequiredError('newAlertTriggerEntity','Required parameter requestParameters.newAlertTriggerEntity was null or undefined when calling createPlatformAlert.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewAlertTriggerEntityToJSON(requestParameters.newAlertTriggerEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertTriggerEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ALERT[CREATE] permission to use this service
     * Create an alert for the platform
     */
    async createPlatformAlert(requestParameters: CreatePlatformAlertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertTriggerEntity> {
        const response = await this.createPlatformAlertRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ALERT[DELETE] permission to use this service
     * Delete an alert for the platform
     */
    async deletePlatformAlertRaw(requestParameters: DeletePlatformAlertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert','Required parameter requestParameters.alert was null or undefined when calling deletePlatformAlert.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deletePlatformAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deletePlatformAlert.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts/{alert}`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGEMENT_ALERT[DELETE] permission to use this service
     * Delete an alert for the platform
     */
    async deletePlatformAlert(requestParameters: DeletePlatformAlertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePlatformAlertRaw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Retrieve the list of events for an alert
     */
    async getPlatformAlertEventsRaw(requestParameters: GetPlatformAlertEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertEventPage>> {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert','Required parameter requestParameters.alert was null or undefined when calling getPlatformAlertEvents.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlatformAlertEvents.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformAlertEvents.');
        }

        const queryParameters: any = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts/{alert}/events`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertEventPageFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Retrieve the list of events for an alert
     */
    async getPlatformAlertEvents(requestParameters: GetPlatformAlertEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertEventPage> {
        const response = await this.getPlatformAlertEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Get alerting status
     */
    async getPlatformAlertStatusRaw(requestParameters: GetPlatformAlertStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertStatusEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlatformAlertStatus.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformAlertStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts/status`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertStatusEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Get alerting status
     */
    async getPlatformAlertStatus(requestParameters: GetPlatformAlertStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertStatusEntity> {
        const response = await this.getPlatformAlertStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * List configured alerts of the platform
     */
    async getPlatformAlertsRaw(requestParameters: GetPlatformAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlertTriggerEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlatformAlerts.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformAlerts.');
        }

        const queryParameters: any = {};

        if (requestParameters.eventCounts !== undefined) {
            queryParameters['event_counts'] = requestParameters.eventCounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlertTriggerEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * List configured alerts of the platform
     */
    async getPlatformAlerts(requestParameters: GetPlatformAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlertTriggerEntity>> {
        const response = await this.getPlatformAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * List configured alerts of the platform
     */
    async getPlatformAlertsAnalytics1Raw(requestParameters: GetPlatformAlertsAnalytics1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlertTriggerEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlatformAlertsAnalytics1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformAlertsAnalytics1.');
        }

        const queryParameters: any = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts/analytics`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlertTriggerEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * List configured alerts of the platform
     */
    async getPlatformAlertsAnalytics1(requestParameters: GetPlatformAlertsAnalytics1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlertTriggerEntity>> {
        const response = await this.getPlatformAlertsAnalytics1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_ALERT[UPDATE] permission to use this service
     * Update an alert for the platform
     */
    async updatePlatformAlertRaw(requestParameters: UpdatePlatformAlertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertTriggerEntity>> {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert','Required parameter requestParameters.alert was null or undefined when calling updatePlatformAlert.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updatePlatformAlert.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updatePlatformAlert.');
        }

        if (requestParameters.updateAlertTriggerEntity === null || requestParameters.updateAlertTriggerEntity === undefined) {
            throw new runtime.RequiredError('updateAlertTriggerEntity','Required parameter requestParameters.updateAlertTriggerEntity was null or undefined when calling updatePlatformAlert.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/alerts/{alert}`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAlertTriggerEntityToJSON(requestParameters.updateAlertTriggerEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertTriggerEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_ALERT[UPDATE] permission to use this service
     * Update an alert for the platform
     */
    async updatePlatformAlert(requestParameters: UpdatePlatformAlertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertTriggerEntity> {
        const response = await this.updatePlatformAlertRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
