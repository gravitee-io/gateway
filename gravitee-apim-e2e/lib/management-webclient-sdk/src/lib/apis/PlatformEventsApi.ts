/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EventEntityPage,
  EventType,
} from '../models';
import {
    EventEntityPageFromJSON,
    EventEntityPageToJSON,
    EventTypeFromJSON,
    EventTypeToJSON,
} from '../models';

export interface GetPlatformEventsRequest {
    type?: Array<EventType>;
    from?: number;
    to?: number;
    page?: number;
    size?: number;
    apiIds?: Array<string>;
    envId: string;
    orgId: string;
}

/**
 * 
 */
export class PlatformEventsApi extends runtime.BaseAPI {

    /**
     * User must have the MANAGEMENT_PLATFORM[READ] permission to use this service
     * List platform events
     */
    async getPlatformEventsRaw(requestParameters: GetPlatformEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventEntityPage>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPlatformEvents.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPlatformEvents.');
        }

        const queryParameters: any = {};

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.apiIds) {
            queryParameters['api_ids'] = requestParameters.apiIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/platform/events`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventEntityPageFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGEMENT_PLATFORM[READ] permission to use this service
     * List platform events
     */
    async getPlatformEvents(requestParameters: GetPlatformEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventEntityPage> {
        const response = await this.getPlatformEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
