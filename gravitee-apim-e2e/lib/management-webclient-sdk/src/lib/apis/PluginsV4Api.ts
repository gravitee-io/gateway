/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ConnectorListItem,
    ConnectorListItemFromJSON,
    ConnectorListItemToJSON,
    PlatformPluginEntity,
    PlatformPluginEntityFromJSON,
    PlatformPluginEntityToJSON,
} from '../models';

export interface GetEntrypoint2Request {
    expand?: Array<string>;
    envId: string;
    orgId: string;
}

export interface GetEntrypoint3Request {
    entrypoint: string;
    envId: string;
    orgId: string;
}

export interface GetEntrypointDocRequest {
    entrypoint: string;
    envId: string;
    orgId: string;
}

export interface GetEntrypointSchemaRequest {
    entrypoint: string;
    envId: string;
    orgId: string;
}

/**
 * 
 */
export class PluginsV4Api extends runtime.BaseAPI {

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * List entrypoint plugins
     */
    async getEntrypoint2Raw(requestParameters: GetEntrypoint2Request): Promise<runtime.ApiResponse<Array<ConnectorListItem>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEntrypoint2.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypoint2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/entrypoints`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConnectorListItemFromJSON));
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * List entrypoint plugins
     */
    async getEntrypoint2(requestParameters: GetEntrypoint2Request): Promise<Array<ConnectorListItem>> {
        const response = await this.getEntrypoint2Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * Get an entrypoint
     */
    async getEntrypoint3Raw(requestParameters: GetEntrypoint3Request): Promise<runtime.ApiResponse<PlatformPluginEntity>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling getEntrypoint3.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEntrypoint3.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypoint3.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/entrypoints/{entrypoint}`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformPluginEntityFromJSON(jsonValue));
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * Get an entrypoint
     */
    async getEntrypoint3(requestParameters: GetEntrypoint3Request): Promise<PlatformPluginEntity> {
        const response = await this.getEntrypoint3Raw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * Get a entrypoint\'s documentation
     */
    async getEntrypointDocRaw(requestParameters: GetEntrypointDocRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling getEntrypointDoc.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEntrypointDoc.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypointDoc.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/entrypoints/{entrypoint}/documentation`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * Get a entrypoint\'s documentation
     */
    async getEntrypointDoc(requestParameters: GetEntrypointDocRequest): Promise<string> {
        const response = await this.getEntrypointDocRaw(requestParameters);
        return await response.value();
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * Get a entrypoint\'s schema
     */
    async getEntrypointSchemaRaw(requestParameters: GetEntrypointSchemaRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling getEntrypointSchema.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEntrypointSchema.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypointSchema.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/entrypoints/{entrypoint}/schema`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * Get a entrypoint\'s schema
     */
    async getEntrypointSchema(requestParameters: GetEntrypointSchemaRequest): Promise<string> {
        const response = await this.getEntrypointSchemaRaw(requestParameters);
        return await response.value();
    }

}
