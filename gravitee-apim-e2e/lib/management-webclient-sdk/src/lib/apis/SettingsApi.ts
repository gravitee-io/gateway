/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * Some news resources are in alpha version. This implies that they are likely to be modified or even removed in future versions. They are marked with the ðŸ§ª symbol
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConsoleSettingsEntity,
  PortalSettingsEntity,
} from '../models';
import {
    ConsoleSettingsEntityFromJSON,
    ConsoleSettingsEntityToJSON,
    PortalSettingsEntityFromJSON,
    PortalSettingsEntityToJSON,
} from '../models';

export interface GetConsoleSettingsRequest {
    orgId: string;
}

export interface GetPortalSettingsRequest {
    envId: string;
    orgId: string;
}

export interface SaveConsoleSettingsRequest {
    orgId: string;
    consoleSettingsEntity: ConsoleSettingsEntity;
}

export interface SavePortalSettingsRequest {
    envId: string;
    orgId: string;
    portalSettingsEntity: PortalSettingsEntity;
}

/**
 * 
 */
export class SettingsApi extends runtime.BaseAPI {

    /**
     * Get the console settings
     */
    async getConsoleSettingsRaw(requestParameters: GetConsoleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsoleSettingsEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getConsoleSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/settings`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsoleSettingsEntityFromJSON(jsonValue));
    }

    /**
     * Get the console settings
     */
    async getConsoleSettings(requestParameters: GetConsoleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsoleSettingsEntity> {
        const response = await this.getConsoleSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the portal settings
     */
    async getPortalSettingsRaw(requestParameters: GetPortalSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortalSettingsEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getPortalSettings.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getPortalSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/settings`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortalSettingsEntityFromJSON(jsonValue));
    }

    /**
     * Get the portal settings
     */
    async getPortalSettings(requestParameters: GetPortalSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortalSettingsEntity> {
        const response = await this.getPortalSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save the console settings
     */
    async saveConsoleSettingsRaw(requestParameters: SaveConsoleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsoleSettingsEntity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling saveConsoleSettings.');
        }

        if (requestParameters.consoleSettingsEntity === null || requestParameters.consoleSettingsEntity === undefined) {
            throw new runtime.RequiredError('consoleSettingsEntity','Required parameter requestParameters.consoleSettingsEntity was null or undefined when calling saveConsoleSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/settings`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsoleSettingsEntityToJSON(requestParameters.consoleSettingsEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsoleSettingsEntityFromJSON(jsonValue));
    }

    /**
     * Save the console settings
     */
    async saveConsoleSettings(requestParameters: SaveConsoleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsoleSettingsEntity> {
        const response = await this.saveConsoleSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save the portal settings
     */
    async savePortalSettingsRaw(requestParameters: SavePortalSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortalSettingsEntity>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling savePortalSettings.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling savePortalSettings.');
        }

        if (requestParameters.portalSettingsEntity === null || requestParameters.portalSettingsEntity === undefined) {
            throw new runtime.RequiredError('portalSettingsEntity','Required parameter requestParameters.portalSettingsEntity was null or undefined when calling savePortalSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/settings`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PortalSettingsEntityToJSON(requestParameters.portalSettingsEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortalSettingsEntityFromJSON(jsonValue));
    }

    /**
     * Save the portal settings
     */
    async savePortalSettings(requestParameters: SavePortalSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortalSettingsEntity> {
        const response = await this.savePortalSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
