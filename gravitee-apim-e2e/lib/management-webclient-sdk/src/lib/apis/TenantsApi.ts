/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NewTenantEntity,
  TenantEntity,
  UpdateTenantEntity,
} from '../models';
import {
    NewTenantEntityFromJSON,
    NewTenantEntityToJSON,
    TenantEntityFromJSON,
    TenantEntityToJSON,
    UpdateTenantEntityFromJSON,
    UpdateTenantEntityToJSON,
} from '../models';

export interface CreateTenantsRequest {
    orgId: string;
    newTenantEntity: Array<NewTenantEntity>;
}

export interface CreateTenants1Request {
    envId: string;
    orgId: string;
    newTenantEntity: Array<NewTenantEntity>;
}

export interface DeleteTenantRequest {
    tenant: string;
    orgId: string;
}

export interface DeleteTenant1Request {
    tenant: string;
    envId: string;
    orgId: string;
}

export interface GetTenantsRequest {
    orgId: string;
}

export interface GetTenants1Request {
    envId: string;
    orgId: string;
}

export interface UpdateTenantsRequest {
    orgId: string;
    updateTenantEntity: Array<UpdateTenantEntity>;
}

export interface UpdateTenants1Request {
    envId: string;
    orgId: string;
    updateTenantEntity: Array<UpdateTenantEntity>;
}

/**
 * 
 */
export class TenantsApi extends runtime.BaseAPI {

    /**
     * User must have the MANAGEMENT_TENANT[CREATE] permission to use this service
     * Create a tenant
     */
    async createTenantsRaw(requestParameters: CreateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createTenants.');
        }

        if (requestParameters.newTenantEntity === null || requestParameters.newTenantEntity === undefined) {
            throw new runtime.RequiredError('newTenantEntity','Required parameter requestParameters.newTenantEntity was null or undefined when calling createTenants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tenants`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.newTenantEntity.map(NewTenantEntityToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_TENANT[CREATE] permission to use this service
     * Create a tenant
     */
    async createTenants(requestParameters: CreateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.createTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TENANT[CREATE] permission to use this service
     * Create a tenant
     */
    async createTenants1Raw(requestParameters: CreateTenants1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createTenants1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createTenants1.');
        }

        if (requestParameters.newTenantEntity === null || requestParameters.newTenantEntity === undefined) {
            throw new runtime.RequiredError('newTenantEntity','Required parameter requestParameters.newTenantEntity was null or undefined when calling createTenants1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tenants`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.newTenantEntity.map(NewTenantEntityToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_TENANT[CREATE] permission to use this service
     * Create a tenant
     */
    async createTenants1(requestParameters: CreateTenants1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.createTenants1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TENANT[DELETE] permission to use this service
     * Delete a tenant
     */
    async deleteTenantRaw(requestParameters: DeleteTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteTenant.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tenants/{tenant}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_TENANT[DELETE] permission to use this service
     * Delete a tenant
     */
    async deleteTenant(requestParameters: DeleteTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.deleteTenantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TENANT[DELETE] permission to use this service
     * Delete a tenant
     */
    async deleteTenant1Raw(requestParameters: DeleteTenant1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteTenant1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteTenant1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteTenant1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tenants/{tenant}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_TENANT[DELETE] permission to use this service
     * Delete a tenant
     */
    async deleteTenant1(requestParameters: DeleteTenant1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.deleteTenant1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List tenants
     */
    async getTenantsRaw(requestParameters: GetTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTenants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tenants`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * List tenants
     */
    async getTenants(requestParameters: GetTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.getTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List tenants
     */
    async getTenants1Raw(requestParameters: GetTenants1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getTenants1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getTenants1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tenants`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * List tenants
     */
    async getTenants1(requestParameters: GetTenants1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.getTenants1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TENANT[UPDATE] permission to use this service
     * Update a tenant
     */
    async updateTenantsRaw(requestParameters: UpdateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateTenants.');
        }

        if (requestParameters.updateTenantEntity === null || requestParameters.updateTenantEntity === undefined) {
            throw new runtime.RequiredError('updateTenantEntity','Required parameter requestParameters.updateTenantEntity was null or undefined when calling updateTenants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/configuration/tenants`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateTenantEntity.map(UpdateTenantEntityToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_TENANT[UPDATE] permission to use this service
     * Update a tenant
     */
    async updateTenants(requestParameters: UpdateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.updateTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGEMENT_TENANT[UPDATE] permission to use this service
     * Update a tenant
     */
    async updateTenants1Raw(requestParameters: UpdateTenants1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantEntity>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateTenants1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateTenants1.');
        }

        if (requestParameters.updateTenantEntity === null || requestParameters.updateTenantEntity === undefined) {
            throw new runtime.RequiredError('updateTenantEntity','Required parameter requestParameters.updateTenantEntity was null or undefined when calling updateTenants1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/configuration/tenants`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateTenantEntity.map(UpdateTenantEntityToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantEntityFromJSON));
    }

    /**
     * User must have the MANAGEMENT_TENANT[UPDATE] permission to use this service
     * Update a tenant
     */
    async updateTenants1(requestParameters: UpdateTenants1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantEntity>> {
        const response = await this.updateTenants1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
