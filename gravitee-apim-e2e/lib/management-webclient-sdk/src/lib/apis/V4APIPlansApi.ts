/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * Some news resources are in alpha version. This implies that they are likely to be modified or even removed in future versions. They are marked with the üß™ symbol
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NewPlanEntityV4,
  PlanEntityV4,
  PlanSecurityTypeV4,
  UpdatePlanEntityV4,
} from '../models';
import {
    NewPlanEntityV4FromJSON,
    NewPlanEntityV4ToJSON,
    PlanEntityV4FromJSON,
    PlanEntityV4ToJSON,
    PlanSecurityTypeV4FromJSON,
    PlanSecurityTypeV4ToJSON,
    UpdatePlanEntityV4FromJSON,
    UpdatePlanEntityV4ToJSON,
} from '../models';

export interface CloseApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface CreateApiPlan1Request {
    api: string;
    envId: string;
    orgId: string;
    newPlanEntityV4: NewPlanEntityV4;
}

export interface DeleteApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface DeprecateApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface DepreciateApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiPlans1Request {
    status?: Array<GetApiPlans1StatusEnum>;
    security?: Array<PlanSecurityTypeV4>;
    api: string;
    envId: string;
    orgId: string;
}

export interface PublishApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface UpdateApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
    updatePlanEntityV4: UpdatePlanEntityV4;
}

/**
 * 
 */
export class V4APIPlansApi extends runtime.BaseAPI {

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the MANAGE_PLANS permission to use this service
     * üß™ Close  a plan
     */
    async closeApiPlan1Raw(requestParameters: CloseApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling closeApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling closeApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling closeApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling closeApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}/_close`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the MANAGE_PLANS permission to use this service
     * üß™ Close  a plan
     */
    async closeApiPlan1(requestParameters: CloseApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.closeApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the MANAGE_PLANS permission to use this service
     * üß™ Create a plan
     */
    async createApiPlan1Raw(requestParameters: CreateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling createApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApiPlan1.');
        }

        if (requestParameters.newPlanEntityV4 === null || requestParameters.newPlanEntityV4 === undefined) {
            throw new runtime.RequiredError('newPlanEntityV4','Required parameter requestParameters.newPlanEntityV4 was null or undefined when calling createApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewPlanEntityV4ToJSON(requestParameters.newPlanEntityV4),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the MANAGE_PLANS permission to use this service
     * üß™ Create a plan
     */
    async createApiPlan1(requestParameters: CreateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.createApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the MANAGE_PLANS permission to use this service
     * üß™ Delete a plan
     */
    async deleteApiPlan1Raw(requestParameters: DeleteApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling deleteApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deleteApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the MANAGE_PLANS permission to use this service
     * üß™ Delete a plan
     */
    async deleteApiPlan1(requestParameters: DeleteApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiPlan1Raw(requestParameters, initOverrides);
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the API_PLAN[UPDATE] permission to use this service
     * üß™ Deprecate a plan
     */
    async deprecateApiPlan1Raw(requestParameters: DeprecateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling deprecateApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deprecateApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deprecateApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deprecateApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}/_deprecate`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the API_PLAN[UPDATE] permission to use this service
     * üß™ Deprecate a plan
     */
    async deprecateApiPlan1(requestParameters: DeprecateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.deprecateApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the API_PLAN[UPDATE] permission to use this service
     * üß™ Deprecated, use \'_deprecate\' instead. Deprecate a plan
     */
    async depreciateApiPlan1Raw(requestParameters: DepreciateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling depreciateApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling depreciateApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling depreciateApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling depreciateApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}/_depreciate`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the API_PLAN[UPDATE] permission to use this service
     * üß™ Deprecated, use \'_deprecate\' instead. Deprecate a plan
     */
    async depreciateApiPlan1(requestParameters: DepreciateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.depreciateApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the READ permission to use this service
     * üß™ Get a plan
     */
    async getApiPlan1Raw(requestParameters: GetApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling getApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the READ permission to use this service
     * üß™ Get a plan
     */
    async getApiPlan1(requestParameters: GetApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.getApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>List all the plans accessible to the current user.
     * üß™ List plans for an API
     */
    async getApiPlans1Raw(requestParameters: GetApiPlans1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlanEntityV4>>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiPlans1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiPlans1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiPlans1.');
        }

        const queryParameters: any = {};

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.security) {
            queryParameters['security'] = requestParameters.security.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlanEntityV4FromJSON));
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>List all the plans accessible to the current user.
     * üß™ List plans for an API
     */
    async getApiPlans1(requestParameters: GetApiPlans1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlanEntityV4>> {
        const response = await this.getApiPlans1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the MANAGE_PLANS permission to use this service
     * üß™ Publicly publish plan
     */
    async publishApiPlan1Raw(requestParameters: PublishApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling publishApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling publishApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling publishApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling publishApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}/_publish`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the MANAGE_PLANS permission to use this service
     * üß™ Publicly publish plan
     */
    async publishApiPlan1(requestParameters: PublishApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.publishApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the MANAGE_PLANS permission to use this service
     * üß™ Update a plan
     */
    async updateApiPlan1Raw(requestParameters: UpdateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling updateApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updateApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApiPlan1.');
        }

        if (requestParameters.updatePlanEntityV4 === null || requestParameters.updatePlanEntityV4 === undefined) {
            throw new runtime.RequiredError('updatePlanEntityV4','Required parameter requestParameters.updatePlanEntityV4 was null or undefined when calling updateApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePlanEntityV4ToJSON(requestParameters.updatePlanEntityV4),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the MANAGE_PLANS permission to use this service
     * üß™ Update a plan
     */
    async updateApiPlan1(requestParameters: UpdateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.updateApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetApiPlans1StatusEnum = {
    STAGING: 'STAGING',
    PUBLISHED: 'PUBLISHED',
    DEPRECATED: 'DEPRECATED',
    CLOSED: 'CLOSED'
} as const;
export type GetApiPlans1StatusEnum = typeof GetApiPlans1StatusEnum[keyof typeof GetApiPlans1StatusEnum];
