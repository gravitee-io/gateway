/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * Some news resources are in alpha version. This implies that they are likely to be modified or even removed in future versions. They are marked with the 🧪 symbol
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDeploymentEntity,
  ApiEntity,
  ApiEntityV4,
  ApiGroupsWithMembersMap,
  ApiKeyEntity,
  ApiMembership,
  ApiMetadataEntity,
  ApplicationEntity,
  EventEntity,
  EventEntityPage,
  EventType,
  FormDataBodyPart,
  ImportPageEntity,
  LifecycleAction,
  MemberEntity,
  MembershipListItem,
  NewApiEntityV4,
  NewApiMetadataEntity,
  NewPageEntity,
  NewPlanEntityV4,
  NewRatingAnswerEntity,
  NewRatingEntity,
  NewSubscriptionConfigurationEntity,
  PageEntity,
  PageRatingEntity,
  PageType,
  PlanEntityV4,
  PlanSecurityTypeV4,
  ProcessSubscriptionEntity,
  RatingEntity,
  RatingSummaryEntity,
  Subscription,
  SubscriptionEntityPageResult,
  SubscriptionStatus,
  TransferOwnership,
  TransferSubscriptionEntity,
  UpdateApiEntityV4,
  UpdateApiMetadataEntity,
  UpdatePageEntity,
  UpdatePlanEntityV4,
  UpdateRatingEntity,
  UpdateSubscriptionEntity,
} from '../models';
import {
    ApiDeploymentEntityFromJSON,
    ApiDeploymentEntityToJSON,
    ApiEntityFromJSON,
    ApiEntityToJSON,
    ApiEntityV4FromJSON,
    ApiEntityV4ToJSON,
    ApiGroupsWithMembersMapFromJSON,
    ApiGroupsWithMembersMapToJSON,
    ApiKeyEntityFromJSON,
    ApiKeyEntityToJSON,
    ApiMembershipFromJSON,
    ApiMembershipToJSON,
    ApiMetadataEntityFromJSON,
    ApiMetadataEntityToJSON,
    ApplicationEntityFromJSON,
    ApplicationEntityToJSON,
    EventEntityFromJSON,
    EventEntityToJSON,
    EventEntityPageFromJSON,
    EventEntityPageToJSON,
    EventTypeFromJSON,
    EventTypeToJSON,
    FormDataBodyPartFromJSON,
    FormDataBodyPartToJSON,
    ImportPageEntityFromJSON,
    ImportPageEntityToJSON,
    LifecycleActionFromJSON,
    LifecycleActionToJSON,
    MemberEntityFromJSON,
    MemberEntityToJSON,
    MembershipListItemFromJSON,
    MembershipListItemToJSON,
    NewApiEntityV4FromJSON,
    NewApiEntityV4ToJSON,
    NewApiMetadataEntityFromJSON,
    NewApiMetadataEntityToJSON,
    NewPageEntityFromJSON,
    NewPageEntityToJSON,
    NewPlanEntityV4FromJSON,
    NewPlanEntityV4ToJSON,
    NewRatingAnswerEntityFromJSON,
    NewRatingAnswerEntityToJSON,
    NewRatingEntityFromJSON,
    NewRatingEntityToJSON,
    NewSubscriptionConfigurationEntityFromJSON,
    NewSubscriptionConfigurationEntityToJSON,
    PageEntityFromJSON,
    PageEntityToJSON,
    PageRatingEntityFromJSON,
    PageRatingEntityToJSON,
    PageTypeFromJSON,
    PageTypeToJSON,
    PlanEntityV4FromJSON,
    PlanEntityV4ToJSON,
    PlanSecurityTypeV4FromJSON,
    PlanSecurityTypeV4ToJSON,
    ProcessSubscriptionEntityFromJSON,
    ProcessSubscriptionEntityToJSON,
    RatingEntityFromJSON,
    RatingEntityToJSON,
    RatingSummaryEntityFromJSON,
    RatingSummaryEntityToJSON,
    SubscriptionFromJSON,
    SubscriptionToJSON,
    SubscriptionEntityPageResultFromJSON,
    SubscriptionEntityPageResultToJSON,
    SubscriptionStatusFromJSON,
    SubscriptionStatusToJSON,
    TransferOwnershipFromJSON,
    TransferOwnershipToJSON,
    TransferSubscriptionEntityFromJSON,
    TransferSubscriptionEntityToJSON,
    UpdateApiEntityV4FromJSON,
    UpdateApiEntityV4ToJSON,
    UpdateApiMetadataEntityFromJSON,
    UpdateApiMetadataEntityToJSON,
    UpdatePageEntityFromJSON,
    UpdatePageEntityToJSON,
    UpdatePlanEntityV4FromJSON,
    UpdatePlanEntityV4ToJSON,
    UpdateRatingEntityFromJSON,
    UpdateRatingEntityToJSON,
    UpdateSubscriptionEntityFromJSON,
    UpdateSubscriptionEntityToJSON,
} from '../models';

export interface AddOrUpdateApiMember1Request {
    api: string;
    envId: string;
    orgId: string;
    apiMembership: ApiMembership;
}

export interface AttachApiPageMedia1Request {
    page: string;
    api: string;
    envId: string;
    orgId: string;
    file?: FormDataBodyPart;
    fileName?: string;
}

export interface ChangeApiSubscriptionStatus1Request {
    subscription: string;
    status: SubscriptionStatus;
    api: string;
    envId: string;
    orgId: string;
}

export interface CloseApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface CreateApi1Request {
    envId: string;
    orgId: string;
    newApiEntityV4: NewApiEntityV4;
}

export interface CreateApiMetadata1Request {
    api: string;
    envId: string;
    orgId: string;
    newApiMetadataEntity: NewApiMetadataEntity;
}

export interface CreateApiPage1Request {
    api: string;
    envId: string;
    orgId: string;
    newPageEntity: NewPageEntity;
}

export interface CreateApiPlan1Request {
    api: string;
    envId: string;
    orgId: string;
    newPlanEntityV4: NewPlanEntityV4;
}

export interface CreateApiRating1Request {
    api: string;
    envId: string;
    orgId: string;
    newRatingEntity: NewRatingEntity;
}

export interface CreateApiRatingAnswer1Request {
    rating: string;
    api: string;
    envId: string;
    orgId: string;
    newRatingAnswerEntity: NewRatingAnswerEntity;
}

export interface CreateSubscriptionToApi1Request {
    application: string;
    plan: string;
    customApiKey?: string;
    api: string;
    envId: string;
    orgId: string;
    newSubscriptionConfigurationEntity?: NewSubscriptionConfigurationEntity;
}

export interface DeleteApi1Request {
    api: string;
    closePlans?: boolean;
    envId: string;
    orgId: string;
}

export interface DeleteApiMember1Request {
    user: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface DeleteApiMetadata1Request {
    metadata: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface DeleteApiPage1Request {
    page: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface DeleteApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface DeleteApiRating1Request {
    rating: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface DeleteApiRatingAnswer1Request {
    rating: string;
    answer: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface DeployApi1Request {
    api: string;
    envId: string;
    orgId: string;
    apiDeploymentEntity?: ApiDeploymentEntity;
}

export interface DeprecateApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface DepreciateApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface DoApiLifecycleAction1Request {
    api: string;
    action: LifecycleAction;
    envId: string;
    orgId: string;
}

export interface ExportApiSubscriptionsLogsAsCSV1Request {
    plan?: Array<string>;
    application?: Array<string>;
    status?: Array<SubscriptionStatus>;
    apiKey?: string;
    size?: number;
    page?: number;
    api: string;
    envId: string;
    orgId: string;
}

export interface FetchAllApiPages1Request {
    api: string;
    envId: string;
    orgId: string;
}

export interface FetchApiPage1Request {
    page: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApi1Request {
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiEventsEvents1Request {
    type?: Array<EventType>;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiGroupsWithMembers1Request {
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiKeysForApiSubscription1Request {
    subscription: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiMembers1Request {
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiMembersPermissions1Request {
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiMetadata1Request {
    metadata: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiMetadatas1Request {
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiPage1Request {
    page: string;
    acceptLanguage?: string;
    portal?: boolean;
    translated?: boolean;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiPageContent1Request {
    page: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiPageMedia1Request {
    page: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiPages1Request {
    acceptLanguage?: string;
    homepage?: boolean;
    type?: PageType;
    parent?: string;
    name?: string;
    root?: boolean;
    translated?: boolean;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiPlans1Request {
    status?: Array<GetApiPlans1StatusEnum>;
    security?: Array<PlanSecurityTypeV4>;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiRating1Request {
    pageNumber?: number;
    pageSize?: number;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiRatingByApiAndUser1Request {
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiRatingSummaryByApi1Request {
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiSubscribers1Request {
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiSubscription1Request {
    subscription: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetApiSubscriptions1Request {
    plan?: Array<string>;
    application?: Array<string>;
    status?: Array<SubscriptionStatus>;
    apiKey?: string;
    size?: number;
    page?: number;
    expand?: Array<GetApiSubscriptions1ExpandEnum>;
    api: string;
    envId: string;
    orgId: string;
}

export interface GetEvent1Request {
    eventId: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface ImportApiPageFiles1Request {
    api: string;
    envId: string;
    orgId: string;
    importPageEntity: ImportPageEntity;
}

export interface PartialUpdateApiPage1Request {
    page: string;
    api: string;
    envId: string;
    orgId: string;
    updatePageEntity?: UpdatePageEntity;
}

export interface ProcessApiSubscription1Request {
    subscription: string;
    api: string;
    envId: string;
    orgId: string;
    processSubscriptionEntity: ProcessSubscriptionEntity;
}

export interface PublishApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface ReactivateApiKeyForApiSubscription1Request {
    apikey: string;
    subscription: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface RenewSubscriptionApiKeysForApiSubscription1Request {
    subscription: string;
    customApiKey?: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface RevokeApiKeyForApiSubscription1Request {
    apikey: string;
    subscription: string;
    api: string;
    envId: string;
    orgId: string;
}

export interface SearchApiEvents1Request {
    type?: Array<EventType>;
    from?: number;
    to?: number;
    page?: number;
    size?: number;
    apiIds?: Array<string>;
    api: string;
    envId: string;
    orgId: string;
}

export interface TransferApiMemberOwnership1Request {
    api: string;
    envId: string;
    orgId: string;
    transferOwnership: TransferOwnership;
}

export interface TransferApiSubscription1Request {
    subscription: string;
    api: string;
    envId: string;
    orgId: string;
    transferSubscriptionEntity: TransferSubscriptionEntity;
}

export interface UpdateApi1Request {
    api: string;
    envId: string;
    orgId: string;
    updateApiEntityV4: UpdateApiEntityV4;
}

export interface UpdateApiKeyForApiSubscription1Request {
    apikey: string;
    subscription: string;
    api: string;
    envId: string;
    orgId: string;
    apiKeyEntity: ApiKeyEntity;
}

export interface UpdateApiMetadata1Request {
    metadata: string;
    api: string;
    envId: string;
    orgId: string;
    updateApiMetadataEntity: UpdateApiMetadataEntity;
}

export interface UpdateApiPage1Request {
    page: string;
    api: string;
    envId: string;
    orgId: string;
    updatePageEntity: UpdatePageEntity;
}

export interface UpdateApiPageImportFiles1Request {
    api: string;
    envId: string;
    orgId: string;
    importPageEntity: ImportPageEntity;
}

export interface UpdateApiPlan1Request {
    plan: string;
    api: string;
    envId: string;
    orgId: string;
    updatePlanEntityV4: UpdatePlanEntityV4;
}

export interface UpdateApiRating1Request {
    rating: string;
    api: string;
    envId: string;
    orgId: string;
    updateRatingEntity: UpdateRatingEntity;
}

export interface UpdateApiSubscription1Request {
    subscription: string;
    api: string;
    envId: string;
    orgId: string;
    updateSubscriptionEntity: UpdateSubscriptionEntity;
}

export interface UpdatePageContent2Request {
    page: string;
    api: string;
    envId: string;
    orgId: string;
    body: string;
}

export interface VerifyApiKeyCreation1Request {
    key: string;
    application: string;
    api: string;
    envId: string;
    orgId: string;
}

/**
 * 
 */
export class V4APIsApi extends runtime.BaseAPI {

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Add or update an API member
     */
    async addOrUpdateApiMember1Raw(requestParameters: AddOrUpdateApiMember1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling addOrUpdateApiMember1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling addOrUpdateApiMember1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling addOrUpdateApiMember1.');
        }

        if (requestParameters.apiMembership === null || requestParameters.apiMembership === undefined) {
            throw new runtime.RequiredError('apiMembership','Required parameter requestParameters.apiMembership was null or undefined when calling addOrUpdateApiMember1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/members`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiMembershipToJSON(requestParameters.apiMembership),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Add or update an API member
     */
    async addOrUpdateApiMember1(requestParameters: AddOrUpdateApiMember1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addOrUpdateApiMember1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the API_DOCUMENTATION[UPDATE] permission to use this service
     * Attach a media to an API page 
     */
    async attachApiPageMedia1Raw(requestParameters: AttachApiPageMedia1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling attachApiPageMedia1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling attachApiPageMedia1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling attachApiPageMedia1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling attachApiPageMedia1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', new Blob([JSON.stringify(FormDataBodyPartToJSON(requestParameters.file))], { type: "application/json", }));
                    }

        if (requestParameters.fileName !== undefined) {
            formParams.append('fileName', requestParameters.fileName as any);
        }

        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages/{page}/media`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_DOCUMENTATION[UPDATE] permission to use this service
     * Attach a media to an API page 
     */
    async attachApiPageMedia1(requestParameters: AttachApiPageMedia1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.attachApiPageMedia1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Change the status of a subscription
     */
    async changeApiSubscriptionStatus1Raw(requestParameters: ChangeApiSubscriptionStatus1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling changeApiSubscriptionStatus1.');
        }

        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling changeApiSubscriptionStatus1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling changeApiSubscriptionStatus1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling changeApiSubscriptionStatus1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling changeApiSubscriptionStatus1.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions/{subscription}/status`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Change the status of a subscription
     */
    async changeApiSubscriptionStatus1(requestParameters: ChangeApiSubscriptionStatus1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.changeApiSubscriptionStatus1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_PLANS permission to use this service
     * 🧪 Close  a plan
     */
    async closeApiPlan1Raw(requestParameters: CloseApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling closeApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling closeApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling closeApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling closeApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}/_close`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_PLANS permission to use this service
     * 🧪 Close  a plan
     */
    async closeApiPlan1(requestParameters: CloseApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.closeApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have API_PUBLISHER or ADMIN role to create an API.
     * 🧪 Create an API
     */
    async createApi1Raw(requestParameters: CreateApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiEntityV4>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApi1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApi1.');
        }

        if (requestParameters.newApiEntityV4 === null || requestParameters.newApiEntityV4 === undefined) {
            throw new runtime.RequiredError('newApiEntityV4','Required parameter requestParameters.newApiEntityV4 was null or undefined when calling createApi1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewApiEntityV4ToJSON(requestParameters.newApiEntityV4),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityV4FromJSON(jsonValue));
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have API_PUBLISHER or ADMIN role to create an API.
     * 🧪 Create an API
     */
    async createApi1(requestParameters: CreateApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiEntityV4> {
        const response = await this.createApi1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_METADATA[CREATE] permission to use this service
     * Create an API metadata
     */
    async createApiMetadata1Raw(requestParameters: CreateApiMetadata1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiMetadataEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling createApiMetadata1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApiMetadata1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApiMetadata1.');
        }

        if (requestParameters.newApiMetadataEntity === null || requestParameters.newApiMetadataEntity === undefined) {
            throw new runtime.RequiredError('newApiMetadataEntity','Required parameter requestParameters.newApiMetadataEntity was null or undefined when calling createApiMetadata1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/metadata`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewApiMetadataEntityToJSON(requestParameters.newApiMetadataEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiMetadataEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_METADATA[CREATE] permission to use this service
     * Create an API metadata
     */
    async createApiMetadata1(requestParameters: CreateApiMetadata1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiMetadataEntity> {
        const response = await this.createApiMetadata1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Create a page
     */
    async createApiPage1Raw(requestParameters: CreateApiPage1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling createApiPage1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApiPage1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApiPage1.');
        }

        if (requestParameters.newPageEntity === null || requestParameters.newPageEntity === undefined) {
            throw new runtime.RequiredError('newPageEntity','Required parameter requestParameters.newPageEntity was null or undefined when calling createApiPage1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewPageEntityToJSON(requestParameters.newPageEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Create a page
     */
    async createApiPage1(requestParameters: CreateApiPage1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.createApiPage1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_PLANS permission to use this service
     * 🧪 Create a plan
     */
    async createApiPlan1Raw(requestParameters: CreateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling createApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApiPlan1.');
        }

        if (requestParameters.newPlanEntityV4 === null || requestParameters.newPlanEntityV4 === undefined) {
            throw new runtime.RequiredError('newPlanEntityV4','Required parameter requestParameters.newPlanEntityV4 was null or undefined when calling createApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewPlanEntityV4ToJSON(requestParameters.newPlanEntityV4),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_PLANS permission to use this service
     * 🧪 Create a plan
     */
    async createApiPlan1(requestParameters: CreateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.createApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_RATING[CREATE] permission to use this service
     * Create a new rating for an API
     */
    async createApiRating1Raw(requestParameters: CreateApiRating1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling createApiRating1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApiRating1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApiRating1.');
        }

        if (requestParameters.newRatingEntity === null || requestParameters.newRatingEntity === undefined) {
            throw new runtime.RequiredError('newRatingEntity','Required parameter requestParameters.newRatingEntity was null or undefined when calling createApiRating1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/ratings`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRatingEntityToJSON(requestParameters.newRatingEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_RATING[CREATE] permission to use this service
     * Create a new rating for an API
     */
    async createApiRating1(requestParameters: CreateApiRating1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingEntity> {
        const response = await this.createApiRating1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_RATING_ANSWER[CREATE] permission to use this service
     * Create an answer to a rating for an API
     */
    async createApiRatingAnswer1Raw(requestParameters: CreateApiRatingAnswer1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingEntity>> {
        if (requestParameters.rating === null || requestParameters.rating === undefined) {
            throw new runtime.RequiredError('rating','Required parameter requestParameters.rating was null or undefined when calling createApiRatingAnswer1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling createApiRatingAnswer1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createApiRatingAnswer1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createApiRatingAnswer1.');
        }

        if (requestParameters.newRatingAnswerEntity === null || requestParameters.newRatingAnswerEntity === undefined) {
            throw new runtime.RequiredError('newRatingAnswerEntity','Required parameter requestParameters.newRatingAnswerEntity was null or undefined when calling createApiRatingAnswer1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/ratings/{rating}/answers`.replace(`{${"rating"}}`, encodeURIComponent(String(requestParameters.rating))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRatingAnswerEntityToJSON(requestParameters.newRatingAnswerEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_RATING_ANSWER[CREATE] permission to use this service
     * Create an answer to a rating for an API
     */
    async createApiRatingAnswer1(requestParameters: CreateApiRatingAnswer1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingEntity> {
        const response = await this.createApiRatingAnswer1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_SUBSCRIPTIONS permission to use this service
     * Subscribe to a plan
     */
    async createSubscriptionToApi1Raw(requestParameters: CreateSubscriptionToApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling createSubscriptionToApi1.');
        }

        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling createSubscriptionToApi1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling createSubscriptionToApi1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling createSubscriptionToApi1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createSubscriptionToApi1.');
        }

        const queryParameters: any = {};

        if (requestParameters.application !== undefined) {
            queryParameters['application'] = requestParameters.application;
        }

        if (requestParameters.plan !== undefined) {
            queryParameters['plan'] = requestParameters.plan;
        }

        if (requestParameters.customApiKey !== undefined) {
            queryParameters['customApiKey'] = requestParameters.customApiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewSubscriptionConfigurationEntityToJSON(requestParameters.newSubscriptionConfigurationEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_SUBSCRIPTIONS permission to use this service
     * Subscribe to a plan
     */
    async createSubscriptionToApi1(requestParameters: CreateSubscriptionToApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.createSubscriptionToApi1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the DELETE permission to use this service
     * 🧪 Delete the API
     */
    async deleteApi1Raw(requestParameters: DeleteApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deleteApi1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApi1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApi1.');
        }

        const queryParameters: any = {};

        if (requestParameters.closePlans !== undefined) {
            queryParameters['closePlans'] = requestParameters.closePlans;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the DELETE permission to use this service
     * 🧪 Delete the API
     */
    async deleteApi1(requestParameters: DeleteApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApi1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Remove an API member
     */
    async deleteApiMember1Raw(requestParameters: DeleteApiMember1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling deleteApiMember1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deleteApiMember1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApiMember1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApiMember1.');
        }

        const queryParameters: any = {};

        if (requestParameters.user !== undefined) {
            queryParameters['user'] = requestParameters.user;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/members`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Remove an API member
     */
    async deleteApiMember1(requestParameters: DeleteApiMember1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiMember1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the API_METADATA[DELETE] permission to use this service
     * Delete a metadata
     */
    async deleteApiMetadata1Raw(requestParameters: DeleteApiMetadata1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.metadata === null || requestParameters.metadata === undefined) {
            throw new runtime.RequiredError('metadata','Required parameter requestParameters.metadata was null or undefined when calling deleteApiMetadata1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deleteApiMetadata1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApiMetadata1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApiMetadata1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/metadata/{metadata}`.replace(`{${"metadata"}}`, encodeURIComponent(String(requestParameters.metadata))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the API_METADATA[DELETE] permission to use this service
     * Delete a metadata
     */
    async deleteApiMetadata1(requestParameters: DeleteApiMetadata1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiMetadata1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Delete a page
     */
    async deleteApiPage1Raw(requestParameters: DeleteApiPage1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling deleteApiPage1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deleteApiPage1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApiPage1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApiPage1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Delete a page
     */
    async deleteApiPage1(requestParameters: DeleteApiPage1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiPage1Raw(requestParameters, initOverrides);
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_PLANS permission to use this service
     * 🧪 Delete a plan
     */
    async deleteApiPlan1Raw(requestParameters: DeleteApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling deleteApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deleteApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_PLANS permission to use this service
     * 🧪 Delete a plan
     */
    async deleteApiPlan1(requestParameters: DeleteApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiPlan1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the API_RATING[DELETE] permission to use this service
     * Delete an existing rating for an API
     */
    async deleteApiRating1Raw(requestParameters: DeleteApiRating1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.rating === null || requestParameters.rating === undefined) {
            throw new runtime.RequiredError('rating','Required parameter requestParameters.rating was null or undefined when calling deleteApiRating1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deleteApiRating1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApiRating1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApiRating1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/ratings/{rating}`.replace(`{${"rating"}}`, encodeURIComponent(String(requestParameters.rating))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the API_RATING[DELETE] permission to use this service
     * Delete an existing rating for an API
     */
    async deleteApiRating1(requestParameters: DeleteApiRating1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiRating1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the API_RATING_ANSWER[DELETE] permission to use this service
     * Delete an answer to a rating for an API
     */
    async deleteApiRatingAnswer1Raw(requestParameters: DeleteApiRatingAnswer1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.rating === null || requestParameters.rating === undefined) {
            throw new runtime.RequiredError('rating','Required parameter requestParameters.rating was null or undefined when calling deleteApiRatingAnswer1.');
        }

        if (requestParameters.answer === null || requestParameters.answer === undefined) {
            throw new runtime.RequiredError('answer','Required parameter requestParameters.answer was null or undefined when calling deleteApiRatingAnswer1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deleteApiRatingAnswer1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deleteApiRatingAnswer1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteApiRatingAnswer1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/ratings/{rating}/answers/{answer}`.replace(`{${"rating"}}`, encodeURIComponent(String(requestParameters.rating))).replace(`{${"answer"}}`, encodeURIComponent(String(requestParameters.answer))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the API_RATING_ANSWER[DELETE] permission to use this service
     * Delete an answer to a rating for an API
     */
    async deleteApiRatingAnswer1(requestParameters: DeleteApiRatingAnswer1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiRatingAnswer1Raw(requestParameters, initOverrides);
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_LIFECYCLE permission to use this service
     * 🧪 Deploy API to gateway instances
     */
    async deployApi1Raw(requestParameters: DeployApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deployApi1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deployApi1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deployApi1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/deploy`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiDeploymentEntityToJSON(requestParameters.apiDeploymentEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_LIFECYCLE permission to use this service
     * 🧪 Deploy API to gateway instances
     */
    async deployApi1(requestParameters: DeployApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiEntity> {
        const response = await this.deployApi1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the API_PLAN[UPDATE] permission to use this service
     * 🧪 Deprecate a plan
     */
    async deprecateApiPlan1Raw(requestParameters: DeprecateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling deprecateApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling deprecateApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling deprecateApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deprecateApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}/_deprecate`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the API_PLAN[UPDATE] permission to use this service
     * 🧪 Deprecate a plan
     */
    async deprecateApiPlan1(requestParameters: DeprecateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.deprecateApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the API_PLAN[UPDATE] permission to use this service
     * 🧪 Deprecated, use \'_deprecate\' instead. Deprecate a plan
     */
    async depreciateApiPlan1Raw(requestParameters: DepreciateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling depreciateApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling depreciateApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling depreciateApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling depreciateApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}/_depreciate`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the API_PLAN[UPDATE] permission to use this service
     * 🧪 Deprecated, use \'_deprecate\' instead. Deprecate a plan
     */
    async depreciateApiPlan1(requestParameters: DepreciateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.depreciateApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_LIFECYCLE permission to use this service
     * 🧪 Manage the API\'s lifecycle
     */
    async doApiLifecycleAction1Raw(requestParameters: DoApiLifecycleAction1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling doApiLifecycleAction1.');
        }

        if (requestParameters.action === null || requestParameters.action === undefined) {
            throw new runtime.RequiredError('action','Required parameter requestParameters.action was null or undefined when calling doApiLifecycleAction1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling doApiLifecycleAction1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling doApiLifecycleAction1.');
        }

        const queryParameters: any = {};

        if (requestParameters.action !== undefined) {
            queryParameters['action'] = requestParameters.action;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_LIFECYCLE permission to use this service
     * 🧪 Manage the API\'s lifecycle
     */
    async doApiLifecycleAction1(requestParameters: DoApiLifecycleAction1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.doApiLifecycleAction1Raw(requestParameters, initOverrides);
    }

    /**
     * Export API logs as CSV
     */
    async exportApiSubscriptionsLogsAsCSV1Raw(requestParameters: ExportApiSubscriptionsLogsAsCSV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling exportApiSubscriptionsLogsAsCSV1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling exportApiSubscriptionsLogsAsCSV1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling exportApiSubscriptionsLogsAsCSV1.');
        }

        const queryParameters: any = {};

        if (requestParameters.plan) {
            queryParameters['plan'] = requestParameters.plan.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.application) {
            queryParameters['application'] = requestParameters.application.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.apiKey !== undefined) {
            queryParameters['api_key'] = requestParameters.apiKey;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions/export`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Export API logs as CSV
     */
    async exportApiSubscriptionsLogsAsCSV1(requestParameters: ExportApiSubscriptionsLogsAsCSV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.exportApiSubscriptionsLogsAsCSV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Refresh all pages by calling their associated fetcher
     */
    async fetchAllApiPages1Raw(requestParameters: FetchAllApiPages1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling fetchAllApiPages1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling fetchAllApiPages1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling fetchAllApiPages1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages/_fetch`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Refresh all pages by calling their associated fetcher
     */
    async fetchAllApiPages1(requestParameters: FetchAllApiPages1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.fetchAllApiPages1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Refresh page by calling the associated fetcher
     */
    async fetchApiPage1Raw(requestParameters: FetchApiPage1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling fetchApiPage1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling fetchApiPage1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling fetchApiPage1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling fetchApiPage1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages/{page}/_fetch`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Refresh page by calling the associated fetcher
     */
    async fetchApiPage1(requestParameters: FetchApiPage1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.fetchApiPage1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the READ permission on the API_DEFINITION to use this service on a private API.
     * 🧪 Get the API
     */
    async getApi1Raw(requestParameters: GetApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiEntityV4>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApi1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApi1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApi1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityV4FromJSON(jsonValue));
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the READ permission on the API_DEFINITION to use this service on a private API.
     * 🧪 Get the API
     */
    async getApi1(requestParameters: GetApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiEntityV4> {
        const response = await this.getApi1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_LIFECYCLE permission to use this service
     * Get API\'s events
     */
    async getApiEventsEvents1Raw(requestParameters: GetApiEventsEvents1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EventEntity>>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiEventsEvents1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiEventsEvents1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiEventsEvents1.');
        }

        const queryParameters: any = {};

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/events`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventEntityFromJSON));
    }

    /**
     * User must have the MANAGE_LIFECYCLE permission to use this service
     * Get API\'s events
     */
    async getApiEventsEvents1(requestParameters: GetApiEventsEvents1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EventEntity>> {
        const response = await this.getApiEventsEvents1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Get API groups mapped to members
     */
    async getApiGroupsWithMembers1Raw(requestParameters: GetApiGroupsWithMembers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiGroupsWithMembersMap>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiGroupsWithMembers1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiGroupsWithMembers1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiGroupsWithMembers1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/groups`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiGroupsWithMembersMapFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Get API groups mapped to members
     */
    async getApiGroupsWithMembers1(requestParameters: GetApiGroupsWithMembers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiGroupsWithMembersMap> {
        const response = await this.getApiGroupsWithMembers1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * List all API Keys for a subscription
     */
    async getApiKeysForApiSubscription1Raw(requestParameters: GetApiKeysForApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiKeyEntity>>> {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling getApiKeysForApiSubscription1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiKeysForApiSubscription1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiKeysForApiSubscription1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiKeysForApiSubscription1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions/{subscription}/apikeys`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiKeyEntityFromJSON));
    }

    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * List all API Keys for a subscription
     */
    async getApiKeysForApiSubscription1(requestParameters: GetApiKeysForApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiKeyEntity>> {
        const response = await this.getApiKeysForApiSubscription1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * List API members
     */
    async getApiMembers1Raw(requestParameters: GetApiMembers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MembershipListItem>>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiMembers1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiMembers1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiMembers1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/members`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MembershipListItemFromJSON));
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * List API members
     */
    async getApiMembers1(requestParameters: GetApiMembers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MembershipListItem>> {
        const response = await this.getApiMembers1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Get API members
     */
    async getApiMembersPermissions1Raw(requestParameters: GetApiMembersPermissions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MemberEntity>>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiMembersPermissions1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiMembersPermissions1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiMembersPermissions1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/members/permissions`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemberEntityFromJSON));
    }

    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Get API members
     */
    async getApiMembersPermissions1(requestParameters: GetApiMembersPermissions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MemberEntity>> {
        const response = await this.getApiMembersPermissions1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_METADATA[READ] permission to use this service
     * A metadata for the given API and metadata id
     */
    async getApiMetadata1Raw(requestParameters: GetApiMetadata1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiMetadataEntity>> {
        if (requestParameters.metadata === null || requestParameters.metadata === undefined) {
            throw new runtime.RequiredError('metadata','Required parameter requestParameters.metadata was null or undefined when calling getApiMetadata1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiMetadata1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiMetadata1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiMetadata1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/metadata/{metadata}`.replace(`{${"metadata"}}`, encodeURIComponent(String(requestParameters.metadata))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiMetadataEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_METADATA[READ] permission to use this service
     * A metadata for the given API and metadata id
     */
    async getApiMetadata1(requestParameters: GetApiMetadata1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiMetadataEntity> {
        const response = await this.getApiMetadata1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_METADATA[READ] permission to use this service
     * List metadata for the given API
     */
    async getApiMetadatas1Raw(requestParameters: GetApiMetadatas1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiMetadataEntity>>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiMetadatas1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiMetadatas1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiMetadatas1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/metadata`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiMetadataEntityFromJSON));
    }

    /**
     * User must have the API_METADATA[READ] permission to use this service
     * List metadata for the given API
     */
    async getApiMetadatas1(requestParameters: GetApiMetadatas1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiMetadataEntity>> {
        const response = await this.getApiMetadatas1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * Get a page
     */
    async getApiPage1Raw(requestParameters: GetApiPage1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getApiPage1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiPage1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiPage1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiPage1.');
        }

        const queryParameters: any = {};

        if (requestParameters.portal !== undefined) {
            queryParameters['portal'] = requestParameters.portal;
        }

        if (requestParameters.translated !== undefined) {
            queryParameters['translated'] = requestParameters.translated;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the READ permission to use this service
     * Get a page
     */
    async getApiPage1(requestParameters: GetApiPage1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.getApiPage1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the READ permission to use this service
     * Get the page\'s content
     */
    async getApiPageContent1Raw(requestParameters: GetApiPageContent1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getApiPageContent1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiPageContent1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiPageContent1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiPageContent1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages/{page}/content`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the READ permission to use this service
     * Get the page\'s content
     */
    async getApiPageContent1(requestParameters: GetApiPageContent1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getApiPageContent1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_DOCUMENTATION[READ] permission to use this service
     * Retrieve all media for an API page
     */
    async getApiPageMedia1Raw(requestParameters: GetApiPageMedia1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getApiPageMedia1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiPageMedia1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiPageMedia1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiPageMedia1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages/{page}/media`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the API_DOCUMENTATION[READ] permission to use this service
     * Retrieve all media for an API page
     */
    async getApiPageMedia1(requestParameters: GetApiPageMedia1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiPageMedia1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the READ permission to use this service
     * List pages
     */
    async getApiPages1Raw(requestParameters: GetApiPages1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PageEntity>>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiPages1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiPages1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiPages1.');
        }

        const queryParameters: any = {};

        if (requestParameters.homepage !== undefined) {
            queryParameters['homepage'] = requestParameters.homepage;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.root !== undefined) {
            queryParameters['root'] = requestParameters.root;
        }

        if (requestParameters.translated !== undefined) {
            queryParameters['translated'] = requestParameters.translated;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PageEntityFromJSON));
    }

    /**
     * User must have the READ permission to use this service
     * List pages
     */
    async getApiPages1(requestParameters: GetApiPages1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PageEntity>> {
        const response = await this.getApiPages1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the READ permission to use this service
     * 🧪 Get a plan
     */
    async getApiPlan1Raw(requestParameters: GetApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling getApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the READ permission to use this service
     * 🧪 Get a plan
     */
    async getApiPlan1(requestParameters: GetApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.getApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>List all the plans accessible to the current user.
     * 🧪 List plans for an API
     */
    async getApiPlans1Raw(requestParameters: GetApiPlans1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlanEntityV4>>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiPlans1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiPlans1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiPlans1.');
        }

        const queryParameters: any = {};

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.security) {
            queryParameters['security'] = requestParameters.security.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlanEntityV4FromJSON));
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>List all the plans accessible to the current user.
     * 🧪 List plans for an API
     */
    async getApiPlans1(requestParameters: GetApiPlans1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlanEntityV4>> {
        const response = await this.getApiPlans1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List ratings for an API
     */
    async getApiRating1Raw(requestParameters: GetApiRating1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageRatingEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiRating1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiRating1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiRating1.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/ratings`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageRatingEntityFromJSON(jsonValue));
    }

    /**
     * List ratings for an API
     */
    async getApiRating1(requestParameters: GetApiRating1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageRatingEntity> {
        const response = await this.getApiRating1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve current rating for an API provided by the authenticated user
     */
    async getApiRatingByApiAndUser1Raw(requestParameters: GetApiRatingByApiAndUser1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiRatingByApiAndUser1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiRatingByApiAndUser1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiRatingByApiAndUser1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/ratings/current`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingEntityFromJSON(jsonValue));
    }

    /**
     * Retrieve current rating for an API provided by the authenticated user
     */
    async getApiRatingByApiAndUser1(requestParameters: GetApiRatingByApiAndUser1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingEntity> {
        const response = await this.getApiRatingByApiAndUser1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the rating summary for an API
     */
    async getApiRatingSummaryByApi1Raw(requestParameters: GetApiRatingSummaryByApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingSummaryEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiRatingSummaryByApi1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiRatingSummaryByApi1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiRatingSummaryByApi1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/ratings/summary`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingSummaryEntityFromJSON(jsonValue));
    }

    /**
     * Get the rating summary for an API
     */
    async getApiRatingSummaryByApi1(requestParameters: GetApiRatingSummaryByApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingSummaryEntity> {
        const response = await this.getApiRatingSummaryByApi1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_SUBSCRIPTIONS permission to use this service
     * List subscribers for the API
     */
    async getApiSubscribers1Raw(requestParameters: GetApiSubscribers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApplicationEntity>>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiSubscribers1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiSubscribers1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiSubscribers1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscribers`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationEntityFromJSON));
    }

    /**
     * User must have the MANAGE_SUBSCRIPTIONS permission to use this service
     * List subscribers for the API
     */
    async getApiSubscribers1(requestParameters: GetApiSubscribers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApplicationEntity>> {
        const response = await this.getApiSubscribers1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Get a subscription
     */
    async getApiSubscription1Raw(requestParameters: GetApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling getApiSubscription1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiSubscription1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiSubscription1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiSubscription1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions/{subscription}`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Get a subscription
     */
    async getApiSubscription1(requestParameters: GetApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.getApiSubscription1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the READ_SUBSCRIPTION permission to use this service
     * List subscriptions for the API
     */
    async getApiSubscriptions1Raw(requestParameters: GetApiSubscriptions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionEntityPageResult>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getApiSubscriptions1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getApiSubscriptions1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getApiSubscriptions1.');
        }

        const queryParameters: any = {};

        if (requestParameters.plan) {
            queryParameters['plan'] = requestParameters.plan.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.application) {
            queryParameters['application'] = requestParameters.application.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.apiKey !== undefined) {
            queryParameters['api_key'] = requestParameters.apiKey;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionEntityPageResultFromJSON(jsonValue));
    }

    /**
     * User must have the READ_SUBSCRIPTION permission to use this service
     * List subscriptions for the API
     */
    async getApiSubscriptions1(requestParameters: GetApiSubscriptions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionEntityPageResult> {
        const response = await this.getApiSubscriptions1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the READ API_EVENT permission to use this service
     * Get an API event with its id
     */
    async getEvent1Raw(requestParameters: GetEvent1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventEntity>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getEvent1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling getEvent1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEvent1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEvent1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/events/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventEntityFromJSON(jsonValue));
    }

    /**
     * User must have the READ API_EVENT permission to use this service
     * Get an API event with its id
     */
    async getEvent1(requestParameters: GetEvent1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventEntity> {
        const response = await this.getEvent1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must be ADMIN to use this service
     * Import pages
     */
    async importApiPageFiles1Raw(requestParameters: ImportApiPageFiles1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling importApiPageFiles1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling importApiPageFiles1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling importApiPageFiles1.');
        }

        if (requestParameters.importPageEntity === null || requestParameters.importPageEntity === undefined) {
            throw new runtime.RequiredError('importPageEntity','Required parameter requestParameters.importPageEntity was null or undefined when calling importApiPageFiles1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages/_import`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportPageEntityToJSON(requestParameters.importPageEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must be ADMIN to use this service
     * Import pages
     */
    async importApiPageFiles1(requestParameters: ImportApiPageFiles1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.importApiPageFiles1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Update a page
     */
    async partialUpdateApiPage1Raw(requestParameters: PartialUpdateApiPage1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling partialUpdateApiPage1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling partialUpdateApiPage1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling partialUpdateApiPage1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling partialUpdateApiPage1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePageEntityToJSON(requestParameters.updatePageEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Update a page
     */
    async partialUpdateApiPage1(requestParameters: PartialUpdateApiPage1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.partialUpdateApiPage1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Update a subscription
     */
    async processApiSubscription1Raw(requestParameters: ProcessApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling processApiSubscription1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling processApiSubscription1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling processApiSubscription1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling processApiSubscription1.');
        }

        if (requestParameters.processSubscriptionEntity === null || requestParameters.processSubscriptionEntity === undefined) {
            throw new runtime.RequiredError('processSubscriptionEntity','Required parameter requestParameters.processSubscriptionEntity was null or undefined when calling processApiSubscription1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions/{subscription}/_process`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessSubscriptionEntityToJSON(requestParameters.processSubscriptionEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Update a subscription
     */
    async processApiSubscription1(requestParameters: ProcessApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.processApiSubscription1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_PLANS permission to use this service
     * 🧪 Publicly publish plan
     */
    async publishApiPlan1Raw(requestParameters: PublishApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling publishApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling publishApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling publishApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling publishApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}/_publish`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_PLANS permission to use this service
     * 🧪 Publicly publish plan
     */
    async publishApiPlan1(requestParameters: PublishApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.publishApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_SUBSCRIPTION permission to use this service
     * Reactivate an API key
     */
    async reactivateApiKeyForApiSubscription1Raw(requestParameters: ReactivateApiKeyForApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apikey === null || requestParameters.apikey === undefined) {
            throw new runtime.RequiredError('apikey','Required parameter requestParameters.apikey was null or undefined when calling reactivateApiKeyForApiSubscription1.');
        }

        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling reactivateApiKeyForApiSubscription1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling reactivateApiKeyForApiSubscription1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling reactivateApiKeyForApiSubscription1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling reactivateApiKeyForApiSubscription1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions/{subscription}/apikeys/{apikey}/_reactivate`.replace(`{${"apikey"}}`, encodeURIComponent(String(requestParameters.apikey))).replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the API_SUBSCRIPTION permission to use this service
     * Reactivate an API key
     */
    async reactivateApiKeyForApiSubscription1(requestParameters: ReactivateApiKeyForApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.reactivateApiKeyForApiSubscription1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * Renew an API key
     */
    async renewSubscriptionApiKeysForApiSubscription1Raw(requestParameters: RenewSubscriptionApiKeysForApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKeyEntity>> {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling renewSubscriptionApiKeysForApiSubscription1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling renewSubscriptionApiKeysForApiSubscription1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling renewSubscriptionApiKeysForApiSubscription1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling renewSubscriptionApiKeysForApiSubscription1.');
        }

        const queryParameters: any = {};

        if (requestParameters.customApiKey !== undefined) {
            queryParameters['customApiKey'] = requestParameters.customApiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions/{subscription}/apikeys/_renew`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * Renew an API key
     */
    async renewSubscriptionApiKeysForApiSubscription1(requestParameters: RenewSubscriptionApiKeysForApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKeyEntity> {
        const response = await this.renewSubscriptionApiKeysForApiSubscription1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_SUBSCRIPTION:DELETE permission to use this service
     * Revoke API key
     */
    async revokeApiKeyForApiSubscription1Raw(requestParameters: RevokeApiKeyForApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apikey === null || requestParameters.apikey === undefined) {
            throw new runtime.RequiredError('apikey','Required parameter requestParameters.apikey was null or undefined when calling revokeApiKeyForApiSubscription1.');
        }

        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling revokeApiKeyForApiSubscription1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling revokeApiKeyForApiSubscription1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling revokeApiKeyForApiSubscription1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling revokeApiKeyForApiSubscription1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions/{subscription}/apikeys/{apikey}`.replace(`{${"apikey"}}`, encodeURIComponent(String(requestParameters.apikey))).replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the API_SUBSCRIPTION:DELETE permission to use this service
     * Revoke API key
     */
    async revokeApiKeyForApiSubscription1(requestParameters: RevokeApiKeyForApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeApiKeyForApiSubscription1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the API_EVENT[READ] permission to use this service
     * Get API\'s events
     */
    async searchApiEvents1Raw(requestParameters: SearchApiEvents1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventEntityPage>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling searchApiEvents1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling searchApiEvents1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling searchApiEvents1.');
        }

        const queryParameters: any = {};

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.apiIds) {
            queryParameters['api_ids'] = requestParameters.apiIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/events/search`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventEntityPageFromJSON(jsonValue));
    }

    /**
     * User must have the API_EVENT[READ] permission to use this service
     * Get API\'s events
     */
    async searchApiEvents1(requestParameters: SearchApiEvents1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventEntityPage> {
        const response = await this.searchApiEvents1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the TRANSFER_OWNERSHIP permission to use this service
     * Transfer the ownership of the API
     */
    async transferApiMemberOwnership1Raw(requestParameters: TransferApiMemberOwnership1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling transferApiMemberOwnership1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling transferApiMemberOwnership1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling transferApiMemberOwnership1.');
        }

        if (requestParameters.transferOwnership === null || requestParameters.transferOwnership === undefined) {
            throw new runtime.RequiredError('transferOwnership','Required parameter requestParameters.transferOwnership was null or undefined when calling transferApiMemberOwnership1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/members/transfer_ownership`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferOwnershipToJSON(requestParameters.transferOwnership),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the TRANSFER_OWNERSHIP permission to use this service
     * Transfer the ownership of the API
     */
    async transferApiMemberOwnership1(requestParameters: TransferApiMemberOwnership1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transferApiMemberOwnership1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the API_SUBSCRIPTION update permission to use this service
     * Transfer a subscription
     */
    async transferApiSubscription1Raw(requestParameters: TransferApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling transferApiSubscription1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling transferApiSubscription1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling transferApiSubscription1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling transferApiSubscription1.');
        }

        if (requestParameters.transferSubscriptionEntity === null || requestParameters.transferSubscriptionEntity === undefined) {
            throw new runtime.RequiredError('transferSubscriptionEntity','Required parameter requestParameters.transferSubscriptionEntity was null or undefined when calling transferApiSubscription1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions/{subscription}/_transfer`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferSubscriptionEntityToJSON(requestParameters.transferSubscriptionEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * User must have the API_SUBSCRIPTION update permission to use this service
     * Transfer a subscription
     */
    async transferApiSubscription1(requestParameters: TransferApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.transferApiSubscription1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_API permission to use this service
     * 🧪 Update the API
     */
    async updateApi1Raw(requestParameters: UpdateApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updateApi1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApi1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApi1.');
        }

        if (requestParameters.updateApiEntityV4 === null || requestParameters.updateApiEntityV4 === undefined) {
            throw new runtime.RequiredError('updateApiEntityV4','Required parameter requestParameters.updateApiEntityV4 was null or undefined when calling updateApi1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApiEntityV4ToJSON(requestParameters.updateApiEntityV4),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_API permission to use this service
     * 🧪 Update the API
     */
    async updateApi1(requestParameters: UpdateApi1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiEntity> {
        const response = await this.updateApi1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_SUBSCRIPTION:UPDATE permission to use this service
     * Update API Key
     */
    async updateApiKeyForApiSubscription1Raw(requestParameters: UpdateApiKeyForApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKeyEntity>> {
        if (requestParameters.apikey === null || requestParameters.apikey === undefined) {
            throw new runtime.RequiredError('apikey','Required parameter requestParameters.apikey was null or undefined when calling updateApiKeyForApiSubscription1.');
        }

        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling updateApiKeyForApiSubscription1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updateApiKeyForApiSubscription1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApiKeyForApiSubscription1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApiKeyForApiSubscription1.');
        }

        if (requestParameters.apiKeyEntity === null || requestParameters.apiKeyEntity === undefined) {
            throw new runtime.RequiredError('apiKeyEntity','Required parameter requestParameters.apiKeyEntity was null or undefined when calling updateApiKeyForApiSubscription1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions/{subscription}/apikeys/{apikey}`.replace(`{${"apikey"}}`, encodeURIComponent(String(requestParameters.apikey))).replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiKeyEntityToJSON(requestParameters.apiKeyEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_SUBSCRIPTION:UPDATE permission to use this service
     * Update API Key
     */
    async updateApiKeyForApiSubscription1(requestParameters: UpdateApiKeyForApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKeyEntity> {
        const response = await this.updateApiKeyForApiSubscription1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_METADATA[UPDATE] permission to use this service
     * Update an API metadata
     */
    async updateApiMetadata1Raw(requestParameters: UpdateApiMetadata1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiMetadataEntity>> {
        if (requestParameters.metadata === null || requestParameters.metadata === undefined) {
            throw new runtime.RequiredError('metadata','Required parameter requestParameters.metadata was null or undefined when calling updateApiMetadata1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updateApiMetadata1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApiMetadata1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApiMetadata1.');
        }

        if (requestParameters.updateApiMetadataEntity === null || requestParameters.updateApiMetadataEntity === undefined) {
            throw new runtime.RequiredError('updateApiMetadataEntity','Required parameter requestParameters.updateApiMetadataEntity was null or undefined when calling updateApiMetadata1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/metadata/{metadata}`.replace(`{${"metadata"}}`, encodeURIComponent(String(requestParameters.metadata))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApiMetadataEntityToJSON(requestParameters.updateApiMetadataEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiMetadataEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_METADATA[UPDATE] permission to use this service
     * Update an API metadata
     */
    async updateApiMetadata1(requestParameters: UpdateApiMetadata1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiMetadataEntity> {
        const response = await this.updateApiMetadata1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Update a page
     */
    async updateApiPage1Raw(requestParameters: UpdateApiPage1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling updateApiPage1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updateApiPage1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApiPage1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApiPage1.');
        }

        if (requestParameters.updatePageEntity === null || requestParameters.updatePageEntity === undefined) {
            throw new runtime.RequiredError('updatePageEntity','Required parameter requestParameters.updatePageEntity was null or undefined when calling updateApiPage1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePageEntityToJSON(requestParameters.updatePageEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Update a page
     */
    async updateApiPage1(requestParameters: UpdateApiPage1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.updateApiPage1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must be ADMIN to use this service
     * Import pages
     */
    async updateApiPageImportFiles1Raw(requestParameters: UpdateApiPageImportFiles1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEntity>> {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updateApiPageImportFiles1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApiPageImportFiles1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApiPageImportFiles1.');
        }

        if (requestParameters.importPageEntity === null || requestParameters.importPageEntity === undefined) {
            throw new runtime.RequiredError('importPageEntity','Required parameter requestParameters.importPageEntity was null or undefined when calling updateApiPageImportFiles1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages/_import`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ImportPageEntityToJSON(requestParameters.importPageEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }

    /**
     * User must be ADMIN to use this service
     * Import pages
     */
    async updateApiPageImportFiles1(requestParameters: UpdateApiPageImportFiles1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEntity> {
        const response = await this.updateApiPageImportFiles1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_PLANS permission to use this service
     * 🧪 Update a plan
     */
    async updateApiPlan1Raw(requestParameters: UpdateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanEntityV4>> {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan','Required parameter requestParameters.plan was null or undefined when calling updateApiPlan1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updateApiPlan1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApiPlan1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApiPlan1.');
        }

        if (requestParameters.updatePlanEntityV4 === null || requestParameters.updatePlanEntityV4 === undefined) {
            throw new runtime.RequiredError('updatePlanEntityV4','Required parameter requestParameters.updatePlanEntityV4 was null or undefined when calling updateApiPlan1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/plans/{plan}`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePlanEntityV4ToJSON(requestParameters.updatePlanEntityV4),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityV4FromJSON(jsonValue));
    }

    /**
     * ⚠️ This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ⚠️. <br><br>User must have the MANAGE_PLANS permission to use this service
     * 🧪 Update a plan
     */
    async updateApiPlan1(requestParameters: UpdateApiPlan1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanEntityV4> {
        const response = await this.updateApiPlan1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the API_RATING[UPDATE] permission to use this service
     * Update an existing rating for an API
     */
    async updateApiRating1Raw(requestParameters: UpdateApiRating1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingEntity>> {
        if (requestParameters.rating === null || requestParameters.rating === undefined) {
            throw new runtime.RequiredError('rating','Required parameter requestParameters.rating was null or undefined when calling updateApiRating1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updateApiRating1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApiRating1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApiRating1.');
        }

        if (requestParameters.updateRatingEntity === null || requestParameters.updateRatingEntity === undefined) {
            throw new runtime.RequiredError('updateRatingEntity','Required parameter requestParameters.updateRatingEntity was null or undefined when calling updateApiRating1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/ratings/{rating}`.replace(`{${"rating"}}`, encodeURIComponent(String(requestParameters.rating))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRatingEntityToJSON(requestParameters.updateRatingEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingEntityFromJSON(jsonValue));
    }

    /**
     * User must have the API_RATING[UPDATE] permission to use this service
     * Update an existing rating for an API
     */
    async updateApiRating1(requestParameters: UpdateApiRating1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingEntity> {
        const response = await this.updateApiRating1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Update a subscription
     */
    async updateApiSubscription1Raw(requestParameters: UpdateApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription','Required parameter requestParameters.subscription was null or undefined when calling updateApiSubscription1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updateApiSubscription1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updateApiSubscription1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateApiSubscription1.');
        }

        if (requestParameters.updateSubscriptionEntity === null || requestParameters.updateSubscriptionEntity === undefined) {
            throw new runtime.RequiredError('updateSubscriptionEntity','Required parameter requestParameters.updateSubscriptionEntity was null or undefined when calling updateApiSubscription1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions/{subscription}`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSubscriptionEntityToJSON(requestParameters.updateSubscriptionEntity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Update a subscription
     */
    async updateApiSubscription1(requestParameters: UpdateApiSubscription1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.updateApiSubscription1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Put the page\'s content
     */
    async updatePageContent2Raw(requestParameters: UpdatePageContent2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling updatePageContent2.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling updatePageContent2.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling updatePageContent2.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updatePageContent2.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updatePageContent2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/pages/{page}/content`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Put the page\'s content
     */
    async updatePageContent2(requestParameters: UpdatePageContent2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePageContent2Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the API_SUBSCRIPTION:READ permission to use this service
     * Check a subscription can be created with given api key, and application
     */
    async verifyApiKeyCreation1Raw(requestParameters: VerifyApiKeyCreation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling verifyApiKeyCreation1.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling verifyApiKeyCreation1.');
        }

        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api','Required parameter requestParameters.api was null or undefined when calling verifyApiKeyCreation1.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling verifyApiKeyCreation1.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling verifyApiKeyCreation1.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.application !== undefined) {
            queryParameters['application'] = requestParameters.application;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/apis/{api}/subscriptions/_canCreate`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * User must have the API_SUBSCRIPTION:READ permission to use this service
     * Check a subscription can be created with given api key, and application
     */
    async verifyApiKeyCreation1(requestParameters: VerifyApiKeyCreation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.verifyApiKeyCreation1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetApiPlans1StatusEnum = {
    STAGING: 'STAGING',
    PUBLISHED: 'PUBLISHED',
    DEPRECATED: 'DEPRECATED',
    CLOSED: 'CLOSED'
} as const;
export type GetApiPlans1StatusEnum = typeof GetApiPlans1StatusEnum[keyof typeof GetApiPlans1StatusEnum];
/**
 * @export
 */
export const GetApiSubscriptions1ExpandEnum = {
    KEYS: 'keys',
    SECURITY: 'security'
} as const;
export type GetApiSubscriptions1ExpandEnum = typeof GetApiSubscriptions1ExpandEnum[keyof typeof GetApiSubscriptions1ExpandEnum];
