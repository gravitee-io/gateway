/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * Some news resources are in alpha version. This implies that they are likely to be modified or even removed in future versions. They are marked with the üß™ symbol
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConnectorListItem,
  PlatformPluginEntity,
} from '../models';
import {
    ConnectorListItemFromJSON,
    ConnectorListItemToJSON,
    PlatformPluginEntityFromJSON,
    PlatformPluginEntityToJSON,
} from '../models';

export interface GetEndpointsRequest {
    expand?: Array<string>;
    envId: string;
    orgId: string;
}

export interface GetEntrypoint2Request {
    entrypoint: string;
    envId: string;
    orgId: string;
}

export interface GetEntrypointDocRequest {
    entrypoint: string;
    envId: string;
    orgId: string;
}

export interface GetEntrypointSchemaRequest {
    entrypoint: string;
    envId: string;
    orgId: string;
}

/**
 * 
 */
export class V4EndpointsApi extends runtime.BaseAPI {

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * List endpoint plugins
     */
    async getEndpointsRaw(requestParameters: GetEndpointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ConnectorListItem>>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEndpoints.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEndpoints.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/endpoints`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConnectorListItemFromJSON));
    }

    /**
     * User must have the ENVIRONMENT_API[READ] permission to use this service
     * List endpoint plugins
     */
    async getEndpoints(requestParameters: GetEndpointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ConnectorListItem>> {
        const response = await this.getEndpointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the ENVIRONMENT_API[READ] permission to use this service
     * üß™ Get an entrypoint
     */
    async getEntrypoint2Raw(requestParameters: GetEntrypoint2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformPluginEntity>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling getEntrypoint2.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEntrypoint2.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypoint2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/endpoints/{entrypoint}`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformPluginEntityFromJSON(jsonValue));
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the ENVIRONMENT_API[READ] permission to use this service
     * üß™ Get an entrypoint
     */
    async getEntrypoint2(requestParameters: GetEntrypoint2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformPluginEntity> {
        const response = await this.getEntrypoint2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the ENVIRONMENT_API[READ] permission to use this service
     * üß™ Get a entrypoint\'s documentation
     */
    async getEntrypointDocRaw(requestParameters: GetEntrypointDocRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling getEntrypointDoc.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEntrypointDoc.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypointDoc.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/endpoints/{entrypoint}/documentation`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the ENVIRONMENT_API[READ] permission to use this service
     * üß™ Get a entrypoint\'s documentation
     */
    async getEntrypointDoc(requestParameters: GetEntrypointDocRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getEntrypointDocRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the ENVIRONMENT_API[READ] permission to use this service
     * üß™ Get a entrypoint\'s schema
     */
    async getEntrypointSchemaRaw(requestParameters: GetEntrypointSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.entrypoint === null || requestParameters.entrypoint === undefined) {
            throw new runtime.RequiredError('entrypoint','Required parameter requestParameters.entrypoint was null or undefined when calling getEntrypointSchema.');
        }

        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling getEntrypointSchema.');
        }

        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getEntrypointSchema.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/v4/endpoints/{entrypoint}/schema`.replace(`{${"entrypoint"}}`, encodeURIComponent(String(requestParameters.entrypoint))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * ‚ö†Ô∏è This resource is in alpha version. This implies that it is likely to be modified or even removed in future versions. ‚ö†Ô∏è. <br><br>User must have the ENVIRONMENT_API[READ] permission to use this service
     * üß™ Get a entrypoint\'s schema
     */
    async getEntrypointSchema(requestParameters: GetEntrypointSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getEntrypointSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
