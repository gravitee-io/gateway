/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * Some news resources are in alpha version. This implies that they are likely to be modified or even removed in future versions. They are marked with the ðŸ§ª symbol
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Enabled } from './Enabled';
import {
    EnabledFromJSON,
    EnabledFromJSONTyped,
    EnabledToJSON,
} from './Enabled';

/**
 * 
 * @export
 * @interface ApplicationTypes
 */
export interface ApplicationTypes {
    /**
     * 
     * @type {Enabled}
     * @memberof ApplicationTypes
     */
    backend_to_backend?: Enabled;
    /**
     * 
     * @type {Enabled}
     * @memberof ApplicationTypes
     */
    browser?: Enabled;
    /**
     * 
     * @type {Enabled}
     * @memberof ApplicationTypes
     */
    _native?: Enabled;
    /**
     * 
     * @type {Enabled}
     * @memberof ApplicationTypes
     */
    simple?: Enabled;
    /**
     * 
     * @type {Enabled}
     * @memberof ApplicationTypes
     */
    web?: Enabled;
}

/**
 * Check if a given object implements the ApplicationTypes interface.
 */
export function instanceOfApplicationTypes(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApplicationTypesFromJSON(json: any): ApplicationTypes {
    return ApplicationTypesFromJSONTyped(json, false);
}

export function ApplicationTypesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationTypes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'backend_to_backend': !exists(json, 'backend_to_backend') ? undefined : EnabledFromJSON(json['backend_to_backend']),
        'browser': !exists(json, 'browser') ? undefined : EnabledFromJSON(json['browser']),
        '_native': !exists(json, 'native') ? undefined : EnabledFromJSON(json['native']),
        'simple': !exists(json, 'simple') ? undefined : EnabledFromJSON(json['simple']),
        'web': !exists(json, 'web') ? undefined : EnabledFromJSON(json['web']),
    };
}

export function ApplicationTypesToJSON(value?: ApplicationTypes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'backend_to_backend': EnabledToJSON(value.backend_to_backend),
        'browser': EnabledToJSON(value.browser),
        'native': EnabledToJSON(value._native),
        'simple': EnabledToJSON(value.simple),
        'web': EnabledToJSON(value.web),
    };
}

