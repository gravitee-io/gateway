/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * Some news resources are in alpha version. This implies that they are likely to be modified or even removed in future versions. They are marked with the ðŸ§ª symbol
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditReferenceType } from './AuditReferenceType';
import {
    AuditReferenceTypeFromJSON,
    AuditReferenceTypeFromJSONTyped,
    AuditReferenceTypeToJSON,
} from './AuditReferenceType';

/**
 * 
 * @export
 * @interface AuditEntity
 */
export interface AuditEntity {
    /**
     * 
     * @type {Date}
     * @memberof AuditEntity
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof AuditEntity
     */
    event?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditEntity
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditEntity
     */
    patch?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof AuditEntity
     */
    properties?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof AuditEntity
     */
    referenceId?: string;
    /**
     * 
     * @type {AuditReferenceType}
     * @memberof AuditEntity
     */
    referenceType?: AuditReferenceType;
    /**
     * 
     * @type {string}
     * @memberof AuditEntity
     */
    user?: string;
}

/**
 * Check if a given object implements the AuditEntity interface.
 */
export function instanceOfAuditEntity(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuditEntityFromJSON(json: any): AuditEntity {
    return AuditEntityFromJSONTyped(json, false);
}

export function AuditEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'event': !exists(json, 'event') ? undefined : json['event'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'patch': !exists(json, 'patch') ? undefined : json['patch'],
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'referenceType': !exists(json, 'referenceType') ? undefined : AuditReferenceTypeFromJSON(json['referenceType']),
        'user': !exists(json, 'user') ? undefined : json['user'],
    };
}

export function AuditEntityToJSON(value?: AuditEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'event': value.event,
        'id': value.id,
        'patch': value.patch,
        'properties': value.properties,
        'referenceId': value.referenceId,
        'referenceType': AuditReferenceTypeToJSON(value.referenceType),
        'user': value.user,
    };
}

