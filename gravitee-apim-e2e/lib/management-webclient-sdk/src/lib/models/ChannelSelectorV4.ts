/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * Some news resources are in alpha version. This implies that they are likely to be modified or even removed in future versions. They are marked with the ðŸ§ª symbol
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelSelectorV4AllOf } from './ChannelSelectorV4AllOf';
import {
    ChannelSelectorV4AllOfFromJSON,
    ChannelSelectorV4AllOfFromJSONTyped,
    ChannelSelectorV4AllOfToJSON,
} from './ChannelSelectorV4AllOf';
import type { Selector } from './Selector';
import {
    SelectorFromJSON,
    SelectorFromJSONTyped,
    SelectorToJSON,
} from './Selector';

/**
 * 
 * @export
 * @interface ChannelSelectorV4
 */
export interface ChannelSelectorV4 extends Selector {
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelSelectorV4
     */
    operations?: Array<ChannelSelectorV4OperationsEnum>;
    /**
     * 
     * @type {string}
     * @memberof ChannelSelectorV4
     */
    channel: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelSelectorV4
     */
    channelOperator: ChannelSelectorV4ChannelOperatorEnum;
}


/**
 * @export
 */
export const ChannelSelectorV4OperationsEnum = {
    SUB: 'SUB',
    PUB: 'PUB'
} as const;
export type ChannelSelectorV4OperationsEnum = typeof ChannelSelectorV4OperationsEnum[keyof typeof ChannelSelectorV4OperationsEnum];

/**
 * @export
 */
export const ChannelSelectorV4ChannelOperatorEnum = {
    STARTS_WITH: 'STARTS_WITH',
    EQUALS: 'EQUALS'
} as const;
export type ChannelSelectorV4ChannelOperatorEnum = typeof ChannelSelectorV4ChannelOperatorEnum[keyof typeof ChannelSelectorV4ChannelOperatorEnum];


/**
 * Check if a given object implements the ChannelSelectorV4 interface.
 */
export function instanceOfChannelSelectorV4(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "channel" in value;
    isInstance = isInstance && "channelOperator" in value;

    return isInstance;
}

export function ChannelSelectorV4FromJSON(json: any): ChannelSelectorV4 {
    return ChannelSelectorV4FromJSONTyped(json, false);
}

export function ChannelSelectorV4FromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelSelectorV4 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...SelectorFromJSONTyped(json, ignoreDiscriminator),
        'operations': !exists(json, 'operations') ? undefined : json['operations'],
        'channel': json['channel'],
        'channelOperator': json['channelOperator'],
    };
}

export function ChannelSelectorV4ToJSON(value?: ChannelSelectorV4 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...SelectorToJSON(value),
        'operations': value.operations,
        'channel': value.channel,
        'channelOperator': value.channelOperator,
    };
}

