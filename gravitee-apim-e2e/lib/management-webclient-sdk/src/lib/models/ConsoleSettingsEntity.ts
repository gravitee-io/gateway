/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.18.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Alert,
    AlertFromJSON,
    AlertFromJSONTyped,
    AlertToJSON,
    ConsoleAuthentication,
    ConsoleAuthenticationFromJSON,
    ConsoleAuthenticationFromJSONTyped,
    ConsoleAuthenticationToJSON,
    ConsoleCors,
    ConsoleCorsFromJSON,
    ConsoleCorsFromJSONTyped,
    ConsoleCorsToJSON,
    ConsoleReCaptcha,
    ConsoleReCaptchaFromJSON,
    ConsoleReCaptchaFromJSONTyped,
    ConsoleReCaptchaToJSON,
    ConsoleScheduler,
    ConsoleSchedulerFromJSON,
    ConsoleSchedulerFromJSONTyped,
    ConsoleSchedulerToJSON,
    Email,
    EmailFromJSON,
    EmailFromJSONTyped,
    EmailToJSON,
    Logging,
    LoggingFromJSON,
    LoggingFromJSONTyped,
    LoggingToJSON,
    Maintenance,
    MaintenanceFromJSON,
    MaintenanceFromJSONTyped,
    MaintenanceToJSON,
    Management,
    ManagementFromJSON,
    ManagementFromJSONTyped,
    ManagementToJSON,
    Newsletter,
    NewsletterFromJSON,
    NewsletterFromJSONTyped,
    NewsletterToJSON,
    Theme,
    ThemeFromJSON,
    ThemeFromJSONTyped,
    ThemeToJSON,
} from './';

/**
 * 
 * @export
 * @interface ConsoleSettingsEntity
 */
export interface ConsoleSettingsEntity {
    /**
     * 
     * @type {Email}
     * @memberof ConsoleSettingsEntity
     */
    email?: Email;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ConsoleSettingsEntity
     */
    readonly metadata?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {Alert}
     * @memberof ConsoleSettingsEntity
     */
    alert?: Alert;
    /**
     * 
     * @type {ConsoleAuthentication}
     * @memberof ConsoleSettingsEntity
     */
    authentication?: ConsoleAuthentication;
    /**
     * 
     * @type {ConsoleCors}
     * @memberof ConsoleSettingsEntity
     */
    cors?: ConsoleCors;
    /**
     * 
     * @type {ConsoleReCaptcha}
     * @memberof ConsoleSettingsEntity
     */
    reCaptcha?: ConsoleReCaptcha;
    /**
     * 
     * @type {ConsoleScheduler}
     * @memberof ConsoleSettingsEntity
     */
    scheduler?: ConsoleScheduler;
    /**
     * 
     * @type {Logging}
     * @memberof ConsoleSettingsEntity
     */
    logging?: Logging;
    /**
     * 
     * @type {Maintenance}
     * @memberof ConsoleSettingsEntity
     */
    maintenance?: Maintenance;
    /**
     * 
     * @type {Management}
     * @memberof ConsoleSettingsEntity
     */
    management?: Management;
    /**
     * 
     * @type {Newsletter}
     * @memberof ConsoleSettingsEntity
     */
    newsletter?: Newsletter;
    /**
     * 
     * @type {Theme}
     * @memberof ConsoleSettingsEntity
     */
    theme?: Theme;
}

export function ConsoleSettingsEntityFromJSON(json: any): ConsoleSettingsEntity {
    return ConsoleSettingsEntityFromJSONTyped(json, false);
}

export function ConsoleSettingsEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConsoleSettingsEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'email': !exists(json, 'email') ? undefined : EmailFromJSON(json['email']),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'alert': !exists(json, 'alert') ? undefined : AlertFromJSON(json['alert']),
        'authentication': !exists(json, 'authentication') ? undefined : ConsoleAuthenticationFromJSON(json['authentication']),
        'cors': !exists(json, 'cors') ? undefined : ConsoleCorsFromJSON(json['cors']),
        'reCaptcha': !exists(json, 'reCaptcha') ? undefined : ConsoleReCaptchaFromJSON(json['reCaptcha']),
        'scheduler': !exists(json, 'scheduler') ? undefined : ConsoleSchedulerFromJSON(json['scheduler']),
        'logging': !exists(json, 'logging') ? undefined : LoggingFromJSON(json['logging']),
        'maintenance': !exists(json, 'maintenance') ? undefined : MaintenanceFromJSON(json['maintenance']),
        'management': !exists(json, 'management') ? undefined : ManagementFromJSON(json['management']),
        'newsletter': !exists(json, 'newsletter') ? undefined : NewsletterFromJSON(json['newsletter']),
        'theme': !exists(json, 'theme') ? undefined : ThemeFromJSON(json['theme']),
    };
}

export function ConsoleSettingsEntityToJSON(value?: ConsoleSettingsEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'email': EmailToJSON(value.email),
        'alert': AlertToJSON(value.alert),
        'authentication': ConsoleAuthenticationToJSON(value.authentication),
        'cors': ConsoleCorsToJSON(value.cors),
        'reCaptcha': ConsoleReCaptchaToJSON(value.reCaptcha),
        'scheduler': ConsoleSchedulerToJSON(value.scheduler),
        'logging': LoggingToJSON(value.logging),
        'maintenance': MaintenanceToJSON(value.maintenance),
        'management': ManagementToJSON(value.management),
        'newsletter': NewsletterToJSON(value.newsletter),
        'theme': ThemeToJSON(value.theme),
    };
}


