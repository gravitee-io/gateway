/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Selector } from './Selector';
import { SelectorFromJSON, SelectorFromJSONTyped, SelectorToJSON } from './Selector';
import type { HttpSelectorV4AllOf } from './HttpSelectorV4AllOf';
import { HttpSelectorV4AllOfFromJSON, HttpSelectorV4AllOfFromJSONTyped, HttpSelectorV4AllOfToJSON } from './HttpSelectorV4AllOf';

/**
 *
 * @export
 * @interface HttpSelectorV4
 */
export interface HttpSelectorV4 extends Selector {
  /**
   *
   * @type {string}
   * @memberof HttpSelectorV4
   */
  path: string;
  /**
   *
   * @type {string}
   * @memberof HttpSelectorV4
   */
  pathOperator: HttpSelectorV4PathOperatorEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof HttpSelectorV4
   */
  methods?: Array<HttpSelectorV4MethodsEnum>;
}

/**
 * @export
 */
export const HttpSelectorV4PathOperatorEnum = {
  STARTS_WITH: 'STARTS_WITH',
  EQUALS: 'EQUALS',
} as const;
export type HttpSelectorV4PathOperatorEnum = typeof HttpSelectorV4PathOperatorEnum[keyof typeof HttpSelectorV4PathOperatorEnum];

/**
 * @export
 */
export const HttpSelectorV4MethodsEnum = {
  CONNECT: 'CONNECT',
  DELETE: 'DELETE',
  GET: 'GET',
  HEAD: 'HEAD',
  OPTIONS: 'OPTIONS',
  PATCH: 'PATCH',
  POST: 'POST',
  PUT: 'PUT',
  TRACE: 'TRACE',
  OTHER: 'OTHER',
} as const;
export type HttpSelectorV4MethodsEnum = typeof HttpSelectorV4MethodsEnum[keyof typeof HttpSelectorV4MethodsEnum];

/**
 * Check if a given object implements the HttpSelectorV4 interface.
 */
export function instanceOfHttpSelectorV4(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'path' in value;
  isInstance = isInstance && 'pathOperator' in value;

  return isInstance;
}

export function HttpSelectorV4FromJSON(json: any): HttpSelectorV4 {
  return HttpSelectorV4FromJSONTyped(json, false);
}

export function HttpSelectorV4FromJSONTyped(json: any, ignoreDiscriminator: boolean): HttpSelectorV4 {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    ...SelectorFromJSONTyped(json, ignoreDiscriminator),
    path: json['path'],
    pathOperator: json['pathOperator'],
    methods: !exists(json, 'methods') ? undefined : json['methods'],
  };
}

export function HttpSelectorV4ToJSON(value?: HttpSelectorV4 | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    ...SelectorToJSON(value),
    path: value.path,
    pathOperator: value.pathOperator,
    methods: value.methods,
  };
}
