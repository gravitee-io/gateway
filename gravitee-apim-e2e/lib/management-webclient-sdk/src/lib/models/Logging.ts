/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * Some news resources are in alpha version. This implies that they are likely to be modified or even removed in future versions. They are marked with the ðŸ§ª symbol
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Logging
 */
export interface Logging {
    /**
     * 
     * @type {string}
     * @memberof Logging
     */
    condition?: string;
    /**
     * 
     * @type {string}
     * @memberof Logging
     */
    content?: LoggingContentEnum;
    /**
     * 
     * @type {string}
     * @memberof Logging
     */
    mode?: LoggingModeEnum;
    /**
     * 
     * @type {string}
     * @memberof Logging
     */
    scope?: LoggingScopeEnum;
}


/**
 * @export
 */
export const LoggingContentEnum = {
    NONE: 'NONE',
    HEADERS: 'HEADERS',
    PAYLOADS: 'PAYLOADS',
    HEADERS_PAYLOADS: 'HEADERS_PAYLOADS'
} as const;
export type LoggingContentEnum = typeof LoggingContentEnum[keyof typeof LoggingContentEnum];

/**
 * @export
 */
export const LoggingModeEnum = {
    NONE: 'NONE',
    CLIENT: 'CLIENT',
    PROXY: 'PROXY',
    CLIENT_PROXY: 'CLIENT_PROXY'
} as const;
export type LoggingModeEnum = typeof LoggingModeEnum[keyof typeof LoggingModeEnum];

/**
 * @export
 */
export const LoggingScopeEnum = {
    NONE: 'NONE',
    REQUEST: 'REQUEST',
    RESPONSE: 'RESPONSE',
    REQUEST_RESPONSE: 'REQUEST_RESPONSE'
} as const;
export type LoggingScopeEnum = typeof LoggingScopeEnum[keyof typeof LoggingScopeEnum];


/**
 * Check if a given object implements the Logging interface.
 */
export function instanceOfLogging(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LoggingFromJSON(json: any): Logging {
    return LoggingFromJSONTyped(json, false);
}

export function LoggingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Logging {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'condition': !exists(json, 'condition') ? undefined : json['condition'],
        'content': !exists(json, 'content') ? undefined : json['content'],
        'mode': !exists(json, 'mode') ? undefined : json['mode'],
        'scope': !exists(json, 'scope') ? undefined : json['scope'],
    };
}

export function LoggingToJSON(value?: Logging | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'condition': value.condition,
        'content': value.content,
        'mode': value.mode,
        'scope': value.scope,
    };
}

