/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EndpointGroupV4,
    EndpointGroupV4FromJSON,
    EndpointGroupV4FromJSONTyped,
    EndpointGroupV4ToJSON,
    FlowV4,
    FlowV4FromJSON,
    FlowV4FromJSONTyped,
    FlowV4ToJSON,
    ListenerV4,
    ListenerV4FromJSON,
    ListenerV4FromJSONTyped,
    ListenerV4ToJSON,
} from './';

/**
 * 
 * @export
 * @interface NewApiEntityV4
 */
export interface NewApiEntityV4 {
    /**
     * Api's version. It's a simple string only used in the portal.
     * @type {string}
     * @memberof NewApiEntityV4
     */
    apiVersion: string;
    /**
     * API's gravitee definition version
     * @type {string}
     * @memberof NewApiEntityV4
     */
    definitionVersion: NewApiEntityV4DefinitionVersionEnum;
    /**
     * API's description. A short description of your API.
     * @type {string}
     * @memberof NewApiEntityV4
     */
    description: string;
    /**
     * A list of endpoint describing the endpoints to contact.
     * @type {Array<EndpointGroupV4>}
     * @memberof NewApiEntityV4
     */
    endpointGroups: Array<EndpointGroupV4>;
    /**
     * API's flow mode.
     * @type {string}
     * @memberof NewApiEntityV4
     */
    flowMode?: NewApiEntityV4FlowModeEnum;
    /**
     * A list of flows containing the policies configuration.
     * @type {Array<FlowV4>}
     * @memberof NewApiEntityV4
     */
    flows?: Array<FlowV4>;
    /**
     * API's groups. Used to add team in your API.
     * @type {Array<string>}
     * @memberof NewApiEntityV4
     */
    groups?: Array<string>;
    /**
     * A list of listeners used to describe our you api could be reached.
     * @type {Array<ListenerV4>}
     * @memberof NewApiEntityV4
     */
    listeners: Array<ListenerV4>;
    /**
     * API's name. Duplicate names can exists.
     * @type {string}
     * @memberof NewApiEntityV4
     */
    name: string;
    /**
     * The list of sharding tags associated with this API.
     * @type {Array<string>}
     * @memberof NewApiEntityV4
     */
    tags?: Array<string>;
    /**
     * API's type
     * @type {string}
     * @memberof NewApiEntityV4
     */
    type: NewApiEntityV4TypeEnum;
}

export function NewApiEntityV4FromJSON(json: any): NewApiEntityV4 {
    return NewApiEntityV4FromJSONTyped(json, false);
}

export function NewApiEntityV4FromJSONTyped(json: any, ignoreDiscriminator: boolean): NewApiEntityV4 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'apiVersion': json['apiVersion'],
        'definitionVersion': json['definitionVersion'],
        'description': json['description'],
        'endpointGroups': ((json['endpointGroups'] as Array<any>).map(EndpointGroupV4FromJSON)),
        'flowMode': !exists(json, 'flowMode') ? undefined : json['flowMode'],
        'flows': !exists(json, 'flows') ? undefined : ((json['flows'] as Array<any>).map(FlowV4FromJSON)),
        'groups': !exists(json, 'groups') ? undefined : json['groups'],
        'listeners': ((json['listeners'] as Array<any>).map(ListenerV4FromJSON)),
        'name': json['name'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'type': json['type'],
    };
}

export function NewApiEntityV4ToJSON(value?: NewApiEntityV4 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'apiVersion': value.apiVersion,
        'definitionVersion': value.definitionVersion,
        'description': value.description,
        'endpointGroups': ((value.endpointGroups as Array<any>).map(EndpointGroupV4ToJSON)),
        'flowMode': value.flowMode,
        'flows': value.flows === undefined ? undefined : ((value.flows as Array<any>).map(FlowV4ToJSON)),
        'groups': value.groups,
        'listeners': ((value.listeners as Array<any>).map(ListenerV4ToJSON)),
        'name': value.name,
        'tags': value.tags,
        'type': value.type,
    };
}

/**
* @export
* @enum {string}
*/
export enum NewApiEntityV4DefinitionVersionEnum {
    V1 = 'V1',
    V2 = 'V2',
    V4 = 'V4'
}
/**
* @export
* @enum {string}
*/
export enum NewApiEntityV4FlowModeEnum {
    DEFAULT = 'DEFAULT',
    BESTMATCH = 'BEST_MATCH'
}
/**
* @export
* @enum {string}
*/
export enum NewApiEntityV4TypeEnum {
    SYNC = 'SYNC',
    ASYNC = 'ASYNC'
}


