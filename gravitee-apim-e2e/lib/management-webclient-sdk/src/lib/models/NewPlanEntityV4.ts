/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * Some news resources are in alpha version. This implies that they are likely to be modified or even removed in future versions. They are marked with the ðŸ§ª symbol
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FlowV4 } from './FlowV4';
import {
    FlowV4FromJSON,
    FlowV4FromJSONTyped,
    FlowV4ToJSON,
} from './FlowV4';
import type { PlanSecurityV4 } from './PlanSecurityV4';
import {
    PlanSecurityV4FromJSON,
    PlanSecurityV4FromJSONTyped,
    PlanSecurityV4ToJSON,
} from './PlanSecurityV4';
import type { PlanTypeV4 } from './PlanTypeV4';
import {
    PlanTypeV4FromJSON,
    PlanTypeV4FromJSONTyped,
    PlanTypeV4ToJSON,
} from './PlanTypeV4';
import type { PlanValidationTypeV4 } from './PlanValidationTypeV4';
import {
    PlanValidationTypeV4FromJSON,
    PlanValidationTypeV4FromJSONTyped,
    PlanValidationTypeV4ToJSON,
} from './PlanValidationTypeV4';

/**
 * 
 * @export
 * @interface NewPlanEntityV4
 */
export interface NewPlanEntityV4 {
    /**
     * 
     * @type {string}
     * @memberof NewPlanEntityV4
     */
    apiId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NewPlanEntityV4
     */
    characteristics?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof NewPlanEntityV4
     */
    commentMessage?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NewPlanEntityV4
     */
    commentRequired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NewPlanEntityV4
     */
    crossId?: string;
    /**
     * 
     * @type {string}
     * @memberof NewPlanEntityV4
     */
    description: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NewPlanEntityV4
     */
    excludedGroups?: Array<string>;
    /**
     * 
     * @type {Array<FlowV4>}
     * @memberof NewPlanEntityV4
     */
    flows: Array<FlowV4>;
    /**
     * 
     * @type {string}
     * @memberof NewPlanEntityV4
     */
    generalConditions?: string;
    /**
     * 
     * @type {string}
     * @memberof NewPlanEntityV4
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof NewPlanEntityV4
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof NewPlanEntityV4
     */
    order?: number;
    /**
     * 
     * @type {PlanSecurityV4}
     * @memberof NewPlanEntityV4
     */
    security?: PlanSecurityV4;
    /**
     * 
     * @type {string}
     * @memberof NewPlanEntityV4
     */
    selectionRule?: string;
    /**
     * 
     * @type {string}
     * @memberof NewPlanEntityV4
     */
    status: NewPlanEntityV4StatusEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof NewPlanEntityV4
     */
    tags?: Array<string>;
    /**
     * 
     * @type {PlanTypeV4}
     * @memberof NewPlanEntityV4
     */
    type: PlanTypeV4;
    /**
     * 
     * @type {PlanValidationTypeV4}
     * @memberof NewPlanEntityV4
     */
    validation: PlanValidationTypeV4;
}


/**
 * @export
 */
export const NewPlanEntityV4StatusEnum = {
    STAGING: 'STAGING',
    PUBLISHED: 'PUBLISHED',
    DEPRECATED: 'DEPRECATED',
    CLOSED: 'CLOSED'
} as const;
export type NewPlanEntityV4StatusEnum = typeof NewPlanEntityV4StatusEnum[keyof typeof NewPlanEntityV4StatusEnum];


/**
 * Check if a given object implements the NewPlanEntityV4 interface.
 */
export function instanceOfNewPlanEntityV4(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "flows" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "validation" in value;

    return isInstance;
}

export function NewPlanEntityV4FromJSON(json: any): NewPlanEntityV4 {
    return NewPlanEntityV4FromJSONTyped(json, false);
}

export function NewPlanEntityV4FromJSONTyped(json: any, ignoreDiscriminator: boolean): NewPlanEntityV4 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'apiId': !exists(json, 'apiId') ? undefined : json['apiId'],
        'characteristics': !exists(json, 'characteristics') ? undefined : json['characteristics'],
        'commentMessage': !exists(json, 'commentMessage') ? undefined : json['commentMessage'],
        'commentRequired': !exists(json, 'commentRequired') ? undefined : json['commentRequired'],
        'crossId': !exists(json, 'crossId') ? undefined : json['crossId'],
        'description': json['description'],
        'excludedGroups': !exists(json, 'excludedGroups') ? undefined : json['excludedGroups'],
        'flows': ((json['flows'] as Array<any>).map(FlowV4FromJSON)),
        'generalConditions': !exists(json, 'generalConditions') ? undefined : json['generalConditions'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'order': !exists(json, 'order') ? undefined : json['order'],
        'security': !exists(json, 'security') ? undefined : PlanSecurityV4FromJSON(json['security']),
        'selectionRule': !exists(json, 'selectionRule') ? undefined : json['selectionRule'],
        'status': json['status'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'type': PlanTypeV4FromJSON(json['type']),
        'validation': PlanValidationTypeV4FromJSON(json['validation']),
    };
}

export function NewPlanEntityV4ToJSON(value?: NewPlanEntityV4 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'apiId': value.apiId,
        'characteristics': value.characteristics,
        'commentMessage': value.commentMessage,
        'commentRequired': value.commentRequired,
        'crossId': value.crossId,
        'description': value.description,
        'excludedGroups': value.excludedGroups,
        'flows': ((value.flows as Array<any>).map(FlowV4ToJSON)),
        'generalConditions': value.generalConditions,
        'id': value.id,
        'name': value.name,
        'order': value.order,
        'security': PlanSecurityV4ToJSON(value.security),
        'selectionRule': value.selectionRule,
        'status': value.status,
        'tags': value.tags,
        'type': PlanTypeV4ToJSON(value.type),
        'validation': PlanValidationTypeV4ToJSON(value.validation),
    };
}

