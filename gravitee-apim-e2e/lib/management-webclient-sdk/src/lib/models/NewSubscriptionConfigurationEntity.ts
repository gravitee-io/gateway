/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * Some news resources are in alpha version. This implies that they are likely to be modified or even removed in future versions. They are marked with the ðŸ§ª symbol
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface NewSubscriptionConfigurationEntity
 */
export interface NewSubscriptionConfigurationEntity {
    /**
     * 
     * @type {string}
     * @memberof NewSubscriptionConfigurationEntity
     */
    configuration?: string;
    /**
     * 
     * @type {string}
     * @memberof NewSubscriptionConfigurationEntity
     */
    filter?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof NewSubscriptionConfigurationEntity
     */
    metadata?: { [key: string]: string; };
}

/**
 * Check if a given object implements the NewSubscriptionConfigurationEntity interface.
 */
export function instanceOfNewSubscriptionConfigurationEntity(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NewSubscriptionConfigurationEntityFromJSON(json: any): NewSubscriptionConfigurationEntity {
    return NewSubscriptionConfigurationEntityFromJSONTyped(json, false);
}

export function NewSubscriptionConfigurationEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): NewSubscriptionConfigurationEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'configuration': !exists(json, 'configuration') ? undefined : json['configuration'],
        'filter': !exists(json, 'filter') ? undefined : json['filter'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function NewSubscriptionConfigurationEntityToJSON(value?: NewSubscriptionConfigurationEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'configuration': value.configuration,
        'filter': value.filter,
        'metadata': value.metadata,
    };
}

