/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * Some news resources are in alpha version. This implies that they are likely to be modified or even removed in future versions. They are marked with the ðŸ§ª symbol
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The user with role PRIMARY_OWNER on this API.
 * @export
 * @interface PrimaryOwnerEntity
 */
export interface PrimaryOwnerEntity {
    /**
     * The user or group display name.
     * @type {string}
     * @memberof PrimaryOwnerEntity
     */
    displayName?: string;
    /**
     * The user or group email.
     * @type {string}
     * @memberof PrimaryOwnerEntity
     */
    email?: string;
    /**
     * The user or group id.
     * @type {string}
     * @memberof PrimaryOwnerEntity
     */
    id?: string;
    /**
     * The primary owner type
     * @type {string}
     * @memberof PrimaryOwnerEntity
     */
    type?: string;
}

/**
 * Check if a given object implements the PrimaryOwnerEntity interface.
 */
export function instanceOfPrimaryOwnerEntity(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PrimaryOwnerEntityFromJSON(json: any): PrimaryOwnerEntity {
    return PrimaryOwnerEntityFromJSONTyped(json, false);
}

export function PrimaryOwnerEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrimaryOwnerEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function PrimaryOwnerEntityToJSON(value?: PrimaryOwnerEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'displayName': value.displayName,
        'email': value.email,
        'id': value.id,
        'type': value.type,
    };
}

