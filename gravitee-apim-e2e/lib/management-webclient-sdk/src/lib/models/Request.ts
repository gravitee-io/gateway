/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RequestHeaders } from './RequestHeaders';
import {
    RequestHeadersFromJSON,
    RequestHeadersFromJSONTyped,
    RequestHeadersToJSON,
} from './RequestHeaders';

/**
 * 
 * @export
 * @interface Request
 */
export interface Request {
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    body?: string;
    /**
     * 
     * @type {RequestHeaders}
     * @memberof Request
     */
    headers?: RequestHeaders;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    method?: RequestMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    uri?: string;
}


/**
 * @export
 */
export const RequestMethodEnum = {
    CONNECT: 'CONNECT',
    DELETE: 'DELETE',
    GET: 'GET',
    HEAD: 'HEAD',
    OPTIONS: 'OPTIONS',
    PATCH: 'PATCH',
    POST: 'POST',
    PUT: 'PUT',
    TRACE: 'TRACE',
    OTHER: 'OTHER'
} as const;
export type RequestMethodEnum = typeof RequestMethodEnum[keyof typeof RequestMethodEnum];


/**
 * Check if a given object implements the Request interface.
 */
export function instanceOfRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RequestFromJSON(json: any): Request {
    return RequestFromJSONTyped(json, false);
}

export function RequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): Request {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'body': !exists(json, 'body') ? undefined : json['body'],
        'headers': !exists(json, 'headers') ? undefined : RequestHeadersFromJSON(json['headers']),
        'method': !exists(json, 'method') ? undefined : json['method'],
        'uri': !exists(json, 'uri') ? undefined : json['uri'],
    };
}

export function RequestToJSON(value?: Request | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'body': value.body,
        'headers': RequestHeadersToJSON(value.headers),
        'method': value.method,
        'uri': value.uri,
    };
}

