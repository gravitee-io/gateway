/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AlertEventPageFromJSON, AlertStatusEntityFromJSON, AlertTriggerEntityFromJSON, AnalyticsFromJSON, ApiDeploymentEntityToJSON, ApiEntityFromJSON, ApiGroupsWithMembersMapFromJSON, ApiHeaderEntityFromJSON, ApiKeyEntityFromJSON, ApiKeyEntityToJSON, ApiListItemFromJSON, ApiListItemPagedResultFromJSON, ApiMembershipToJSON, ApiMetadataEntityFromJSON, ApiMetricsFromJSON, ApiQualityMetricsEntityFromJSON, ApiQualityRuleEntityFromJSON, ApiRequestFromJSON, ApiRequestItemSearchLogResponseFromJSON, ApiStateEntityFromJSON, ApplicationEntityFromJSON, DebugApiEntityToJSON, DuplicateApiEntityToJSON, EventEntityFromJSON, EventEntityPageFromJSON, GenericNotificationConfigEntityFromJSON, GenericNotificationConfigEntityToJSON, HookFromJSON, ImportPageEntityToJSON, ImportSwaggerDescriptorEntityToJSON, JsonPatchToJSON, LogFromJSON, MemberEntityFromJSON, MembershipListItemFromJSON, MessageEntityToJSON, MetadataPageAuditEntityFromJSON, NewAlertTriggerEntityToJSON, NewApiEntityToJSON, NewApiMetadataEntityToJSON, NewApiQualityRuleEntityToJSON, NewPageEntityToJSON, NewPlanEntityToJSON, NewRatingAnswerEntityToJSON, NewRatingEntityToJSON, NotifierEntityFromJSON, PageEntityFromJSON, PageRatingEntityFromJSON, PlanEntityFromJSON, PortalNotificationConfigEntityFromJSON, PortalNotificationConfigEntityToJSON, ProcessSubscriptionEntityToJSON, PromotionEntityFromJSON, PromotionRequestEntityToJSON, RatingEntityFromJSON, RatingSummaryEntityFromJSON, ReviewEntityToJSON, RollbackApiEntityToJSON, SearchLogResponseFromJSON, SubscriptionFromJSON, SubscriptionEntityPageResultFromJSON, TransferOwnershipToJSON, TransferSubscriptionEntityToJSON, UpdateAlertTriggerEntityToJSON, UpdateApiEntityToJSON, UpdateApiMetadataEntityToJSON, UpdateApiQualityRuleEntityToJSON, UpdatePageEntityToJSON, UpdatePlanEntityToJSON, UpdateRatingEntityToJSON, UpdateSubscriptionEntityToJSON, VerifyApiParamToJSON, } from '../models';
/**
 *
 */
export class APIsApi extends runtime.BaseAPI {
    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Add or update an API member
     */
    async addOrUpdateApiMemberRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling addOrUpdateApiMember.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling addOrUpdateApiMember.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling addOrUpdateApiMember.');
        }
        if (requestParameters.apiMembership === null || requestParameters.apiMembership === undefined) {
            throw new runtime.RequiredError('apiMembership', 'Required parameter requestParameters.apiMembership was null or undefined when calling addOrUpdateApiMember.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/members`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiMembershipToJSON(requestParameters.apiMembership),
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Add or update an API member
     */
    async addOrUpdateApiMember(requestParameters) {
        await this.addOrUpdateApiMemberRaw(requestParameters);
    }
    /**
     * User must have the API_DOCUMENTATION[UPDATE] permission to use this service
     * Attach a media to an API page
     */
    async attachApiPageMediaRaw(requestParameters) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page', 'Required parameter requestParameters.page was null or undefined when calling attachApiPageMedia.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling attachApiPageMedia.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling attachApiPageMedia.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling attachApiPageMedia.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file);
        }
        if (requestParameters.fileName !== undefined) {
            formParams.append('fileName', requestParameters.fileName);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}/media`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_DOCUMENTATION[UPDATE] permission to use this service
     * Attach a media to an API page
     */
    async attachApiPageMedia(requestParameters) {
        const response = await this.attachApiPageMediaRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Change the status of a subscription
     */
    async changeApiSubscriptionStatusRaw(requestParameters) {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription', 'Required parameter requestParameters.subscription was null or undefined when calling changeApiSubscriptionStatus.');
        }
        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status', 'Required parameter requestParameters.status was null or undefined when calling changeApiSubscriptionStatus.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling changeApiSubscriptionStatus.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling changeApiSubscriptionStatus.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling changeApiSubscriptionStatus.');
        }
        const queryParameters = {};
        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/status`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Change the status of a subscription
     */
    async changeApiSubscriptionStatus(requestParameters) {
        const response = await this.changeApiSubscriptionStatusRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Close  a plan
     */
    async closeApiPlanRaw(requestParameters) {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan', 'Required parameter requestParameters.plan was null or undefined when calling closeApiPlan.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling closeApiPlan.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling closeApiPlan.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling closeApiPlan.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/plans/{plan}/_close`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Close  a plan
     */
    async closeApiPlan(requestParameters) {
        const response = await this.closeApiPlanRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have API_PUBLISHER or ADMIN role to create an API.
     * Create an API
     */
    async createApiRaw(requestParameters) {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling createApi.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling createApi.');
        }
        if (requestParameters.newApiEntity === null || requestParameters.newApiEntity === undefined) {
            throw new runtime.RequiredError('newApiEntity', 'Required parameter requestParameters.newApiEntity was null or undefined when calling createApi.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewApiEntityToJSON(requestParameters.newApiEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * User must have API_PUBLISHER or ADMIN role to create an API.
     * Create an API
     */
    async createApi(requestParameters) {
        const response = await this.createApiRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_ALERT[CREATE] permission to use this service
     * Create an alert for an API
     */
    async createApiAlertRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling createApiAlert.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling createApiAlert.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling createApiAlert.');
        }
        if (requestParameters.newAlertTriggerEntity === null || requestParameters.newAlertTriggerEntity === undefined) {
            throw new runtime.RequiredError('newAlertTriggerEntity', 'Required parameter requestParameters.newAlertTriggerEntity was null or undefined when calling createApiAlert.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/alerts`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewAlertTriggerEntityToJSON(requestParameters.newAlertTriggerEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => AlertTriggerEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_ALERT[CREATE] permission to use this service
     * Create an alert for an API
     */
    async createApiAlert(requestParameters) {
        const response = await this.createApiAlertRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_MESSAGE[CREATE] permission to use this service
     * Send a message to existing consumers of an API
     */
    async createApiMessageRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling createApiMessage.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling createApiMessage.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling createApiMessage.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/messages`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageEntityToJSON(requestParameters.messageEntity),
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * User must have the API_MESSAGE[CREATE] permission to use this service
     * Send a message to existing consumers of an API
     */
    async createApiMessage(requestParameters) {
        const response = await this.createApiMessageRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_METADATA[CREATE] permission to use this service
     * Create an API metadata
     */
    async createApiMetadataRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling createApiMetadata.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling createApiMetadata.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling createApiMetadata.');
        }
        if (requestParameters.newApiMetadataEntity === null || requestParameters.newApiMetadataEntity === undefined) {
            throw new runtime.RequiredError('newApiMetadataEntity', 'Required parameter requestParameters.newApiMetadataEntity was null or undefined when calling createApiMetadata.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/metadata`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewApiMetadataEntityToJSON(requestParameters.newApiMetadataEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiMetadataEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_METADATA[CREATE] permission to use this service
     * Create an API metadata
     */
    async createApiMetadata(requestParameters) {
        const response = await this.createApiMetadataRaw(requestParameters);
        return await response.value();
    }
    /**
     * Create notification settings
     */
    async createApiNotificationSettingsRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling createApiNotificationSettings.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling createApiNotificationSettings.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling createApiNotificationSettings.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/notificationsettings`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenericNotificationConfigEntityToJSON(requestParameters.genericNotificationConfigEntity),
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * Create notification settings
     */
    async createApiNotificationSettings(requestParameters) {
        const response = await this.createApiNotificationSettingsRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Create a page
     */
    async createApiPageRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling createApiPage.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling createApiPage.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling createApiPage.');
        }
        if (requestParameters.newPageEntity === null || requestParameters.newPageEntity === undefined) {
            throw new runtime.RequiredError('newPageEntity', 'Required parameter requestParameters.newPageEntity was null or undefined when calling createApiPage.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewPageEntityToJSON(requestParameters.newPageEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Create a page
     */
    async createApiPage(requestParameters) {
        const response = await this.createApiPageRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Create a plan
     */
    async createApiPlanRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling createApiPlan.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling createApiPlan.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling createApiPlan.');
        }
        if (requestParameters.newPlanEntity === null || requestParameters.newPlanEntity === undefined) {
            throw new runtime.RequiredError('newPlanEntity', 'Required parameter requestParameters.newPlanEntity was null or undefined when calling createApiPlan.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/plans`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewPlanEntityToJSON(requestParameters.newPlanEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Create a plan
     */
    async createApiPlan(requestParameters) {
        const response = await this.createApiPlanRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_QUALITY_RULE[CREATE] permission to use this service
     * Create a new quality rules for an API
     */
    async createApiQualityRuleRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling createApiQualityRule.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling createApiQualityRule.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling createApiQualityRule.');
        }
        if (requestParameters.newApiQualityRuleEntity === null || requestParameters.newApiQualityRuleEntity === undefined) {
            throw new runtime.RequiredError('newApiQualityRuleEntity', 'Required parameter requestParameters.newApiQualityRuleEntity was null or undefined when calling createApiQualityRule.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/quality-rules`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewApiQualityRuleEntityToJSON(requestParameters.newApiQualityRuleEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiQualityRuleEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_QUALITY_RULE[CREATE] permission to use this service
     * Create a new quality rules for an API
     */
    async createApiQualityRule(requestParameters) {
        const response = await this.createApiQualityRuleRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_RATING[CREATE] permission to use this service
     * Create a new rating for an API
     */
    async createApiRatingRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling createApiRating.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling createApiRating.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling createApiRating.');
        }
        if (requestParameters.newRatingEntity === null || requestParameters.newRatingEntity === undefined) {
            throw new runtime.RequiredError('newRatingEntity', 'Required parameter requestParameters.newRatingEntity was null or undefined when calling createApiRating.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRatingEntityToJSON(requestParameters.newRatingEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => RatingEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_RATING[CREATE] permission to use this service
     * Create a new rating for an API
     */
    async createApiRating(requestParameters) {
        const response = await this.createApiRatingRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_RATING_ANSWER[CREATE] permission to use this service
     * Create an answer to a rating for an API
     */
    async createApiRatingAnswerRaw(requestParameters) {
        if (requestParameters.rating === null || requestParameters.rating === undefined) {
            throw new runtime.RequiredError('rating', 'Required parameter requestParameters.rating was null or undefined when calling createApiRatingAnswer.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling createApiRatingAnswer.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling createApiRatingAnswer.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling createApiRatingAnswer.');
        }
        if (requestParameters.newRatingAnswerEntity === null || requestParameters.newRatingAnswerEntity === undefined) {
            throw new runtime.RequiredError('newRatingAnswerEntity', 'Required parameter requestParameters.newRatingAnswerEntity was null or undefined when calling createApiRatingAnswer.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/{rating}/answers`.replace(`{${"rating"}}`, encodeURIComponent(String(requestParameters.rating))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewRatingAnswerEntityToJSON(requestParameters.newRatingAnswerEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => RatingEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_RATING_ANSWER[CREATE] permission to use this service
     * Create an answer to a rating for an API
     */
    async createApiRatingAnswer(requestParameters) {
        const response = await this.createApiRatingAnswerRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_SUBSCRIPTIONS permission to use this service
     * Subscribe to a plan
     */
    async createSubscriptionToApiRaw(requestParameters) {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application', 'Required parameter requestParameters.application was null or undefined when calling createSubscriptionToApi.');
        }
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan', 'Required parameter requestParameters.plan was null or undefined when calling createSubscriptionToApi.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling createSubscriptionToApi.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling createSubscriptionToApi.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling createSubscriptionToApi.');
        }
        const queryParameters = {};
        if (requestParameters.application !== undefined) {
            queryParameters['application'] = requestParameters.application;
        }
        if (requestParameters.plan !== undefined) {
            queryParameters['plan'] = requestParameters.plan;
        }
        if (requestParameters.customApiKey !== undefined) {
            queryParameters['customApiKey'] = requestParameters.customApiKey;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_SUBSCRIPTIONS permission to use this service
     * Subscribe to a plan
     */
    async createSubscriptionToApi(requestParameters) {
        const response = await this.createSubscriptionToApiRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the UPDATE permission on API_DEFINITION to use this service
     * Debug an API on gateway instances
     */
    async debugAPIRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling debugAPI.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling debugAPI.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling debugAPI.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/_debug`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DebugApiEntityToJSON(requestParameters.debugApiEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => EventEntityFromJSON(jsonValue));
    }
    /**
     * User must have the UPDATE permission on API_DEFINITION to use this service
     * Debug an API on gateway instances
     */
    async debugAPI(requestParameters) {
        const response = await this.debugAPIRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the DELETE permission to use this service
     * Delete the API
     */
    async deleteApiRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling deleteApi.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling deleteApi.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling deleteApi.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the DELETE permission to use this service
     * Delete the API
     */
    async deleteApi(requestParameters) {
        await this.deleteApiRaw(requestParameters);
    }
    /**
     * User must have the API_ALERT[DELETE] permission to use this service
     * Delete an alert for an API
     */
    async deleteApiAlertRaw(requestParameters) {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert', 'Required parameter requestParameters.alert was null or undefined when calling deleteApiAlert.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling deleteApiAlert.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling deleteApiAlert.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling deleteApiAlert.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/alerts/{alert}`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => AlertTriggerEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_ALERT[DELETE] permission to use this service
     * Delete an alert for an API
     */
    async deleteApiAlert(requestParameters) {
        const response = await this.deleteApiAlertRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Remove an API member
     */
    async deleteApiMemberRaw(requestParameters) {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user', 'Required parameter requestParameters.user was null or undefined when calling deleteApiMember.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling deleteApiMember.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling deleteApiMember.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling deleteApiMember.');
        }
        const queryParameters = {};
        if (requestParameters.user !== undefined) {
            queryParameters['user'] = requestParameters.user;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/members`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Remove an API member
     */
    async deleteApiMember(requestParameters) {
        await this.deleteApiMemberRaw(requestParameters);
    }
    /**
     * User must have the API_METADATA[DELETE] permission to use this service
     * Delete a metadata
     */
    async deleteApiMetadataRaw(requestParameters) {
        if (requestParameters.metadata === null || requestParameters.metadata === undefined) {
            throw new runtime.RequiredError('metadata', 'Required parameter requestParameters.metadata was null or undefined when calling deleteApiMetadata.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling deleteApiMetadata.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling deleteApiMetadata.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling deleteApiMetadata.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/metadata/{metadata}`.replace(`{${"metadata"}}`, encodeURIComponent(String(requestParameters.metadata))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the API_METADATA[DELETE] permission to use this service
     * Delete a metadata
     */
    async deleteApiMetadata(requestParameters) {
        await this.deleteApiMetadataRaw(requestParameters);
    }
    /**
     * Delete notification settings
     */
    async deleteApiNotificationSettingsRaw(requestParameters) {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId', 'Required parameter requestParameters.notificationId was null or undefined when calling deleteApiNotificationSettings.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling deleteApiNotificationSettings.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling deleteApiNotificationSettings.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling deleteApiNotificationSettings.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/notificationsettings/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Delete notification settings
     */
    async deleteApiNotificationSettings(requestParameters) {
        await this.deleteApiNotificationSettingsRaw(requestParameters);
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Delete a page
     */
    async deleteApiPageRaw(requestParameters) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page', 'Required parameter requestParameters.page was null or undefined when calling deleteApiPage.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling deleteApiPage.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling deleteApiPage.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling deleteApiPage.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Delete a page
     */
    async deleteApiPage(requestParameters) {
        await this.deleteApiPageRaw(requestParameters);
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Delete a plan
     */
    async deleteApiPlanRaw(requestParameters) {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan', 'Required parameter requestParameters.plan was null or undefined when calling deleteApiPlan.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling deleteApiPlan.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling deleteApiPlan.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling deleteApiPlan.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/plans/{plan}`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Delete a plan
     */
    async deleteApiPlan(requestParameters) {
        await this.deleteApiPlanRaw(requestParameters);
    }
    /**
     * User must have the API_RATING[DELETE] permission to use this service
     * Delete an existing rating for an API
     */
    async deleteApiRatingRaw(requestParameters) {
        if (requestParameters.rating === null || requestParameters.rating === undefined) {
            throw new runtime.RequiredError('rating', 'Required parameter requestParameters.rating was null or undefined when calling deleteApiRating.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling deleteApiRating.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling deleteApiRating.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling deleteApiRating.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/{rating}`.replace(`{${"rating"}}`, encodeURIComponent(String(requestParameters.rating))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the API_RATING[DELETE] permission to use this service
     * Delete an existing rating for an API
     */
    async deleteApiRating(requestParameters) {
        await this.deleteApiRatingRaw(requestParameters);
    }
    /**
     * User must have the API_RATING_ANSWER[DELETE] permission to use this service
     * Delete an answer to a rating for an API
     */
    async deleteApiRatingAnswerRaw(requestParameters) {
        if (requestParameters.rating === null || requestParameters.rating === undefined) {
            throw new runtime.RequiredError('rating', 'Required parameter requestParameters.rating was null or undefined when calling deleteApiRatingAnswer.');
        }
        if (requestParameters.answer === null || requestParameters.answer === undefined) {
            throw new runtime.RequiredError('answer', 'Required parameter requestParameters.answer was null or undefined when calling deleteApiRatingAnswer.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling deleteApiRatingAnswer.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling deleteApiRatingAnswer.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling deleteApiRatingAnswer.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/{rating}/answers/{answer}`.replace(`{${"rating"}}`, encodeURIComponent(String(requestParameters.rating))).replace(`{${"answer"}}`, encodeURIComponent(String(requestParameters.answer))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the API_RATING_ANSWER[DELETE] permission to use this service
     * Delete an answer to a rating for an API
     */
    async deleteApiRatingAnswer(requestParameters) {
        await this.deleteApiRatingAnswerRaw(requestParameters);
    }
    /**
     * User must have the MANAGE_LIFECYCLE permission to use this service
     * Deploy API to gateway instances
     */
    async deployApiRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling deployApi.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling deployApi.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling deployApi.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/deploy`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiDeploymentEntityToJSON(requestParameters.apiDeploymentEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_LIFECYCLE permission to use this service
     * Deploy API to gateway instances
     */
    async deployApi(requestParameters) {
        const response = await this.deployApiRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_PLAN[UPDATE] permission to use this service
     * Deprecate a plan
     */
    async deprecateApiPlanRaw(requestParameters) {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan', 'Required parameter requestParameters.plan was null or undefined when calling deprecateApiPlan.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling deprecateApiPlan.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling deprecateApiPlan.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling deprecateApiPlan.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/plans/{plan}/_deprecate`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_PLAN[UPDATE] permission to use this service
     * Deprecate a plan
     */
    async deprecateApiPlan(requestParameters) {
        const response = await this.deprecateApiPlanRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Deprecated, Update the API with an existing API definition in JSON format either with json or via an URL
     */
    async deprecatedUpdateApiWithDefinitionRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling deprecatedUpdateApiWithDefinition.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling deprecatedUpdateApiWithDefinition.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling deprecatedUpdateApiWithDefinition.');
        }
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling deprecatedUpdateApiWithDefinition.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/import`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Deprecated, Update the API with an existing API definition in JSON format either with json or via an URL
     */
    async deprecatedUpdateApiWithDefinition(requestParameters) {
        const response = await this.deprecatedUpdateApiWithDefinitionRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Deprecated, use PUT method instead. Update the API with an existing Swagger descriptor
     */
    async deprecatedUpdateApiWithSwaggerRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling deprecatedUpdateApiWithSwagger.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling deprecatedUpdateApiWithSwagger.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling deprecatedUpdateApiWithSwagger.');
        }
        if (requestParameters.importSwaggerDescriptorEntity === null || requestParameters.importSwaggerDescriptorEntity === undefined) {
            throw new runtime.RequiredError('importSwaggerDescriptorEntity', 'Required parameter requestParameters.importSwaggerDescriptorEntity was null or undefined when calling deprecatedUpdateApiWithSwagger.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/import/swagger`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportSwaggerDescriptorEntityToJSON(requestParameters.importSwaggerDescriptorEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Deprecated, use PUT method instead. Update the API with an existing Swagger descriptor
     */
    async deprecatedUpdateApiWithSwagger(requestParameters) {
        const response = await this.deprecatedUpdateApiWithSwaggerRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_PLAN[UPDATE] permission to use this service
     * Deprecated, use \'_deprecate\' instead. Deprecate a plan
     */
    async depreciateApiPlanRaw(requestParameters) {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan', 'Required parameter requestParameters.plan was null or undefined when calling depreciateApiPlan.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling depreciateApiPlan.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling depreciateApiPlan.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling depreciateApiPlan.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/plans/{plan}/_depreciate`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_PLAN[UPDATE] permission to use this service
     * Deprecated, use \'_deprecate\' instead. Deprecate a plan
     */
    async depreciateApiPlan(requestParameters) {
        const response = await this.depreciateApiPlanRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_LIFECYCLE permission to use this service
     * Manage the API\'s lifecycle
     */
    async doApiLifecycleActionRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling doApiLifecycleAction.');
        }
        if (requestParameters.action === null || requestParameters.action === undefined) {
            throw new runtime.RequiredError('action', 'Required parameter requestParameters.action was null or undefined when calling doApiLifecycleAction.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling doApiLifecycleAction.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling doApiLifecycleAction.');
        }
        const queryParameters = {};
        if (requestParameters.action !== undefined) {
            queryParameters['action'] = requestParameters.action;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the MANAGE_LIFECYCLE permission to use this service
     * Manage the API\'s lifecycle
     */
    async doApiLifecycleAction(requestParameters) {
        await this.doApiLifecycleActionRaw(requestParameters);
    }
    /**
     * User must have the API_DEFINITION[UPDATE] or API_REVIEWS[UPDATE] permission to use this service (depending on the action)
     * Manage the API\'s review state
     */
    async doApiReviewActionRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling doApiReviewAction.');
        }
        if (requestParameters.action === null || requestParameters.action === undefined) {
            throw new runtime.RequiredError('action', 'Required parameter requestParameters.action was null or undefined when calling doApiReviewAction.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling doApiReviewAction.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling doApiReviewAction.');
        }
        const queryParameters = {};
        if (requestParameters.action !== undefined) {
            queryParameters['action'] = requestParameters.action;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/reviews`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewEntityToJSON(requestParameters.reviewEntity),
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the API_DEFINITION[UPDATE] or API_REVIEWS[UPDATE] permission to use this service (depending on the action)
     * Manage the API\'s review state
     */
    async doApiReviewAction(requestParameters) {
        await this.doApiReviewActionRaw(requestParameters);
    }
    /**
     * User must have the MANAGE_API create permission to use this service
     * Duplicate the API
     */
    async duplicateAPIRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling duplicateAPI.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling duplicateAPI.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling duplicateAPI.');
        }
        if (requestParameters.duplicateApiEntity === null || requestParameters.duplicateApiEntity === undefined) {
            throw new runtime.RequiredError('duplicateApiEntity', 'Required parameter requestParameters.duplicateApiEntity was null or undefined when calling duplicateAPI.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/duplicate`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DuplicateApiEntityToJSON(requestParameters.duplicateApiEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_API create permission to use this service
     * Duplicate the API
     */
    async duplicateAPI(requestParameters) {
        const response = await this.duplicateAPIRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Export the API definition in JSON format
     */
    async exportApiDefinitionRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling exportApiDefinition.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling exportApiDefinition.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling exportApiDefinition.');
        }
        const queryParameters = {};
        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }
        if (requestParameters.exclude !== undefined) {
            queryParameters['exclude'] = requestParameters.exclude;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/export`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Export the API definition in JSON format
     */
    async exportApiDefinition(requestParameters) {
        const response = await this.exportApiDefinitionRaw(requestParameters);
        return await response.value();
    }
    /**
     * Export API logs as CSV
     */
    async exportApiLogsAsCSVRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling exportApiLogsAsCSV.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling exportApiLogsAsCSV.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling exportApiLogsAsCSV.');
        }
        const queryParameters = {};
        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }
        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }
        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }
        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.field !== undefined) {
            queryParameters['field'] = requestParameters.field;
        }
        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/logs/export`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * Export API logs as CSV
     */
    async exportApiLogsAsCSV(requestParameters) {
        const response = await this.exportApiLogsAsCSVRaw(requestParameters);
        return await response.value();
    }
    /**
     * Export API logs as CSV
     */
    async exportApiSubscriptionsLogsAsCSVRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling exportApiSubscriptionsLogsAsCSV.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling exportApiSubscriptionsLogsAsCSV.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling exportApiSubscriptionsLogsAsCSV.');
        }
        const queryParameters = {};
        if (requestParameters.plan) {
            queryParameters['plan'] = requestParameters.plan.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.application) {
            queryParameters['application'] = requestParameters.application.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.apiKey !== undefined) {
            queryParameters['api_key'] = requestParameters.apiKey;
        }
        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/export`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * Export API logs as CSV
     */
    async exportApiSubscriptionsLogsAsCSV(requestParameters) {
        const response = await this.exportApiSubscriptionsLogsAsCSVRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Refresh all pages by calling their associated fetcher
     */
    async fetchAllApiPagesRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling fetchAllApiPages.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling fetchAllApiPages.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling fetchAllApiPages.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/_fetch`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Refresh all pages by calling their associated fetcher
     */
    async fetchAllApiPages(requestParameters) {
        const response = await this.fetchAllApiPagesRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Refresh page by calling the associated fetcher
     */
    async fetchApiPageRaw(requestParameters) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page', 'Required parameter requestParameters.page was null or undefined when calling fetchApiPage.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling fetchApiPage.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling fetchApiPage.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling fetchApiPage.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}/_fetch`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Refresh page by calling the associated fetcher
     */
    async fetchApiPage(requestParameters) {
        const response = await this.fetchApiPageRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the READ permission on the API_DEFINITION to use this service on a private API.
     * Get the API
     */
    async getApiRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApi.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApi.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApi.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * User must have the READ permission on the API_DEFINITION to use this service on a private API.
     * Get the API
     */
    async getApi(requestParameters) {
        const response = await this.getApiRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Retrieve the list of events for an alert
     */
    async getApiAlertEventsRaw(requestParameters) {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert', 'Required parameter requestParameters.alert was null or undefined when calling getApiAlertEvents.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiAlertEvents.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiAlertEvents.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiAlertEvents.');
        }
        const queryParameters = {};
        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }
        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/alerts/{alert}/events`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => AlertEventPageFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Retrieve the list of events for an alert
     */
    async getApiAlertEvents(requestParameters) {
        const response = await this.getApiAlertEventsRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_ALERT[READ] permission to use this service
     * List alerts of an API
     */
    async getApiAlertsRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiAlerts.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiAlerts.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiAlerts.');
        }
        const queryParameters = {};
        if (requestParameters.eventCounts !== undefined) {
            queryParameters['event_counts'] = requestParameters.eventCounts;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/alerts`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlertTriggerEntityFromJSON));
    }
    /**
     * User must have the API_ALERT[READ] permission to use this service
     * List alerts of an API
     */
    async getApiAlerts(requestParameters) {
        const response = await this.getApiAlertsRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Get alerting status
     */
    async getApiAlertsStatusRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiAlertsStatus.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiAlertsStatus.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiAlertsStatus.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/alerts/status`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => AlertStatusEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGEMENT_ALERT[READ] permission to use this service
     * Get alerting status
     */
    async getApiAlertsStatus(requestParameters) {
        const response = await this.getApiAlertsStatusRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_ANALYTICS[READ] permission to use this service
     * Get API analytics
     */
    async getApiAnalyticsHitsRaw(requestParameters) {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getApiAnalyticsHits.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiAnalyticsHits.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiAnalyticsHits.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiAnalyticsHits.');
        }
        const queryParameters = {};
        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }
        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }
        if (requestParameters.interval !== undefined) {
            queryParameters['interval'] = requestParameters.interval;
        }
        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }
        if (requestParameters.field !== undefined) {
            queryParameters['field'] = requestParameters.field;
        }
        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.ranges) {
            queryParameters['ranges'] = requestParameters.ranges.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.aggs) {
            queryParameters['aggs'] = requestParameters.aggs.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/analytics`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsFromJSON(jsonValue));
    }
    /**
     * User must have the API_ANALYTICS[READ] permission to use this service
     * Get API analytics
     */
    async getApiAnalyticsHits(requestParameters) {
        const response = await this.getApiAnalyticsHitsRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_AUDIT[READ] permission to use this service
     * List available audit event type for API
     */
    async getApiAuditEventsRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiAuditEvents.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiAuditEvents.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiAuditEvents.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/audit/events`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the API_AUDIT[READ] permission to use this service
     * List available audit event type for API
     */
    async getApiAuditEvents(requestParameters) {
        await this.getApiAuditEventsRaw(requestParameters);
    }
    /**
     * User must have the API_AUDIT[READ] permission to use this service
     * Retrieve audit logs for the API
     */
    async getApiAuditsRaw(requestParameters) {
        if (requestParameters.api2 === null || requestParameters.api2 === undefined) {
            throw new runtime.RequiredError('api2', 'Required parameter requestParameters.api2 was null or undefined when calling getApiAudits.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiAudits.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiAudits.');
        }
        const queryParameters = {};
        if (requestParameters.environment !== undefined) {
            queryParameters['environment'] = requestParameters.environment;
        }
        if (requestParameters.api !== undefined) {
            queryParameters['api'] = requestParameters.api;
        }
        if (requestParameters.application !== undefined) {
            queryParameters['application'] = requestParameters.application;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.event !== undefined) {
            queryParameters['event'] = requestParameters.event;
        }
        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }
        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }
        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/audit`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api2))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataPageAuditEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_AUDIT[READ] permission to use this service
     * Retrieve audit logs for the API
     */
    async getApiAudits(requestParameters) {
        const response = await this.getApiAuditsRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the READ permission to use this service
     * Get the API\'s background
     */
    async getApiBackgroundRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiBackground.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiBackground.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiBackground.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/background`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.BlobApiResponse(response);
    }
    /**
     * User must have the READ permission to use this service
     * Get the API\'s background
     */
    async getApiBackground(requestParameters) {
        const response = await this.getApiBackgroundRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_DEFINITION[READ] permission to use this service
     * Export the API definition in JSON format
     */
    async getApiDefinitionRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiDefinition.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiDefinition.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiDefinition.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/definition`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * User must have the API_DEFINITION[READ] permission to use this service
     * Export the API definition in JSON format
     */
    async getApiDefinition(requestParameters) {
        const response = await this.getApiDefinitionRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_LIFECYCLE permission to use this service
     * Get API\'s events
     */
    async getApiEventsEventsRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiEventsEvents.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiEventsEvents.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiEventsEvents.');
        }
        const queryParameters = {};
        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/events`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventEntityFromJSON));
    }
    /**
     * User must have the MANAGE_LIFECYCLE permission to use this service
     * Get API\'s events
     */
    async getApiEventsEvents(requestParameters) {
        const response = await this.getApiEventsEventsRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get the API configuration schema
     */
    async getApiFlowSchemaFormRaw(requestParameters) {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiFlowSchemaForm.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiFlowSchemaForm.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/schema`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * Get the API configuration schema
     */
    async getApiFlowSchemaForm(requestParameters) {
        const response = await this.getApiFlowSchemaFormRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Get API groups mapped to members
     */
    async getApiGroupsWithMembersRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiGroupsWithMembers.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiGroupsWithMembers.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiGroupsWithMembers.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/groups`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiGroupsWithMembersMapFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Get API groups mapped to members
     */
    async getApiGroupsWithMembers(requestParameters) {
        const response = await this.getApiGroupsWithMembersRaw(requestParameters);
        return await response.value();
    }
    /**
     * Health-check statistics for API
     */
    async getApiHealthRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiHealth.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiHealth.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiHealth.');
        }
        const queryParameters = {};
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.field !== undefined) {
            queryParameters['field'] = requestParameters.field;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/health`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiMetricsFromJSON(jsonValue));
    }
    /**
     * Health-check statistics for API
     */
    async getApiHealth(requestParameters) {
        const response = await this.getApiHealthRaw(requestParameters);
        return await response.value();
    }
    /**
     * Health-check average statistics for API
     */
    async getApiHealthAverageRaw(requestParameters) {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getApiHealthAverage.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiHealthAverage.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiHealthAverage.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiHealthAverage.');
        }
        const queryParameters = {};
        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }
        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }
        if (requestParameters.interval !== undefined) {
            queryParameters['interval'] = requestParameters.interval;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/health/average`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Health-check average statistics for API
     */
    async getApiHealthAverage(requestParameters) {
        await this.getApiHealthAverageRaw(requestParameters);
    }
    /**
     * Health-check log
     */
    async getApiHealthCheckLogRaw(requestParameters) {
        if (requestParameters.log === null || requestParameters.log === undefined) {
            throw new runtime.RequiredError('log', 'Required parameter requestParameters.log was null or undefined when calling getApiHealthCheckLog.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiHealthCheckLog.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiHealthCheckLog.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiHealthCheckLog.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/health/logs/{log}`.replace(`{${"log"}}`, encodeURIComponent(String(requestParameters.log))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => LogFromJSON(jsonValue));
    }
    /**
     * Health-check log
     */
    async getApiHealthCheckLog(requestParameters) {
        const response = await this.getApiHealthCheckLogRaw(requestParameters);
        return await response.value();
    }
    /**
     * Health-check logs
     */
    async getApiHealthCheckLogsRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiHealthCheckLogs.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiHealthCheckLogs.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiHealthCheckLogs.');
        }
        const queryParameters = {};
        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }
        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }
        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }
        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.transition !== undefined) {
            queryParameters['transition'] = requestParameters.transition;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/health/logs`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => SearchLogResponseFromJSON(jsonValue));
    }
    /**
     * Health-check logs
     */
    async getApiHealthCheckLogs(requestParameters) {
        const response = await this.getApiHealthCheckLogsRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get the list of available hooks
     */
    async getApiHooksRaw(requestParameters) {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiHooks.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiHooks.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/hooks`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HookFromJSON));
    }
    /**
     * Get the list of available hooks
     */
    async getApiHooks(requestParameters) {
        const response = await this.getApiHooksRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * List all API Keys for a subscription
     */
    async getApiKeysForApiSubscriptionRaw(requestParameters) {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription', 'Required parameter requestParameters.subscription was null or undefined when calling getApiKeysForApiSubscription.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiKeysForApiSubscription.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiKeysForApiSubscription.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiKeysForApiSubscription.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/apikeys`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiKeyEntityFromJSON));
    }
    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * List all API Keys for a subscription
     */
    async getApiKeysForApiSubscription(requestParameters) {
        const response = await this.getApiKeysForApiSubscriptionRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get a specific log
     */
    async getApiLogRaw(requestParameters) {
        if (requestParameters.log === null || requestParameters.log === undefined) {
            throw new runtime.RequiredError('log', 'Required parameter requestParameters.log was null or undefined when calling getApiLog.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiLog.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiLog.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiLog.');
        }
        const queryParameters = {};
        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/logs/{log}`.replace(`{${"log"}}`, encodeURIComponent(String(requestParameters.log))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiRequestFromJSON(jsonValue));
    }
    /**
     * Get a specific log
     */
    async getApiLog(requestParameters) {
        const response = await this.getApiLogRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get API logs
     */
    async getApiLogsRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiLogs.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiLogs.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiLogs.');
        }
        const queryParameters = {};
        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }
        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }
        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }
        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.field !== undefined) {
            queryParameters['field'] = requestParameters.field;
        }
        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/logs`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiRequestItemSearchLogResponseFromJSON(jsonValue));
    }
    /**
     * Get API logs
     */
    async getApiLogs(requestParameters) {
        const response = await this.getApiLogsRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieve a media for an API
     */
    async getApiMediaImageRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiMediaImage.');
        }
        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling getApiMediaImage.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiMediaImage.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiMediaImage.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/media/{hash}`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Retrieve a media for an API
     */
    async getApiMediaImage(requestParameters) {
        await this.getApiMediaImageRaw(requestParameters);
    }
    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * List API members
     */
    async getApiMembersRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiMembers.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiMembers.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiMembers.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/members`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MembershipListItemFromJSON));
    }
    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * List API members
     */
    async getApiMembers(requestParameters) {
        const response = await this.getApiMembersRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Get API members
     */
    async getApiMembersPermissionsRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiMembersPermissions.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiMembersPermissions.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiMembersPermissions.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/members/permissions`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemberEntityFromJSON));
    }
    /**
     * User must have the MANAGE_MEMBERS permission to use this service
     * Get API members
     */
    async getApiMembersPermissions(requestParameters) {
        const response = await this.getApiMembersPermissionsRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_METADATA[READ] permission to use this service
     * A metadata for the given API and metadata id
     */
    async getApiMetadataRaw(requestParameters) {
        if (requestParameters.metadata === null || requestParameters.metadata === undefined) {
            throw new runtime.RequiredError('metadata', 'Required parameter requestParameters.metadata was null or undefined when calling getApiMetadata.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiMetadata.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiMetadata.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiMetadata.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/metadata/{metadata}`.replace(`{${"metadata"}}`, encodeURIComponent(String(requestParameters.metadata))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiMetadataEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_METADATA[READ] permission to use this service
     * A metadata for the given API and metadata id
     */
    async getApiMetadata(requestParameters) {
        const response = await this.getApiMetadataRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_METADATA[READ] permission to use this service
     * List metadata for the given API
     */
    async getApiMetadatasRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiMetadatas.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiMetadatas.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiMetadatas.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/metadata`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiMetadataEntityFromJSON));
    }
    /**
     * User must have the API_METADATA[READ] permission to use this service
     * List metadata for the given API
     */
    async getApiMetadatas(requestParameters) {
        const response = await this.getApiMetadatasRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get notification settings
     */
    async getApiNotificationSettingsRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiNotificationSettings.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiNotificationSettings.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiNotificationSettings.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/notificationsettings`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Get notification settings
     */
    async getApiNotificationSettings(requestParameters) {
        const response = await this.getApiNotificationSettingsRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_NOTIFICATION[READ] permission to use this service
     * List available notifiers for API
     */
    async getApiNotifiersRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiNotifiers.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiNotifiers.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiNotifiers.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/notifiers`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotifierEntityFromJSON));
    }
    /**
     * User must have the API_NOTIFICATION[READ] permission to use this service
     * List available notifiers for API
     */
    async getApiNotifiers(requestParameters) {
        const response = await this.getApiNotifiersRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the READ permission to use this service
     * Get a page
     */
    async getApiPageRaw(requestParameters) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page', 'Required parameter requestParameters.page was null or undefined when calling getApiPage.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiPage.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiPage.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiPage.');
        }
        const queryParameters = {};
        if (requestParameters.portal !== undefined) {
            queryParameters['portal'] = requestParameters.portal;
        }
        if (requestParameters.translated !== undefined) {
            queryParameters['translated'] = requestParameters.translated;
        }
        const headerParameters = {};
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }
    /**
     * User must have the READ permission to use this service
     * Get a page
     */
    async getApiPage(requestParameters) {
        const response = await this.getApiPageRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the READ permission to use this service
     * Get the page\'s content
     */
    async getApiPageContentRaw(requestParameters) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page', 'Required parameter requestParameters.page was null or undefined when calling getApiPageContent.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiPageContent.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiPageContent.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiPageContent.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}/content`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * User must have the READ permission to use this service
     * Get the page\'s content
     */
    async getApiPageContent(requestParameters) {
        const response = await this.getApiPageContentRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_DOCUMENTATION[READ] permission to use this service
     * Retrieve all media for an API page
     */
    async getApiPageMediaRaw(requestParameters) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page', 'Required parameter requestParameters.page was null or undefined when calling getApiPageMedia.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiPageMedia.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiPageMedia.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiPageMedia.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}/media`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the API_DOCUMENTATION[READ] permission to use this service
     * Retrieve all media for an API page
     */
    async getApiPageMedia(requestParameters) {
        await this.getApiPageMediaRaw(requestParameters);
    }
    /**
     * User must have the READ permission to use this service
     * List pages
     */
    async getApiPagesRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiPages.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiPages.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiPages.');
        }
        const queryParameters = {};
        if (requestParameters.homepage !== undefined) {
            queryParameters['homepage'] = requestParameters.homepage;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }
        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }
        if (requestParameters.root !== undefined) {
            queryParameters['root'] = requestParameters.root;
        }
        if (requestParameters.translated !== undefined) {
            queryParameters['translated'] = requestParameters.translated;
        }
        const headerParameters = {};
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PageEntityFromJSON));
    }
    /**
     * User must have the READ permission to use this service
     * List pages
     */
    async getApiPages(requestParameters) {
        const response = await this.getApiPagesRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the READ permission to use this service
     * Get the API\'s picture
     */
    async getApiPictureRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiPicture.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiPicture.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiPicture.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/picture`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.BlobApiResponse(response);
    }
    /**
     * User must have the READ permission to use this service
     * Get the API\'s picture
     */
    async getApiPicture(requestParameters) {
        const response = await this.getApiPictureRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the READ permission to use this service
     * Get a plan
     */
    async getApiPlanRaw(requestParameters) {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan', 'Required parameter requestParameters.plan was null or undefined when calling getApiPlan.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiPlan.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiPlan.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiPlan.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/plans/{plan}`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityFromJSON(jsonValue));
    }
    /**
     * User must have the READ permission to use this service
     * Get a plan
     */
    async getApiPlan(requestParameters) {
        const response = await this.getApiPlanRaw(requestParameters);
        return await response.value();
    }
    /**
     * List all the plans accessible to the current user.
     * List plans for an API
     */
    async getApiPlansRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiPlans.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiPlans.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiPlans.');
        }
        const queryParameters = {};
        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.security) {
            queryParameters['security'] = requestParameters.security.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/plans`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlanEntityFromJSON));
    }
    /**
     * List all the plans accessible to the current user.
     * List plans for an API
     */
    async getApiPlans(requestParameters) {
        const response = await this.getApiPlansRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get the quality metrics of the API
     */
    async getApiQualityMetricsRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiQualityMetrics.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiQualityMetrics.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiQualityMetrics.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/quality`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiQualityMetricsEntityFromJSON(jsonValue));
    }
    /**
     * Get the quality metrics of the API
     */
    async getApiQualityMetrics(requestParameters) {
        const response = await this.getApiQualityMetricsRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_QUALITY_RULE[READ] permission to use this service
     * List quality rules for an API
     */
    async getApiQualityRulesRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiQualityRules.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiQualityRules.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiQualityRules.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/quality-rules`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiQualityRuleEntityFromJSON));
    }
    /**
     * User must have the API_QUALITY_RULE[READ] permission to use this service
     * List quality rules for an API
     */
    async getApiQualityRules(requestParameters) {
        const response = await this.getApiQualityRulesRaw(requestParameters);
        return await response.value();
    }
    /**
     * List ratings for an API
     */
    async getApiRatingRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiRating.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiRating.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiRating.');
        }
        const queryParameters = {};
        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }
        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PageRatingEntityFromJSON(jsonValue));
    }
    /**
     * List ratings for an API
     */
    async getApiRating(requestParameters) {
        const response = await this.getApiRatingRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieve current rating for an API provided by the authenticated user
     */
    async getApiRatingByApiAndUserRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiRatingByApiAndUser.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiRatingByApiAndUser.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiRatingByApiAndUser.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/current`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => RatingEntityFromJSON(jsonValue));
    }
    /**
     * Retrieve current rating for an API provided by the authenticated user
     */
    async getApiRatingByApiAndUser(requestParameters) {
        const response = await this.getApiRatingByApiAndUserRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get the rating summary for an API
     */
    async getApiRatingSummaryByApiRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiRatingSummaryByApi.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiRatingSummaryByApi.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiRatingSummaryByApi.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/summary`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => RatingSummaryEntityFromJSON(jsonValue));
    }
    /**
     * Get the rating summary for an API
     */
    async getApiRatingSummaryByApi(requestParameters) {
        const response = await this.getApiRatingSummaryByApiRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_SUBSCRIPTIONS permission to use this service
     * List subscribers for the API
     */
    async getApiSubscribersRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiSubscribers.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiSubscribers.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiSubscribers.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscribers`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationEntityFromJSON));
    }
    /**
     * User must have the MANAGE_SUBSCRIPTIONS permission to use this service
     * List subscribers for the API
     */
    async getApiSubscribers(requestParameters) {
        const response = await this.getApiSubscribersRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Get a subscription
     */
    async getApiSubscriptionRaw(requestParameters) {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription', 'Required parameter requestParameters.subscription was null or undefined when calling getApiSubscription.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiSubscription.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiSubscription.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiSubscription.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Get a subscription
     */
    async getApiSubscription(requestParameters) {
        const response = await this.getApiSubscriptionRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the READ_SUBSCRIPTION permission to use this service
     * List subscriptions for the API
     */
    async getApiSubscriptionsRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getApiSubscriptions.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApiSubscriptions.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApiSubscriptions.');
        }
        const queryParameters = {};
        if (requestParameters.plan) {
            queryParameters['plan'] = requestParameters.plan.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.application) {
            queryParameters['application'] = requestParameters.application.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.apiKey !== undefined) {
            queryParameters['api_key'] = requestParameters.apiKey;
        }
        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionEntityPageResultFromJSON(jsonValue));
    }
    /**
     * User must have the READ_SUBSCRIPTION permission to use this service
     * List subscriptions for the API
     */
    async getApiSubscriptions(requestParameters) {
        const response = await this.getApiSubscriptionsRaw(requestParameters);
        return await response.value();
    }
    /**
     * List all the APIs accessible to the current user.
     * List APIs
     */
    async getApisRaw(requestParameters) {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApis.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApis.');
        }
        const queryParameters = {};
        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }
        if (requestParameters.group !== undefined) {
            queryParameters['group'] = requestParameters.group;
        }
        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }
        if (requestParameters.contextPath !== undefined) {
            queryParameters['context-path'] = requestParameters.contextPath;
        }
        if (requestParameters.label !== undefined) {
            queryParameters['label'] = requestParameters.label;
        }
        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }
        if (requestParameters.visibility !== undefined) {
            queryParameters['visibility'] = requestParameters.visibility;
        }
        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }
        if (requestParameters.executionMode !== undefined) {
            queryParameters['executionMode'] = requestParameters.executionMode;
        }
        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }
        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }
        if (requestParameters.portal !== undefined) {
            queryParameters['portal'] = requestParameters.portal;
        }
        if (requestParameters.crossId !== undefined) {
            queryParameters['crossId'] = requestParameters.crossId;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiListItemFromJSON));
    }
    /**
     * List all the APIs accessible to the current user.
     * List APIs
     */
    async getApis(requestParameters) {
        const response = await this.getApisRaw(requestParameters);
        return await response.value();
    }
    /**
     * List all the APIs accessible to the current user with pagination.
     * List APIs with pagination
     */
    async getApisPagedRaw(requestParameters) {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getApisPaged.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getApisPaged.');
        }
        const queryParameters = {};
        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }
        if (requestParameters.group !== undefined) {
            queryParameters['group'] = requestParameters.group;
        }
        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }
        if (requestParameters.contextPath !== undefined) {
            queryParameters['context-path'] = requestParameters.contextPath;
        }
        if (requestParameters.label !== undefined) {
            queryParameters['label'] = requestParameters.label;
        }
        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }
        if (requestParameters.visibility !== undefined) {
            queryParameters['visibility'] = requestParameters.visibility;
        }
        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }
        if (requestParameters.executionMode !== undefined) {
            queryParameters['executionMode'] = requestParameters.executionMode;
        }
        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }
        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }
        if (requestParameters.portal !== undefined) {
            queryParameters['portal'] = requestParameters.portal;
        }
        if (requestParameters.crossId !== undefined) {
            queryParameters['crossId'] = requestParameters.crossId;
        }
        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/_paged`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiListItemPagedResultFromJSON(jsonValue));
    }
    /**
     * List all the APIs accessible to the current user with pagination.
     * List APIs with pagination
     */
    async getApisPaged(requestParameters) {
        const response = await this.getApisPagedRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the READ API_EVENT permission to use this service
     * Get an API event with its id
     */
    async getEventRaw(requestParameters) {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId', 'Required parameter requestParameters.eventId was null or undefined when calling getEvent.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getEvent.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getEvent.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getEvent.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/events/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => EventEntityFromJSON(jsonValue));
    }
    /**
     * User must have the READ API_EVENT permission to use this service
     * Get an API event with its id
     */
    async getEvent(requestParameters) {
        const response = await this.getEventRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_ALERT[READ] permission to use this service
     * List configured alerts of the API
     */
    async getPlatformAlertsAnalyticsRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getPlatformAlertsAnalytics.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getPlatformAlertsAnalytics.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getPlatformAlertsAnalytics.');
        }
        const queryParameters = {};
        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }
        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/alerts/analytics`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlertTriggerEntityFromJSON));
    }
    /**
     * User must have the API_ALERT[READ] permission to use this service
     * List configured alerts of the API
     */
    async getPlatformAlertsAnalytics(requestParameters) {
        const response = await this.getPlatformAlertsAnalyticsRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get the portal API headers values
     */
    async getPortalApiHeadersRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling getPortalApiHeaders.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling getPortalApiHeaders.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling getPortalApiHeaders.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/headers`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiHeaderEntityFromJSON));
    }
    /**
     * Get the portal API headers values
     */
    async getPortalApiHeaders(requestParameters) {
        const response = await this.getPortalApiHeadersRaw(requestParameters);
        return await response.value();
    }
    /**
     * Create an API by importing an existing API definition in JSON format.
     * Create an API by importing an API definition
     */
    async importApiDefinitionRaw(requestParameters) {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling importApiDefinition.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling importApiDefinition.');
        }
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling importApiDefinition.');
        }
        const queryParameters = {};
        if (requestParameters.definitionVersion !== undefined) {
            queryParameters['definitionVersion'] = requestParameters.definitionVersion;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/import`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * Create an API by importing an existing API definition in JSON format.
     * Create an API by importing an API definition
     */
    async importApiDefinition(requestParameters) {
        const response = await this.importApiDefinitionRaw(requestParameters);
        return await response.value();
    }
    /**
     * Create an API by importing an existing API definition via a URL
     * Create an API by importing a URL pointing to an API definition
     */
    async importApiDefinitionUrlRaw(requestParameters) {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling importApiDefinitionUrl.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling importApiDefinitionUrl.');
        }
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling importApiDefinitionUrl.');
        }
        const queryParameters = {};
        if (requestParameters.definitionVersion !== undefined) {
            queryParameters['definitionVersion'] = requestParameters.definitionVersion;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'text/plain';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/import-url`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * Create an API by importing an existing API definition via a URL
     * Create an API by importing a URL pointing to an API definition
     */
    async importApiDefinitionUrl(requestParameters) {
        const response = await this.importApiDefinitionUrlRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must be ADMIN to use this service
     * Import pages
     */
    async importApiPageFilesRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling importApiPageFiles.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling importApiPageFiles.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling importApiPageFiles.');
        }
        if (requestParameters.importPageEntity === null || requestParameters.importPageEntity === undefined) {
            throw new runtime.RequiredError('importPageEntity', 'Required parameter requestParameters.importPageEntity was null or undefined when calling importApiPageFiles.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/_import`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportPageEntityToJSON(requestParameters.importPageEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }
    /**
     * User must be ADMIN to use this service
     * Import pages
     */
    async importApiPageFiles(requestParameters) {
        const response = await this.importApiPageFilesRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Import path mappings from a page
     */
    async importApiPathMappingsFromPageRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling importApiPathMappingsFromPage.');
        }
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page', 'Required parameter requestParameters.page was null or undefined when calling importApiPathMappingsFromPage.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling importApiPathMappingsFromPage.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling importApiPathMappingsFromPage.');
        }
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.definitionVersion !== undefined) {
            queryParameters['definitionVersion'] = requestParameters.definitionVersion;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/import-path-mappings`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Import path mappings from a page
     */
    async importApiPathMappingsFromPage(requestParameters) {
        const response = await this.importApiPathMappingsFromPageRaw(requestParameters);
        return await response.value();
    }
    /**
     * Create an API definition from a Swagger descriptor
     */
    async importSwaggerApiRaw(requestParameters) {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling importSwaggerApi.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling importSwaggerApi.');
        }
        if (requestParameters.importSwaggerDescriptorEntity === null || requestParameters.importSwaggerDescriptorEntity === undefined) {
            throw new runtime.RequiredError('importSwaggerDescriptorEntity', 'Required parameter requestParameters.importSwaggerDescriptorEntity was null or undefined when calling importSwaggerApi.');
        }
        const queryParameters = {};
        if (requestParameters.definitionVersion !== undefined) {
            queryParameters['definitionVersion'] = requestParameters.definitionVersion;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/import/swagger`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportSwaggerDescriptorEntityToJSON(requestParameters.importSwaggerDescriptorEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * Create an API definition from a Swagger descriptor
     */
    async importSwaggerApi(requestParameters) {
        const response = await this.importSwaggerApiRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_LIFECYCLE permission to use this service
     * Get the state of the API
     */
    async isApiSynchronizedRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling isApiSynchronized.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling isApiSynchronized.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling isApiSynchronized.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/state`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiStateEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_LIFECYCLE permission to use this service
     * Get the state of the API
     */
    async isApiSynchronized(requestParameters) {
        const response = await this.isApiSynchronizedRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_API create permission to use this service
     * Migrate the API definition to be used with Policy Studio
     */
    async migrateAPIRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling migrateAPI.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling migrateAPI.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling migrateAPI.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/_migrate`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_API create permission to use this service
     * Migrate the API definition to be used with Policy Studio
     */
    async migrateAPI(requestParameters) {
        const response = await this.migrateAPIRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Update a page
     */
    async partialUpdateApiPageRaw(requestParameters) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page', 'Required parameter requestParameters.page was null or undefined when calling partialUpdateApiPage.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling partialUpdateApiPage.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling partialUpdateApiPage.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling partialUpdateApiPage.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePageEntityToJSON(requestParameters.updatePageEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Update a page
     */
    async partialUpdateApiPage(requestParameters) {
        const response = await this.partialUpdateApiPageRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_DEFINITION[UPDATE] permission to use this service
     * Update the API with json patches
     */
    async patchRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling patch.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling patch.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling patch.');
        }
        if (requestParameters.jsonPatch === null || requestParameters.jsonPatch === undefined) {
            throw new runtime.RequiredError('jsonPatch', 'Required parameter requestParameters.jsonPatch was null or undefined when calling patch.');
        }
        const queryParameters = {};
        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/definition`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.jsonPatch.map(JsonPatchToJSON),
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * User must have the API_DEFINITION[UPDATE] permission to use this service
     * Update the API with json patches
     */
    async patch(requestParameters) {
        const response = await this.patchRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Update a subscription
     */
    async processApiSubscriptionRaw(requestParameters) {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription', 'Required parameter requestParameters.subscription was null or undefined when calling processApiSubscription.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling processApiSubscription.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling processApiSubscription.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling processApiSubscription.');
        }
        if (requestParameters.processSubscriptionEntity === null || requestParameters.processSubscriptionEntity === undefined) {
            throw new runtime.RequiredError('processSubscriptionEntity', 'Required parameter requestParameters.processSubscriptionEntity was null or undefined when calling processApiSubscription.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/_process`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessSubscriptionEntityToJSON(requestParameters.processSubscriptionEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Update a subscription
     */
    async processApiSubscription(requestParameters) {
        const response = await this.processApiSubscriptionRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_DEFINITION update permission to use this service
     * Promote the API to another environment
     */
    async promoteAPIRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling promoteAPI.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling promoteAPI.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling promoteAPI.');
        }
        if (requestParameters.promotionRequestEntity === null || requestParameters.promotionRequestEntity === undefined) {
            throw new runtime.RequiredError('promotionRequestEntity', 'Required parameter requestParameters.promotionRequestEntity was null or undefined when calling promoteAPI.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/_promote`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromotionRequestEntityToJSON(requestParameters.promotionRequestEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_DEFINITION update permission to use this service
     * Promote the API to another environment
     */
    async promoteAPI(requestParameters) {
        const response = await this.promoteAPIRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Publicly publish plan
     */
    async publishApiPlanRaw(requestParameters) {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan', 'Required parameter requestParameters.plan was null or undefined when calling publishApiPlan.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling publishApiPlan.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling publishApiPlan.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling publishApiPlan.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/plans/{plan}/_publish`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Publicly publish plan
     */
    async publishApiPlan(requestParameters) {
        const response = await this.publishApiPlanRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_SUBSCRIPTION permission to use this service
     * Reactivate an API key
     */
    async reactivateApiKeyForApiSubscriptionRaw(requestParameters) {
        if (requestParameters.apikey === null || requestParameters.apikey === undefined) {
            throw new runtime.RequiredError('apikey', 'Required parameter requestParameters.apikey was null or undefined when calling reactivateApiKeyForApiSubscription.');
        }
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription', 'Required parameter requestParameters.subscription was null or undefined when calling reactivateApiKeyForApiSubscription.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling reactivateApiKeyForApiSubscription.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling reactivateApiKeyForApiSubscription.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling reactivateApiKeyForApiSubscription.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/apikeys/{apikey}/_reactivate`.replace(`{${"apikey"}}`, encodeURIComponent(String(requestParameters.apikey))).replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the API_SUBSCRIPTION permission to use this service
     * Reactivate an API key
     */
    async reactivateApiKeyForApiSubscription(requestParameters) {
        await this.reactivateApiKeyForApiSubscriptionRaw(requestParameters);
    }
    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * Renew an API key
     */
    async renewSubscriptionApiKeysForApiSubscriptionRaw(requestParameters) {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription', 'Required parameter requestParameters.subscription was null or undefined when calling renewSubscriptionApiKeysForApiSubscription.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling renewSubscriptionApiKeysForApiSubscription.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling renewSubscriptionApiKeysForApiSubscription.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling renewSubscriptionApiKeysForApiSubscription.');
        }
        const queryParameters = {};
        if (requestParameters.customApiKey !== undefined) {
            queryParameters['customApiKey'] = requestParameters.customApiKey;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/apikeys/_renew`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_API_KEYS permission to use this service
     * Renew an API key
     */
    async renewSubscriptionApiKeysForApiSubscription(requestParameters) {
        const response = await this.renewSubscriptionApiKeysForApiSubscriptionRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_SUBSCRIPTION:DELETE permission to use this service
     * Revoke API key
     */
    async revokeApiKeyForApiSubscriptionRaw(requestParameters) {
        if (requestParameters.apikey === null || requestParameters.apikey === undefined) {
            throw new runtime.RequiredError('apikey', 'Required parameter requestParameters.apikey was null or undefined when calling revokeApiKeyForApiSubscription.');
        }
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription', 'Required parameter requestParameters.subscription was null or undefined when calling revokeApiKeyForApiSubscription.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling revokeApiKeyForApiSubscription.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling revokeApiKeyForApiSubscription.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling revokeApiKeyForApiSubscription.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/apikeys/{apikey}`.replace(`{${"apikey"}}`, encodeURIComponent(String(requestParameters.apikey))).replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the API_SUBSCRIPTION:DELETE permission to use this service
     * Revoke API key
     */
    async revokeApiKeyForApiSubscription(requestParameters) {
        await this.revokeApiKeyForApiSubscriptionRaw(requestParameters);
    }
    /**
     * User must have the MANAGE_LIFECYCLE permission to use this service
     * Rollback API to a previous version
     */
    async rollbackApiRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling rollbackApi.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling rollbackApi.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling rollbackApi.');
        }
        if (requestParameters.rollbackApiEntity === null || requestParameters.rollbackApiEntity === undefined) {
            throw new runtime.RequiredError('rollbackApiEntity', 'Required parameter requestParameters.rollbackApiEntity was null or undefined when calling rollbackApi.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/rollback`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RollbackApiEntityToJSON(requestParameters.rollbackApiEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_LIFECYCLE permission to use this service
     * Rollback API to a previous version
     */
    async rollbackApi(requestParameters) {
        const response = await this.rollbackApiRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_EVENT[READ] permission to use this service
     * Get API\'s events
     */
    async searchApiEventsRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling searchApiEvents.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling searchApiEvents.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling searchApiEvents.');
        }
        const queryParameters = {};
        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }
        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }
        if (requestParameters.apiIds) {
            queryParameters['api_ids'] = requestParameters.apiIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/events/search`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => EventEntityPageFromJSON(jsonValue));
    }
    /**
     * User must have the API_EVENT[READ] permission to use this service
     * Get API\'s events
     */
    async searchApiEvents(requestParameters) {
        const response = await this.searchApiEventsRaw(requestParameters);
        return await response.value();
    }
    /**
     * Search for API using the search engine
     */
    async searchApisRaw(requestParameters) {
        if (requestParameters.q === null || requestParameters.q === undefined) {
            throw new runtime.RequiredError('q', 'Required parameter requestParameters.q was null or undefined when calling searchApis.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling searchApis.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling searchApis.');
        }
        const queryParameters = {};
        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/_search`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiListItemFromJSON));
    }
    /**
     * Search for API using the search engine
     */
    async searchApis(requestParameters) {
        const response = await this.searchApisRaw(requestParameters);
        return await response.value();
    }
    /**
     * Search for API using the search engine
     */
    async searchPagedApisRaw(requestParameters) {
        if (requestParameters.q === null || requestParameters.q === undefined) {
            throw new runtime.RequiredError('q', 'Required parameter requestParameters.q was null or undefined when calling searchPagedApis.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling searchPagedApis.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling searchPagedApis.');
        }
        const queryParameters = {};
        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }
        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }
        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/_search/_paged`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiListItemFromJSON(jsonValue));
    }
    /**
     * Search for API using the search engine
     */
    async searchPagedApis(requestParameters) {
        const response = await this.searchPagedApisRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the TRANSFER_OWNERSHIP permission to use this service
     * Transfer the ownership of the API
     */
    async transferApiMemberOwnershipRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling transferApiMemberOwnership.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling transferApiMemberOwnership.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling transferApiMemberOwnership.');
        }
        if (requestParameters.transferOwnership === null || requestParameters.transferOwnership === undefined) {
            throw new runtime.RequiredError('transferOwnership', 'Required parameter requestParameters.transferOwnership was null or undefined when calling transferApiMemberOwnership.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/members/transfer_ownership`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferOwnershipToJSON(requestParameters.transferOwnership),
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the TRANSFER_OWNERSHIP permission to use this service
     * Transfer the ownership of the API
     */
    async transferApiMemberOwnership(requestParameters) {
        await this.transferApiMemberOwnershipRaw(requestParameters);
    }
    /**
     * User must have the API_SUBSCRIPTION update permission to use this service
     * Transfer a subscription
     */
    async transferApiSubscriptionRaw(requestParameters) {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription', 'Required parameter requestParameters.subscription was null or undefined when calling transferApiSubscription.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling transferApiSubscription.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling transferApiSubscription.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling transferApiSubscription.');
        }
        if (requestParameters.transferSubscriptionEntity === null || requestParameters.transferSubscriptionEntity === undefined) {
            throw new runtime.RequiredError('transferSubscriptionEntity', 'Required parameter requestParameters.transferSubscriptionEntity was null or undefined when calling transferApiSubscription.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/_transfer`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferSubscriptionEntityToJSON(requestParameters.transferSubscriptionEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }
    /**
     * User must have the API_SUBSCRIPTION update permission to use this service
     * Transfer a subscription
     */
    async transferApiSubscription(requestParameters) {
        const response = await this.transferApiSubscriptionRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Update the API
     */
    async updateApiRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApi.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApi.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApi.');
        }
        if (requestParameters.updateApiEntity === null || requestParameters.updateApiEntity === undefined) {
            throw new runtime.RequiredError('updateApiEntity', 'Required parameter requestParameters.updateApiEntity was null or undefined when calling updateApi.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApiEntityToJSON(requestParameters.updateApiEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Update the API
     */
    async updateApi(requestParameters) {
        const response = await this.updateApiRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_ALERT[UPDATE] permission to use this service
     * Update an alert for an API
     */
    async updateApiAlertRaw(requestParameters) {
        if (requestParameters.alert === null || requestParameters.alert === undefined) {
            throw new runtime.RequiredError('alert', 'Required parameter requestParameters.alert was null or undefined when calling updateApiAlert.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiAlert.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiAlert.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiAlert.');
        }
        if (requestParameters.updateAlertTriggerEntity === null || requestParameters.updateAlertTriggerEntity === undefined) {
            throw new runtime.RequiredError('updateAlertTriggerEntity', 'Required parameter requestParameters.updateAlertTriggerEntity was null or undefined when calling updateApiAlert.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/alerts/{alert}`.replace(`{${"alert"}}`, encodeURIComponent(String(requestParameters.alert))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAlertTriggerEntityToJSON(requestParameters.updateAlertTriggerEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => AlertTriggerEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_ALERT[UPDATE] permission to use this service
     * Update an alert for an API
     */
    async updateApiAlert(requestParameters) {
        const response = await this.updateApiAlertRaw(requestParameters);
        return await response.value();
    }
    /**
     * Update generic notification settings
     */
    async updateApiGeneralNotificationSettingsRaw(requestParameters) {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId', 'Required parameter requestParameters.notificationId was null or undefined when calling updateApiGeneralNotificationSettings.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiGeneralNotificationSettings.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiGeneralNotificationSettings.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiGeneralNotificationSettings.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/notificationsettings/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GenericNotificationConfigEntityToJSON(requestParameters.genericNotificationConfigEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => GenericNotificationConfigEntityFromJSON(jsonValue));
    }
    /**
     * Update generic notification settings
     */
    async updateApiGeneralNotificationSettings(requestParameters) {
        const response = await this.updateApiGeneralNotificationSettingsRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_SUBSCRIPTION:UPDATE permission to use this service
     * Update API Key
     */
    async updateApiKeyForApiSubscriptionRaw(requestParameters) {
        if (requestParameters.apikey === null || requestParameters.apikey === undefined) {
            throw new runtime.RequiredError('apikey', 'Required parameter requestParameters.apikey was null or undefined when calling updateApiKeyForApiSubscription.');
        }
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription', 'Required parameter requestParameters.subscription was null or undefined when calling updateApiKeyForApiSubscription.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiKeyForApiSubscription.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiKeyForApiSubscription.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiKeyForApiSubscription.');
        }
        if (requestParameters.apiKeyEntity === null || requestParameters.apiKeyEntity === undefined) {
            throw new runtime.RequiredError('apiKeyEntity', 'Required parameter requestParameters.apiKeyEntity was null or undefined when calling updateApiKeyForApiSubscription.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}/apikeys/{apikey}`.replace(`{${"apikey"}}`, encodeURIComponent(String(requestParameters.apikey))).replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiKeyEntityToJSON(requestParameters.apiKeyEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_SUBSCRIPTION:UPDATE permission to use this service
     * Update API Key
     */
    async updateApiKeyForApiSubscription(requestParameters) {
        const response = await this.updateApiKeyForApiSubscriptionRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_METADATA[UPDATE] permission to use this service
     * Update an API metadata
     */
    async updateApiMetadataRaw(requestParameters) {
        if (requestParameters.metadata === null || requestParameters.metadata === undefined) {
            throw new runtime.RequiredError('metadata', 'Required parameter requestParameters.metadata was null or undefined when calling updateApiMetadata.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiMetadata.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiMetadata.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiMetadata.');
        }
        if (requestParameters.updateApiMetadataEntity === null || requestParameters.updateApiMetadataEntity === undefined) {
            throw new runtime.RequiredError('updateApiMetadataEntity', 'Required parameter requestParameters.updateApiMetadataEntity was null or undefined when calling updateApiMetadata.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/metadata/{metadata}`.replace(`{${"metadata"}}`, encodeURIComponent(String(requestParameters.metadata))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApiMetadataEntityToJSON(requestParameters.updateApiMetadataEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiMetadataEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_METADATA[UPDATE] permission to use this service
     * Update an API metadata
     */
    async updateApiMetadata(requestParameters) {
        const response = await this.updateApiMetadataRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Update a page
     */
    async updateApiPageRaw(requestParameters) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page', 'Required parameter requestParameters.page was null or undefined when calling updateApiPage.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiPage.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiPage.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiPage.');
        }
        if (requestParameters.updatePageEntity === null || requestParameters.updatePageEntity === undefined) {
            throw new runtime.RequiredError('updatePageEntity', 'Required parameter requestParameters.updatePageEntity was null or undefined when calling updateApiPage.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePageEntityToJSON(requestParameters.updatePageEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Update a page
     */
    async updateApiPage(requestParameters) {
        const response = await this.updateApiPageRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must be ADMIN to use this service
     * Import pages
     */
    async updateApiPageImportFilesRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiPageImportFiles.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiPageImportFiles.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiPageImportFiles.');
        }
        if (requestParameters.importPageEntity === null || requestParameters.importPageEntity === undefined) {
            throw new runtime.RequiredError('importPageEntity', 'Required parameter requestParameters.importPageEntity was null or undefined when calling updateApiPageImportFiles.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/_import`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ImportPageEntityToJSON(requestParameters.importPageEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }
    /**
     * User must be ADMIN to use this service
     * Import pages
     */
    async updateApiPageImportFiles(requestParameters) {
        const response = await this.updateApiPageImportFilesRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Update a plan
     */
    async updateApiPlanRaw(requestParameters) {
        if (requestParameters.plan === null || requestParameters.plan === undefined) {
            throw new runtime.RequiredError('plan', 'Required parameter requestParameters.plan was null or undefined when calling updateApiPlan.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiPlan.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiPlan.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiPlan.');
        }
        if (requestParameters.updatePlanEntity === null || requestParameters.updatePlanEntity === undefined) {
            throw new runtime.RequiredError('updatePlanEntity', 'Required parameter requestParameters.updatePlanEntity was null or undefined when calling updateApiPlan.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/plans/{plan}`.replace(`{${"plan"}}`, encodeURIComponent(String(requestParameters.plan))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePlanEntityToJSON(requestParameters.updatePlanEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PlanEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Update a plan
     */
    async updateApiPlan(requestParameters) {
        const response = await this.updateApiPlanRaw(requestParameters);
        return await response.value();
    }
    /**
     * Update portal notification settings
     */
    async updateApiPortalNotificationSettingsRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiPortalNotificationSettings.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiPortalNotificationSettings.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiPortalNotificationSettings.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/notificationsettings`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PortalNotificationConfigEntityToJSON(requestParameters.portalNotificationConfigEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PortalNotificationConfigEntityFromJSON(jsonValue));
    }
    /**
     * Update portal notification settings
     */
    async updateApiPortalNotificationSettings(requestParameters) {
        const response = await this.updateApiPortalNotificationSettingsRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_QUALITY_RULE[UPDATE] permission to use this service
     * Update an existing quality rules for an API
     */
    async updateApiQualityRuleRaw(requestParameters) {
        if (requestParameters.qualityRule === null || requestParameters.qualityRule === undefined) {
            throw new runtime.RequiredError('qualityRule', 'Required parameter requestParameters.qualityRule was null or undefined when calling updateApiQualityRule.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiQualityRule.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiQualityRule.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiQualityRule.');
        }
        if (requestParameters.updateApiQualityRuleEntity === null || requestParameters.updateApiQualityRuleEntity === undefined) {
            throw new runtime.RequiredError('updateApiQualityRuleEntity', 'Required parameter requestParameters.updateApiQualityRuleEntity was null or undefined when calling updateApiQualityRule.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/quality-rules/{qualityRule}`.replace(`{${"qualityRule"}}`, encodeURIComponent(String(requestParameters.qualityRule))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApiQualityRuleEntityToJSON(requestParameters.updateApiQualityRuleEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiQualityRuleEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_QUALITY_RULE[UPDATE] permission to use this service
     * Update an existing quality rules for an API
     */
    async updateApiQualityRule(requestParameters) {
        const response = await this.updateApiQualityRuleRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_RATING[UPDATE] permission to use this service
     * Update an existing rating for an API
     */
    async updateApiRatingRaw(requestParameters) {
        if (requestParameters.rating === null || requestParameters.rating === undefined) {
            throw new runtime.RequiredError('rating', 'Required parameter requestParameters.rating was null or undefined when calling updateApiRating.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiRating.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiRating.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiRating.');
        }
        if (requestParameters.updateRatingEntity === null || requestParameters.updateRatingEntity === undefined) {
            throw new runtime.RequiredError('updateRatingEntity', 'Required parameter requestParameters.updateRatingEntity was null or undefined when calling updateApiRating.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/ratings/{rating}`.replace(`{${"rating"}}`, encodeURIComponent(String(requestParameters.rating))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRatingEntityToJSON(requestParameters.updateRatingEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => RatingEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_RATING[UPDATE] permission to use this service
     * Update an existing rating for an API
     */
    async updateApiRating(requestParameters) {
        const response = await this.updateApiRatingRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Update a subscription
     */
    async updateApiSubscriptionRaw(requestParameters) {
        if (requestParameters.subscription === null || requestParameters.subscription === undefined) {
            throw new runtime.RequiredError('subscription', 'Required parameter requestParameters.subscription was null or undefined when calling updateApiSubscription.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiSubscription.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiSubscription.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiSubscription.');
        }
        if (requestParameters.updateSubscriptionEntity === null || requestParameters.updateSubscriptionEntity === undefined) {
            throw new runtime.RequiredError('updateSubscriptionEntity', 'Required parameter requestParameters.updateSubscriptionEntity was null or undefined when calling updateApiSubscription.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/{subscription}`.replace(`{${"subscription"}}`, encodeURIComponent(String(requestParameters.subscription))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSubscriptionEntityToJSON(requestParameters.updateSubscriptionEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_PLANS permission to use this service
     * Update a subscription
     */
    async updateApiSubscription(requestParameters) {
        const response = await this.updateApiSubscriptionRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Update the API with an existing API definition in JSON format either with json or via an URL
     */
    async updateApiWithDefinitionRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiWithDefinition.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiWithDefinition.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiWithDefinition.');
        }
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling updateApiWithDefinition.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/import`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Update the API with an existing API definition in JSON format either with json or via an URL
     */
    async updateApiWithDefinition(requestParameters) {
        const response = await this.updateApiWithDefinitionRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Update the API with an existing Swagger descriptor
     */
    async updateApiWithSwaggerPUTRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiWithSwaggerPUT.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiWithSwaggerPUT.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiWithSwaggerPUT.');
        }
        if (requestParameters.importSwaggerDescriptorEntity === null || requestParameters.importSwaggerDescriptorEntity === undefined) {
            throw new runtime.RequiredError('importSwaggerDescriptorEntity', 'Required parameter requestParameters.importSwaggerDescriptorEntity was null or undefined when calling updateApiWithSwaggerPUT.');
        }
        const queryParameters = {};
        if (requestParameters.definitionVersion !== undefined) {
            queryParameters['definitionVersion'] = requestParameters.definitionVersion;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/import/swagger`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ImportSwaggerDescriptorEntityToJSON(requestParameters.importSwaggerDescriptorEntity),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Update the API with an existing Swagger descriptor
     */
    async updateApiWithSwaggerPUT(requestParameters) {
        const response = await this.updateApiWithSwaggerPUTRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Update the API with an existing API definition in JSON format either with json or via an URL
     */
    async updateApiWithUrlRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updateApiWithUrl.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateApiWithUrl.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateApiWithUrl.');
        }
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling updateApiWithUrl.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'text/plain';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/import-url`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * User must have the MANAGE_API permission to use this service
     * Update the API with an existing API definition in JSON format either with json or via an URL
     */
    async updateApiWithUrl(requestParameters) {
        const response = await this.updateApiWithUrlRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Put the page\'s content
     */
    async updatePageContentRaw(requestParameters) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page', 'Required parameter requestParameters.page was null or undefined when calling updatePageContent.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling updatePageContent.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updatePageContent.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updatePageContent.');
        }
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling updatePageContent.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/pages/{page}/content`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User must have the MANAGE_PAGES permission to use this service
     * Put the page\'s content
     */
    async updatePageContent(requestParameters) {
        await this.updatePageContentRaw(requestParameters);
    }
    /**
     * Update the API from the API definition in JSON format either with json or via an URL
     * Update the API from the API definition
     */
    async updateWithDefinitionRaw(requestParameters) {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling updateWithDefinition.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling updateWithDefinition.');
        }
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling updateWithDefinition.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/import`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiEntityFromJSON(jsonValue));
    }
    /**
     * Update the API from the API definition in JSON format either with json or via an URL
     * Update the API from the API definition
     */
    async updateWithDefinition(requestParameters) {
        const response = await this.updateWithDefinitionRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_DOCUMENTATION[CREATE] permission to use this service
     * Create a media for an API
     */
    async uploadApiMediaImageRaw(requestParameters) {
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling uploadApiMediaImage.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling uploadApiMediaImage.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling uploadApiMediaImage.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/media/upload`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PageEntityFromJSON(jsonValue));
    }
    /**
     * User must have the API_DOCUMENTATION[CREATE] permission to use this service
     * Create a media for an API
     */
    async uploadApiMediaImage(requestParameters) {
        const response = await this.uploadApiMediaImageRaw(requestParameters);
        return await response.value();
    }
    /**
     * Check if an API match the following criteria
     */
    async verifyApiRaw(requestParameters) {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling verifyApi.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling verifyApi.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/verify`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyApiParamToJSON(requestParameters.verifyApiParam),
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * Check if an API match the following criteria
     */
    async verifyApi(requestParameters) {
        const response = await this.verifyApiRaw(requestParameters);
        return await response.value();
    }
    /**
     * User must have the API_SUBSCRIPTION:READ permission to use this service
     * Check a subscription can be created with given api key, and application
     */
    async verifyApiKeyCreationRaw(requestParameters) {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key', 'Required parameter requestParameters.key was null or undefined when calling verifyApiKeyCreation.');
        }
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application', 'Required parameter requestParameters.application was null or undefined when calling verifyApiKeyCreation.');
        }
        if (requestParameters.api === null || requestParameters.api === undefined) {
            throw new runtime.RequiredError('api', 'Required parameter requestParameters.api was null or undefined when calling verifyApiKeyCreation.');
        }
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId', 'Required parameter requestParameters.envId was null or undefined when calling verifyApiKeyCreation.');
        }
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId', 'Required parameter requestParameters.orgId was null or undefined when calling verifyApiKeyCreation.');
        }
        const queryParameters = {};
        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }
        if (requestParameters.application !== undefined) {
            queryParameters['application'] = requestParameters.application;
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/organizations/{orgId}/environments/{envId}/apis/{api}/subscriptions/_canCreate`.replace(`{${"api"}}`, encodeURIComponent(String(requestParameters.api))).replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))).replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * User must have the API_SUBSCRIPTION:READ permission to use this service
     * Check a subscription can be created with given api key, and application
     */
    async verifyApiKeyCreation(requestParameters) {
        const response = await this.verifyApiKeyCreationRaw(requestParameters);
        return await response.value();
    }
}
/**
    * @export
    * @enum {string}
    */
export var GetApiSubscriptionsExpandEnum;
(function (GetApiSubscriptionsExpandEnum) {
    GetApiSubscriptionsExpandEnum["Keys"] = "keys";
    GetApiSubscriptionsExpandEnum["Security"] = "security";
})(GetApiSubscriptionsExpandEnum || (GetApiSubscriptionsExpandEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetApisExecutionModeEnum;
(function (GetApisExecutionModeEnum) {
    GetApisExecutionModeEnum["V3"] = "V3";
    GetApisExecutionModeEnum["JUPITER"] = "JUPITER";
})(GetApisExecutionModeEnum || (GetApisExecutionModeEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetApisPagedExecutionModeEnum;
(function (GetApisPagedExecutionModeEnum) {
    GetApisPagedExecutionModeEnum["V3"] = "V3";
    GetApisPagedExecutionModeEnum["JUPITER"] = "JUPITER";
})(GetApisPagedExecutionModeEnum || (GetApisPagedExecutionModeEnum = {}));
