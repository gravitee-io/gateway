/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { ProjectionFromJSON, ProjectionToJSON, } from './';
import { AggregationConditionFromJSONTyped, CompareConditionFromJSONTyped, MissingDataConditionFromJSONTyped, RateConditionFromJSONTyped, StringCompareConditionFromJSONTyped, StringConditionFromJSONTyped, ThresholdConditionFromJSONTyped, ThresholdRangeConditionFromJSONTyped } from './';
export function ConditionFromJSON(json) {
    return ConditionFromJSONTyped(json, false);
}
export function ConditionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'AggregationCondition') {
            return AggregationConditionFromJSONTyped(json, true);
        }
        if (json['type'] === 'CompareCondition') {
            return CompareConditionFromJSONTyped(json, true);
        }
        if (json['type'] === 'MissingDataCondition') {
            return MissingDataConditionFromJSONTyped(json, true);
        }
        if (json['type'] === 'RateCondition') {
            return RateConditionFromJSONTyped(json, true);
        }
        if (json['type'] === 'StringCompareCondition') {
            return StringCompareConditionFromJSONTyped(json, true);
        }
        if (json['type'] === 'StringCondition') {
            return StringConditionFromJSONTyped(json, true);
        }
        if (json['type'] === 'ThresholdCondition') {
            return ThresholdConditionFromJSONTyped(json, true);
        }
        if (json['type'] === 'ThresholdRangeCondition') {
            return ThresholdRangeConditionFromJSONTyped(json, true);
        }
    }
    return {
        'projections': !exists(json, 'projections') ? undefined : (json['projections'].map(ProjectionFromJSON)),
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}
export function ConditionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'projections': value.projections === undefined ? undefined : (value.projections.map(ProjectionToJSON)),
        'type': value.type,
    };
}
/**
* @export
* @enum {string}
*/
export var ConditionTypeEnum;
(function (ConditionTypeEnum) {
    ConditionTypeEnum["STRING"] = "STRING";
    ConditionTypeEnum["THRESHOLD"] = "THRESHOLD";
    ConditionTypeEnum["THRESHOLDRANGE"] = "THRESHOLD_RANGE";
    ConditionTypeEnum["RATE"] = "RATE";
    ConditionTypeEnum["FREQUENCY"] = "FREQUENCY";
    ConditionTypeEnum["AGGREGATION"] = "AGGREGATION";
    ConditionTypeEnum["COMPARE"] = "COMPARE";
    ConditionTypeEnum["STRINGCOMPARE"] = "STRING_COMPARE";
    ConditionTypeEnum["MISSINGDATA"] = "MISSING_DATA";
})(ConditionTypeEnum || (ConditionTypeEnum = {}));
