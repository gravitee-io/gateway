databaseChangeLog:
  - changeSet:
      id: 4.4.0_create_api_categories_table
      author: GraviteeSource Team
###############
####  Create pre-migrated table if missing
###############
      preConditions:
        - onFail: MARK_RAN
        - not:
            - tableExists:
                tableName: ${gravitee_prefix}api_categories
      changes:
        - createTable:
            tableName: ${gravitee_prefix}api_categories
            columns:
              - column: { name: api_id, type: nvarchar(64), constraints: { nullable: false } }
              - column: { name: category, type: nvarchar(64), constraints: { nullable: false } }
  - changeSet:
      id: 4.4.0_migrate_api_categories_table
      author: GraviteeSource Team
      changes:
        #####################
        #### Step 1 - Update api_categories with category ids on join
        #####################
        - sql:
            dbms: postgresql
            sql: |
              update ${gravitee_prefix}api_categories ac
                set category = search.catId
                from (
                  select ac.api_id as apiId,
                    ac.category as catKey,
                    c.id as catId
                  FROM ${gravitee_prefix}api_categories ac
                    JOIN ${gravitee_prefix}apis a on a.id = ac.api_id
                    JOIN ${gravitee_prefix}categories c on c.key = ac.category and c.environment_id = a.environment_id
                ) as search
                where ac.api_id = search.apiId and ac.category = search.catKey;
        - sql:
            dbms: mysql, mariadb
            sql: |
              UPDATE ${gravitee_prefix}api_categories ac
                JOIN (
                  SELECT ac.api_id AS apiId,
                    ac.category AS catKey,
                    c.id AS catId
                  FROM ${gravitee_prefix}api_categories ac
                    JOIN ${gravitee_prefix}apis a ON a.id = ac.api_id
                    JOIN ${gravitee_prefix}categories c ON c.key = ac.category AND c.environment_id = a.environment_id
                ) AS search
                ON ac.api_id = search.apiId AND ac.category = search.catKey
                SET ac.category = search.catId;
        - sql:
            dbms: mssql
            sql: |
              UPDATE ac
                SET ac.category = search.catId
                FROM ${gravitee_prefix}api_categories ac
                JOIN (
                  SELECT ac.api_id AS apiId,
                    ac.category AS catKey,
                    c.id AS catId
                  FROM ${gravitee_prefix}api_categories ac
                    JOIN ${gravitee_prefix}apis a ON a.id = ac.api_id
                    JOIN ${gravitee_prefix}categories c ON c.[key] = ac.category AND c.environment_id = a.environment_id
                ) AS search
                ON ac.api_id = search.apiId AND ac.category = search.catKey;
        #####################
        #### Step 2 - Rename category column --> category_id
        #####################
        - renameColumn:
            tableName: ${gravitee_prefix}api_categories
            newColumnName: category_id
            oldColumnName: category
            columnDataType: nvarchar(64)
        #####################
        #### Step 3 - Add category_key and order columns
        #####################
        - addColumn:
            tableName: ${gravitee_prefix}api_categories
            columns:
              - column:
                  name: category_key
                  type: varchar(64)
                  required: true
              - column:
                  name: order
                  type: integer
                  required: true
        #####################
        #### Step 4 - Update category_key on join
        #####################
        - sql:
            dbms: postgresql
            sql: |
              update ${gravitee_prefix}api_categories ac
                set category_key = c.key
                from ${gravitee_prefix}categories c
                where ac.category_id = c.id;
        - sql:
            dbms: mysql, mariadb
            sql: |
              UPDATE ${gravitee_prefix}api_categories ac
                JOIN ${gravitee_prefix}categories c ON ac.category_id = c.id
                SET ac.category_key = c.key;
        - sql:
            dbms: mssql
            sql: |
              UPDATE ac
              SET ac.category_key = c.[key]
              FROM ${gravitee_prefix}api_categories ac
              JOIN ${gravitee_prefix}categories c ON ac.category_id = c.id;
        #####################
        #### Step 5 - Update order by row when partitioned by category_id
        #####################
        - sql:
            dbms: postgresql
            sql: |
              update ${gravitee_prefix}api_categories ac
                set "order"=subquery.order
                from (
                  select category_id, api_id,
                    -1 + row_number() over (partition by category_id order by category_id) as "order"
                    from ${gravitee_prefix}api_categories order by category_id
                ) as subquery
                where ac.api_id=subquery.api_id and ac.category_id=subquery.category_id;
        - sql:
            dbms: mysql
            sql: |
              UPDATE ${gravitee_prefix}api_categories ac
                JOIN (
                  SELECT category_id, api_id,
                    -1 + ROW_NUMBER() OVER (PARTITION BY category_id ORDER BY category_id) AS `order`
                  FROM ${gravitee_prefix}api_categories
                  ORDER BY category_id
                ) AS subquery
                ON ac.api_id = subquery.api_id AND ac.category_id = subquery.category_id
                SET ac.order = subquery.order;
        - sql:
            dbms: mariadb
            sql: |
              UPDATE ${gravitee_prefix}api_categories ac
                JOIN (
                  SELECT category_id, api_id,
                    -1 + (@row_num := IF(@prev_category = category_id, @row_num + 1, 1)) AS `order`,
                    @prev_category := category_id
                  FROM ${gravitee_prefix}api_categories, (SELECT @row_num := 0, @prev_category := '') AS vars
                  ORDER BY category_id
                ) AS subquery
                ON ac.api_id = subquery.api_id AND ac.category_id = subquery.category_id
                SET ac.order = subquery.order;
        - sql:
            dbms: mssql
            sql: |
              UPDATE ac
              SET ac.[order] = subquery.[order]
              FROM ${gravitee_prefix}api_categories ac
              JOIN (
                SELECT category_id, api_id,
                  -1 + ROW_NUMBER() OVER (PARTITION BY category_id ORDER BY category_id) AS [order]
                FROM ${gravitee_prefix}api_categories
              ) AS subquery
              ON ac.api_id = subquery.api_id AND ac.category_id = subquery.category_id